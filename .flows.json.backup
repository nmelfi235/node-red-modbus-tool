[
    {
        "id": "060240745de70bc6",
        "type": "tab",
        "label": "Logging Service",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "bb83c536da590f5c",
        "type": "tab",
        "label": "WattNode Service",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e5680ec93718b3f6",
        "type": "tab",
        "label": "Inverter Service",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b1d7e9e0a4578c1f",
        "type": "tab",
        "label": "BMS Service",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2dc6fe71588e17c7",
        "type": "tab",
        "label": "Historical Service",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "05b90c81d8e90a14",
        "type": "tab",
        "label": "API",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "7fde02a3dbacda26",
        "type": "tab",
        "label": "BMS",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3acd283250bad6bf",
        "type": "tab",
        "label": "Capacity Service",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9c7b6bcb5d3cc407",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "74744644deeb2c2d",
        "type": "tab",
        "label": "BESS Dashboard Clone: Placeholder Data",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "8422413f2206a942",
        "type": "tab",
        "label": "BESS Dashboard Clone: Real Data",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4dc0f4bb14a51582",
        "type": "tab",
        "label": "Inverter Reader",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ca2cbf00c7f20f50",
        "type": "subflow",
        "name": "Error 404 Response",
        "info": "",
        "category": "network",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "efdcc764c4fbd2a8"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c625d94296a71599",
        "type": "subflow",
        "name": "Error 500 Response",
        "info": "",
        "category": "network",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "baa4e621176aae3c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "errormsg",
                "type": "str",
                "value": "There was an error.",
                "ui": {
                    "icon": "font-awesome/fa-comment-o",
                    "label": {
                        "en-US": "Error Message"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "logmsg",
                "type": "str",
                "value": "Error with Something:",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "en-US": "Log Header"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2dcb06cda48677d7",
        "type": "subflow",
        "name": "Error 400 Response",
        "info": "",
        "category": "network",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7fa8d5d3f42a87f8"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "errormsg",
                "type": "str",
                "value": "There was an error.",
                "ui": {
                    "icon": "font-awesome/fa-comment-o",
                    "label": {
                        "en-US": "Error Message"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "826f2798ac97948c",
        "type": "subflow",
        "name": "Parse Sunspec",
        "info": "`msg.buffer` should be set to the modbus read",
        "category": "modbus",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "543c0f2ecc46a615"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2420,
                "y": 60,
                "wires": [
                    {
                        "id": "08f42ce2b8e5ca7a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ssmodel",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-info-circle",
                    "label": {
                        "en-US": "Sunspec Model"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "da1113f849ed321d",
        "type": "subflow",
        "name": "Modbus Request",
        "info": "### Inputs\r\n<dl class=\"message-properties\">\r\n    <dt>\r\n        payload\r\n        <span class=\"property-type\">array</span>\r\n    </dt>\r\n    <dd>\r\n        An array of objects with the following properties.\r\n        <ul>\r\n            <li><code>start</code></li>\r\n            <li><code>endinc</code></li>\r\n            <li><code>unitid</code></li>\r\n        </ul>\r\n    </dd>\r\n</dl>\r\n\r\n### Outputs\r\n: payload (object) : The parsed values associated with their names in the SunSpec model.",
        "category": "modbus",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "9711d632f9f6dc4a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 760,
                "wires": [
                    {
                        "id": "d816f3aeda77da32",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "device",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Device"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Inverter (502)"
                                },
                                "v": "inv502"
                            },
                            {
                                "l": {
                                    "en-US": "Inverter (503)"
                                },
                                "v": "inv503"
                            },
                            {
                                "l": {
                                    "en-US": "WattNode"
                                },
                                "v": "wattnode"
                            },
                            {
                                "l": {
                                    "en-US": "BMS"
                                },
                                "v": "bms"
                            }
                        ]
                    }
                }
            },
            {
                "name": "model",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Model"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "XW Pro (503)"
                                },
                                "v": "c1"
                            },
                            {
                                "l": {
                                    "en-US": "XW Pro (502)"
                                },
                                "v": "c2"
                            },
                            {
                                "l": {
                                    "en-US": "Battery Base Model (802)"
                                },
                                "v": "802"
                            },
                            {
                                "l": {
                                    "en-US": "3-Phase Meter (213)"
                                },
                                "v": "213"
                            }
                        ]
                    }
                }
            },
            {
                "name": "modeladdr",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Model Start Address"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red-contrib-modbus/modbus-icon.png",
        "status": {
            "x": 220,
            "y": 60,
            "wires": [
                {
                    "id": "8cf8c1f724251028",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "60b9353837f41409",
        "type": "subflow",
        "name": "SSE Server",
        "info": "",
        "category": "network",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "45aaaa4ea40c6d3b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "event",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-exclamation",
                    "label": {
                        "en-US": "SSE Event"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "data",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "en-US": "Event Data"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/white-globe.svg",
        "status": {
            "x": 260,
            "y": 60,
            "wires": [
                {
                    "id": "7ffcef4a76897296",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e7875e2de9c03017",
        "type": "group",
        "z": "060240745de70bc6",
        "name": "GET /log/info",
        "style": {
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "7af68148ed617c49",
            "085c4ad6a27bef27",
            "514a5906c8c36ed5",
            "f00f48fb83236220",
            "47d5ec2e29f4a75c",
            "8a64b210bb419880",
            "1467fa61be5516c4",
            "de7e2ba1bf229849",
            "321214cff9ac19e7",
            "e74a7937f9a8b10f",
            "9c0608e9f8a9a204",
            "75b2f8d3b8dafc8f",
            "af2fdf8df365932d"
        ],
        "x": 194,
        "y": 819,
        "info": "# GET /log/info\r\nGet a list of logging devices or information\r\nabout a specific device.\r\n\r\n### URL Format\r\nThe request URL must be in the following formats.\r\n- `/log/info`\r\n- `/log/info/[id]` - `[id]` is a registered device id\r\n\r\n### Procedure\r\n1. Recieve request\r\n2. Verify request parameters\r\n3. Check that device exists\r\n4. Retrieve device info\r\n5. Respond with info\r\n\r\n### Responses\r\n- `404` - Unknown device id (if provided)\r\n- `500` - Internal error when reading from SQL database\r\n- `200` - Success  \r\nThe body of the message will contain either a\r\na list of device ids (if no id is given) or\r\nthe device information."
    },
    {
        "id": "9a4c8c642f90b5f9",
        "type": "group",
        "z": "060240745de70bc6",
        "name": "GET /log/status",
        "style": {
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "dcf90db21725757d",
            "6c449fd564a9ecd2",
            "4fd4e576a66823ba",
            "8943f005652f4bb1",
            "653a20d09b8b8699",
            "0c01c1f85f9c26bc",
            "ad0aa214fde7a3a9",
            "ae7baee6b8c03746",
            "a7dcaa9b3e542b70",
            "3a31511fa94e9129",
            "861c36e9da5cc731",
            "986ab8e0bcd62ccf",
            "fafe070557d0a9c8",
            "e438baf5e34ece62"
        ],
        "x": 194,
        "y": 399,
        "info": "# GET /log/status\r\nGet the connection status of a device.\r\n\r\n### URL Format\r\nThe request URL must be in the following formats.\r\n- `/log/status/[id]` - `[id]` is a registered device id\r\n\r\n### Procedure\r\n1. Recieve request\r\n2. Verify request parameters\r\n3. Check that device exists\r\n4. Retrieve device status\r\n5. Respond with status\r\n\r\n### Responses\r\n- `404` - Unknown device id\r\n- `500` - Internal error when reading from SQL database\r\n- `500` - Device address unreachable\r\n- `500` - Malformed response from device address\r\n- `200` - Success  \r\nThe body of the message will contain the name\r\nof the device and it's respective status\r\n(`\"connected\"` or `\"fail\"`)."
    },
    {
        "id": "f1ccc8bd2ac54d97",
        "type": "group",
        "z": "060240745de70bc6",
        "name": "POST /log/register",
        "style": {
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "4fdcdd1aaf2cc630",
            "3431e4fa78349449",
            "cebb5660f8fa4666",
            "4ae0d4cced67a221",
            "e937f95755f0aea3",
            "29a8b67e75c87ff3",
            "bc223d5c956d8dac",
            "0b35f57da62bc11b",
            "68bc76ec11fdafee",
            "299b7d608855aa7a",
            "22e4d983d6f09553",
            "25f3a83e48519a95",
            "a24736a631d53c6a",
            "a493908c90418cda",
            "d006e5721410794e",
            "388612334105d9ab",
            "3141cf159d9fe3aa"
        ],
        "x": 194,
        "y": 579,
        "info": "# POST /log/register\r\nRegister a new device to log data.\r\n\r\n### Request Body\r\nJSON object containing the following properties.\r\n- `name` - Device name\r\n- `address` - Device status URL\r\n- `powertype` - Either `\"acdc\"`, `\"ac\"`, `\"dc\"`, or `\"none\"`\r\n\r\n### Procedure\r\n1. Recieve request\r\n2. Verify request parameters\r\n3. Check that connection address responds\r\n4. Assign unique device ID\r\n5. Record device\r\n\r\n### Responses\r\n- `400` - There was an issue with the request parameters\r\n- `400` - The connection address responded incorrectly or not at all\r\n- `500` - Internal error when writing to SQL database\r\n- `200` - Success  \r\nThe body of the message will contain the recorded device information and id.\r\n\r\n### Device Status\r\nThe URL for device connection should respond\r\nwith a JSON object containing the following properties.\r\n- `status` - Either `\"connected\"` or `\"fail\"`"
    },
    {
        "id": "9f9ce2cd5a2131c3",
        "type": "group",
        "z": "060240745de70bc6",
        "name": "POST /log/record",
        "style": {
            "label": true,
            "label-position": "sw"
        },
        "nodes": [
            "96f99957b5071c89",
            "36f3b8db5fa30706",
            "18270af3f52bdf02",
            "4bfe5a943caf0bd3",
            "b917ac3be5e883c7",
            "723ef3bd1c68f81a",
            "a9e4fa5dd7c04fbd",
            "8f860c08121896d9",
            "3365ddb2fede8b56",
            "fd9bc06971cb7d34",
            "8190129e7c5f717a",
            "7ff4163166824f35",
            "b5414f660bf6f02c",
            "933f379216a90879",
            "6d1a2f27d0eabb46",
            "d7570cfbdd465a92",
            "91f4422cae6d79f5",
            "89070e322dc5035d",
            "c7c4cbe8daa21e8a",
            "430f966847abe48c",
            "2322c598d49e45cd",
            "392a19925a0c9b2a",
            "34a2aa1c6dc52269",
            "6c49b36440883348"
        ],
        "x": 194,
        "y": 211.5,
        "info": "# POST /log/record\r\nRecord device data into the log.\r\n\r\n### URL Format\r\nThe request URL must be in the following formats.\r\n- `/log/record/[category]/[id]` - `[category]` is\r\na logging category name and `[id]` is a registered\r\ndevice id\r\n\r\n### Request Body\r\nJSON object containing the values to be stored. See\r\nthe section below about logging categories.\r\n\r\n### Procedure\r\n1. Recieve request\r\n2. Check if category exists and device exists\r\n3. Verify device can record to the category\r\n4. Verify values are valid for the category\r\n5. Record data\r\n\r\n### Responses\r\n- `404` - Unknown category\r\n- `404` - Unknown device id\r\n- `400` - Invalid category for device\r\n- `400` - Invalid values for category\r\n- `500` - Internal error when writing to SQL database\r\n- `200` - Success  \r\nThe body of the message will contain the timestamp of\r\nthe recorded data, the device id and the device name.\r\n\r\n### Logging Categories\r\n\r\n#### AC Power\r\nCategory name: `\"powerac\"`  \r\nValues:\r\n- `timestamp` - Required, ISO string of time\r\nof data retrival\r\n- `volts` - Optional*, voltage in volts\r\n- `amps` - Optional*, amperage in amps\r\n- `watts` - Optional*, wattage in watts\r\n- `watthours` - Optional, watthours in watt-hours  \r\n*At the minimum, either `volts` and `amps`\r\nor `watts` must be provided.\r\n\r\n#### DC Power\r\nCategory name: `\"powerdc\"`  \r\nValues:\r\n- `timestamp` - Required, ISO string of time\r\nof data retrival\r\n- `volts` - Optional*, voltage in volts\r\n- `amps` - Optional*, amperage in amps\r\n- `watts` - Optional*, wattage in watts\r\n- `watthours` - Optional, watthours in watt-hours  \r\n*At the minimum, either `volts` and `amps`\r\nor `watts` must be provided.\r\n\r\n#### Battery Status\r\nCategory name: `\"battery\"`  \r\nValues:\r\n- `timestamp` - Required, ISO string of time\r\nof data retrival\r\n- `voltage` - Required, voltage level of the\r\nbattery in volts\r\n- `soc` - Optional, state of charge of the\r\nbattery in percentage\r\n- `health` - Optional, state of health of the\r\nbattery in percentage\r\n- `state` - Required, operational state of the\r\nbattery, either `\"standby\"`, `\"idle\"`, \r\n`\"charging\"`, or `\"discharging\"`"
    },
    {
        "id": "af38d5b5994866d9",
        "type": "group",
        "z": "e5680ec93718b3f6",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "194adb635f9b1c11",
            "79a457a7c046625e",
            "f1865b16d068e488",
            "efea16944386fe65",
            "862dba68ffcab69a",
            "f1a98c8e98819aad",
            "bd2b19c13d701435",
            "34eb321b97e8d73e",
            "b0229cb481613388",
            "0c344cccf8263101",
            "2d223f6874c2ebd9",
            "9c8f9570df4d8eae",
            "3ef0649182b0b463",
            "2c25dc453d994771",
            "c78d10d9207b6273"
        ],
        "x": 34,
        "y": 239
    },
    {
        "id": "06e9bdefebec18b3",
        "type": "group",
        "z": "e5680ec93718b3f6",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "0facc22de6274825",
            "3619a5aeca928cd2",
            "ee354f4e98b669a7",
            "fa54962a7e0f8069",
            "ecb8d3cdc562a609",
            "f79824953eef4fc6"
        ],
        "x": 34,
        "y": 59
    },
    {
        "id": "b2b21d60fd034d5e",
        "type": "group",
        "z": "74744644deeb2c2d",
        "name": "Placeholder Inverter Data Generator",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "ba650aacd9b72e1b",
            "5036fdd32d6954e9",
            "c402d84af592f391",
            "20d64085c0001ed8",
            "83cef3a930100b4a"
        ],
        "x": 94,
        "y": 99
    },
    {
        "id": "03001057cd5c48a2",
        "type": "group",
        "z": "74744644deeb2c2d",
        "name": "Placeholder BMS Data Generator",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "1a68c9c2c02df7b1",
            "f3358f1ccba50160",
            "70c12397d0049302"
        ],
        "x": 94,
        "y": 359
    },
    {
        "id": "a8bbc03dfd9e8d54",
        "type": "group",
        "z": "74744644deeb2c2d",
        "name": "Placeholder Battery Voltage/Current Data Generator",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "9798c35274a2c081",
            "534bfcabbd5462b5",
            "175ef019e4dd417e",
            "4ac5872e35c8173e"
        ],
        "x": 74,
        "y": 479
    },
    {
        "id": "aee3634cd98892d9",
        "type": "group",
        "z": "74744644deeb2c2d",
        "name": "Battery Voltage/Current Graph Data Fetcher",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fe7d7b78d7083376",
            "d2acc6a3ae0e2dfd",
            "c021c82a596df0b0"
        ],
        "x": 74,
        "y": 939
    },
    {
        "id": "abd1b67ed71f30c2",
        "type": "group",
        "z": "74744644deeb2c2d",
        "name": "Modbus Read Tester (Get Name)",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "2e6c901e24c9a24e",
            "868e82969d8ee366",
            "a8643fec24d55610",
            "13a1333344ac2608",
            "7705fa5b2b1f3b26",
            "b6a02b766b81babc"
        ],
        "x": 34,
        "y": 1119
    },
    {
        "id": "bc495f4e2f57c0dd",
        "type": "group",
        "z": "8422413f2206a942",
        "name": "Inverter Modbus Reader",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ff7f7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "75a2e5efe721c76e",
            "831b1d5e435f25d0",
            "0a1b70476780fa02",
            "6312df9e9fa6a47f"
        ],
        "x": 8,
        "y": 53
    },
    {
        "id": "d384788f2ef31aca",
        "type": "group",
        "z": "8422413f2206a942",
        "name": "Battery Voltage/Current Graph",
        "style": {
            "stroke": "#a4a4a4",
            "fill": "#ff7f7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cec22cc792d9c6e6",
            "9fc18d1882191ae2",
            "6135f2a70a8670e3",
            "34c7556b6258aa9b",
            "418b26dcb37c1b04",
            "ec3173feb119ae21",
            "9c42226b3814a5cf",
            "46f66e9cf0273e20",
            "28786c7c6a44965c",
            "5a527f1722be0e17",
            "c198551afb939cd0",
            "0d6284f49faa3796",
            "c1c4138f164a9c41",
            "6d3945f056c40f09"
        ],
        "x": 14,
        "y": 499
    },
    {
        "id": "75a2e5efe721c76e",
        "type": "group",
        "z": "8422413f2206a942",
        "g": "bc495f4e2f57c0dd",
        "name": "API Endpoint",
        "style": {
            "fill": "#ffdf7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c5b1dae229421886",
            "c42e2b72efafb217",
            "64bb070eae83c78a",
            "50713526eed774f0",
            "561ba5279345f3e2",
            "4c38c8a4a1e57e45",
            "5da1361b3651eafa",
            "b8587bfd34ee1712"
        ],
        "x": 34,
        "y": 79
    },
    {
        "id": "831b1d5e435f25d0",
        "type": "group",
        "z": "8422413f2206a942",
        "g": "bc495f4e2f57c0dd",
        "name": "Modbus Interface",
        "style": {
            "stroke": "#d1d1d1",
            "fill": "#ffff7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5a0c75b9b6fb92e7",
            "401d23dd2b193aa1",
            "339bf88bbcb8b2ae",
            "b69ecae4c195f324",
            "c6edc9bf19a533a2",
            "b1ccdf841d297156",
            "da2f0e4678b5a868",
            "1023f3393f2faa95",
            "b8af68e819552965"
        ],
        "x": 374,
        "y": 99
    },
    {
        "id": "0a1b70476780fa02",
        "type": "group",
        "z": "8422413f2206a942",
        "g": "bc495f4e2f57c0dd",
        "name": "Type Parser",
        "style": {
            "stroke": "#d1d1d1",
            "fill": "#7fb7df",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ccc71507e7f7841b",
            "4c068b3e5e73c6d8",
            "d5d4758dd4315988",
            "28fd59b15cc75d04",
            "c39845af558534d1",
            "a139769e8e86a898",
            "1f839ccca882094b",
            "406db0909b60721b",
            "83a829f58c60425c",
            "602d324a5a26df9e",
            "2d671db85bd7543a"
        ],
        "x": 954,
        "y": 99
    },
    {
        "id": "6312df9e9fa6a47f",
        "type": "group",
        "z": "8422413f2206a942",
        "g": "bc495f4e2f57c0dd",
        "name": "Output",
        "style": {
            "fill": "#92d04f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cf750d84368e9ea6",
            "287ad3a48c41f799",
            "901aea3e3d56ecd4"
        ],
        "x": 1594,
        "y": 139
    },
    {
        "id": "c1c4138f164a9c41",
        "type": "group",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "Database Management System",
        "style": {
            "fill": "#a4a4a4",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "69e7fdb80d6fa5d6",
            "c524a1157385f647",
            "5155d2700d0dd48a",
            "1a5b72538145810c",
            "4b2545aaf87319aa",
            "c107927a739dad05",
            "9b8d5e324f64a6bd",
            "edc91d01024973ed"
        ],
        "x": 1034,
        "y": 619
    },
    {
        "id": "6d3945f056c40f09",
        "type": "group",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "Battery Voltage/Current Graph Data Fetcher",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "191db6b28f1634f4",
            "855f46714f98c87b",
            "9e5b7c847419125d"
        ],
        "x": 114,
        "y": 699
    },
    {
        "id": "0bf62b5a82a31810",
        "type": "modbus-client",
        "name": "BMS",
        "clienttype": "simpleser",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/dongle",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "20",
        "clientTimeout": "2000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "100",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ff919ca25c0fe87f",
        "type": "modbus-client",
        "name": "WattNode",
        "clienttype": "simpleser",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/RS485",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 16,
        "commandDelay": 10,
        "clientTimeout": 100,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "fb44781298367a59",
        "type": "modbus-client",
        "name": "ConextGateway",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.11.254.251",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "10",
        "commandDelay": "50",
        "clientTimeout": "10000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "7426633e02a085fd",
        "type": "sqlitedb",
        "db": "/data/log.db",
        "mode": "RWC"
    },
    {
        "id": "916070376faeaa7d",
        "type": "modbus-client",
        "name": "ContextGateway503",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.11.254.251",
        "tcpPort": "503",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "10",
        "commandDelay": "50",
        "clientTimeout": "900",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d7c68280520f9bec",
        "type": "sqlitedb",
        "db": "/data/graphData.db",
        "mode": "RWC"
    },
    {
        "id": "f97c57e2cf9b4762",
        "type": "modbus-client",
        "name": "BMS2",
        "clienttype": "simpleser",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/dongle",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "20",
        "commandDelay": "20",
        "clientTimeout": "500",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "38ada0c8c540ab8f",
        "type": "http response",
        "z": "ca2cbf00c7f20f50",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 360,
        "y": 40,
        "wires": []
    },
    {
        "id": "efdcc764c4fbd2a8",
        "type": "template",
        "z": "ca2cbf00c7f20f50",
        "name": "Error 404 HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Error 404 (Not Found)</title>\n    </head>\n    <body>\n        <h1>Error 404 (Not Found)</h1>\n    </body>\n</html>",
        "output": "str",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "38ada0c8c540ab8f"
            ]
        ]
    },
    {
        "id": "f7519777393391c6",
        "type": "http response",
        "z": "c625d94296a71599",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 620,
        "y": 40,
        "wires": []
    },
    {
        "id": "355048dc111f8fda",
        "type": "template",
        "z": "c625d94296a71599",
        "name": "Error 500 HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Error 500 (Internal Error)</title>\n    </head>\n    <body>\n        <h1>Error 500 (Internal Error)</h1>\n        <p>Not sure what happened, but it wasn't right.</p>\n        <p>Server message: {{errormsg}}</p>\n    </body>\n</html>",
        "output": "str",
        "x": 440,
        "y": 40,
        "wires": [
            [
                "f7519777393391c6"
            ]
        ]
    },
    {
        "id": "baa4e621176aae3c",
        "type": "function",
        "z": "c625d94296a71599",
        "name": "Can't Template Env Vars",
        "func": "msg.errormsg = env.get('errormsg');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "355048dc111f8fda",
                "12a98fab0b4b168a",
                "c506b4417c3adcd7"
            ]
        ]
    },
    {
        "id": "12a98fab0b4b168a",
        "type": "debug",
        "z": "c625d94296a71599",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "$env(\"logmsg\")",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 80,
        "wires": []
    },
    {
        "id": "c506b4417c3adcd7",
        "type": "debug",
        "z": "c625d94296a71599",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "224408051c1acd08",
        "type": "http response",
        "z": "2dcb06cda48677d7",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 620,
        "y": 40,
        "wires": []
    },
    {
        "id": "c06559e559e12b19",
        "type": "template",
        "z": "2dcb06cda48677d7",
        "name": "Error 400 HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Error 400 (Invalid Request)</title>\n    </head>\n    <body>\n        <h1>Error 400 (Invalid Request)</h1>\n        <p>Server message: {{errormsg}}</p>\n    </body>\n</html>",
        "output": "str",
        "x": 440,
        "y": 40,
        "wires": [
            [
                "224408051c1acd08"
            ]
        ]
    },
    {
        "id": "7fa8d5d3f42a87f8",
        "type": "function",
        "z": "2dcb06cda48677d7",
        "name": "Can't Template Env Vars",
        "func": "msg.errormsg = env.get('errormsg');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "c06559e559e12b19"
            ]
        ]
    },
    {
        "id": "fa659ccd904d4a48",
        "type": "json",
        "z": "826f2798ac97948c",
        "name": "Parse Model",
        "property": "model",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 60,
        "wires": [
            [
                "857c73a93f042bd5"
            ]
        ]
    },
    {
        "id": "857c73a93f042bd5",
        "type": "change",
        "z": "826f2798ac97948c",
        "name": "Setup Model for Processing",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.model.group.points",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 60,
        "wires": [
            [
                "477ba5ba9b3becaf"
            ]
        ]
    },
    {
        "id": "477ba5ba9b3becaf",
        "type": "function",
        "z": "826f2798ac97948c",
        "name": "Remove Model ID and Length",
        "func": "msg.payload.shift();\nmsg.payload.shift();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 60,
        "wires": [
            [
                "3eb10677c0a29346"
            ]
        ]
    },
    {
        "id": "3eb10677c0a29346",
        "type": "function",
        "z": "826f2798ac97948c",
        "name": "Calculate Offsets",
        "func": "\nlet offset = 0;\nfor (let i = 0; i < msg.payload.length; i++) {\n    msg.payload[i].offset = offset;\n    offset += msg.payload[i].size * 2;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "818f774870e37e5c"
            ]
        ]
    },
    {
        "id": "818f774870e37e5c",
        "type": "split",
        "z": "826f2798ac97948c",
        "name": "Split by Register",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1420,
        "y": 60,
        "wires": [
            [
                "a9b1793dab0d783d"
            ]
        ]
    },
    {
        "id": "a9b1793dab0d783d",
        "type": "function",
        "z": "826f2798ac97948c",
        "name": "Process Parsing Info",
        "func": "\nmsg.payload.type = context.get(\"typeConversion\")[msg.payload.type];\n\nswitch (msg.payload.type) {\n    case \"binary\":\n        msg.payload.length = msg.payload.size * 16;\n        break;\n    case \"string\":\n        msg.payload.length = msg.payload.size;\n        break;\n    case \"hex\":\n        msg.payload.length = msg.payload.size * 2;\n        break;\n    default:\n        msg.payload.length = undefined;\n        break;\n}\n\nmsg.payload.offsetbit = undefined;\nmsg.payload.mask = \"\";\nmsg.payload.scale = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"typeConversion\", \n    {\n        \"int16\": \"int16\",\n        \"int32\": \"int32\",\n        \"int64\": \"bigint64\",\n        \"raw16\": \"16bit\",\n        \"uint16\": \"uint16\",\n        \"uint32\": \"uint32\",\n        \"uint64\": \"biguint64\",\n        \"acc16\": \"uint16\",\n        \"acc32\": \"uint32\",\n        \"acc64\": \"biguint64\",\n        \"bitfield16\": \"binary\",\n        \"bitfield32\": \"binary\",\n        \"bitfield64\": \"binary\",\n        \"enum16\": \"uint16\",\n        \"enum32\": \"uint32\",\n        \"float32\": \"float\",\n        \"float64\": \"double\",\n        \"string\": \"string\",\n        \"sf\": \"int16\",\n        \"pad\": \"hex\",\n        \"ipaddr\": \"hex\",\n        \"ipv6addr\": \"hex\",\n        \"eui48\": \"hex\",\n        \"sunssf\": \"int16\",\n        \"count\": \"hex\"\n    }\n);",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 60,
        "wires": [
            [
                "5c6f790fb86827ca"
            ]
        ]
    },
    {
        "id": "5c6f790fb86827ca",
        "type": "join",
        "z": "826f2798ac97948c",
        "name": "Join Together",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1860,
        "y": 60,
        "wires": [
            [
                "9405978604099018"
            ]
        ]
    },
    {
        "id": "9405978604099018",
        "type": "change",
        "z": "826f2798ac97948c",
        "name": "Setup Parsing Specs",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "specs.items",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "specs.options",
                "pt": "msg",
                "to": "{\"resultType\": \"object\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2080,
        "y": 60,
        "wires": [
            [
                "08f42ce2b8e5ca7a"
            ]
        ]
    },
    {
        "id": "08f42ce2b8e5ca7a",
        "type": "buffer-parser",
        "z": "826f2798ac97948c",
        "name": "Parse Buffer",
        "data": "buffer",
        "dataType": "msg",
        "specification": "specs",
        "specificationType": "msg",
        "items": [
            {
                "type": "int16be",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 2290,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "543c0f2ecc46a615",
        "type": "change",
        "z": "826f2798ac97948c",
        "name": "Get Model from Env",
        "rules": [
            {
                "t": "set",
                "p": "model",
                "pt": "msg",
                "to": "ssmodel",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 60,
        "wires": [
            [
                "fa659ccd904d4a48"
            ]
        ]
    },
    {
        "id": "dff7751468592e62",
        "type": "modbus-flex-getter",
        "z": "da1113f849ed321d",
        "name": "Get BMS",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "0bf62b5a82a31810",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 520,
        "y": 260,
        "wires": [
            [],
            [
                "b096170aff307553"
            ]
        ]
    },
    {
        "id": "bd445a9083665d45",
        "type": "modbus-flex-getter",
        "z": "da1113f849ed321d",
        "name": "Get Gateway (502)",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 300,
        "wires": [
            [],
            [
                "b096170aff307553"
            ]
        ]
    },
    {
        "id": "e143aaa90d388cc7",
        "type": "modbus-flex-getter",
        "z": "da1113f849ed321d",
        "name": "Get Gateway (503)",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 340,
        "wires": [
            [],
            [
                "b096170aff307553"
            ]
        ]
    },
    {
        "id": "539a85c75b93eccf",
        "type": "modbus-flex-getter",
        "z": "da1113f849ed321d",
        "name": "Get WattNode",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "ff919ca25c0fe87f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 540,
        "y": 380,
        "wires": [
            [],
            [
                "b096170aff307553"
            ]
        ]
    },
    {
        "id": "8cf8c1f724251028",
        "type": "status",
        "z": "da1113f849ed321d",
        "name": "",
        "scope": [
            "dff7751468592e62",
            "bd445a9083665d45",
            "e143aaa90d388cc7",
            "539a85c75b93eccf"
        ],
        "x": 100,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9711d632f9f6dc4a",
        "type": "switch",
        "z": "da1113f849ed321d",
        "name": "Check if Array",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "ad7d38dceaa9ca93"
            ],
            [
                "fcca06f4d0227df7"
            ]
        ]
    },
    {
        "id": "fcca06f4d0227df7",
        "type": "change",
        "z": "da1113f849ed321d",
        "name": "Convert to Array",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[msg.payload]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "ad7d38dceaa9ca93"
            ]
        ]
    },
    {
        "id": "8396935deaa5cc11",
        "type": "switch",
        "z": "da1113f849ed321d",
        "name": "",
        "property": "model",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "c1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "c2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "802",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "213",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 370,
        "y": 480,
        "wires": [
            [
                "006f6b062d1b2b6b"
            ],
            [
                "7f664ccdb28a1c56"
            ],
            [
                "2d9af2049d139528"
            ],
            [
                "9f319357f389d99a"
            ],
            [
                "1a1b51a8c38a47ae"
            ]
        ]
    },
    {
        "id": "006f6b062d1b2b6b",
        "type": "template",
        "z": "da1113f849ed321d",
        "name": "Custom Model XW (503)",
        "field": "model",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"id\": -1,\n  \"label\": \"XW Pro Port 503\",\n  \"desc\": \"A custom schema built by Chandler.\",\n  \"comments\": [\n    \"Doesn't necessary follow the schema\",\n    \"but certainly gets close\"\n  ],\n  \"group\": {\n    \"name\": \"custom_model\",\n    \"label\": \"custom_model\",\n    \"type\": \"group\",\n    \"points\": [\n      {\n        \"name\": \"DevName\",\n        \"desc\": \"Device Name\",\n        \"access\": \"rw\",\n        \"type\": \"string\",\n        \"size\": 8\n      },\n      {\n        \"name\": \"_0\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_1\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"FGA\",\n        \"desc\": \"FGA Number\",\n        \"access\": \"r\",\n        \"type\": \"string\",\n        \"size\": 10\n      },\n      {\n        \"name\": \"UID\",\n        \"desc\": \"Unique ID Number\",\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__0\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 8\n      },\n      {\n        \"name\": \"FirmwareVer\",\n        \"desc\": \"Firmware Version\",\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__1\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 8\n      },\n      {\n        \"name\": \"Addr\",\n        \"desc\": \"Modbus Slave Address (Port 503)\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"DevNumber\",\n        \"desc\": \"Device Number\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SysInstance\",\n        \"desc\": \"System Instance\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SN\",\n        \"desc\": \"Hardware Serial Number\",\n        \"access\": \"r\",\n        \"type\": \"string\",\n        \"size\": 16\n      },\n      {\n        \"name\": \"ConfigStatus\",\n        \"desc\": \"Configuration Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Refreshing\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Done\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ConfigRefreshes\",\n        \"desc\": \"Configuration Refresh Counter\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"_2\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_3\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"DevState\",\n        \"desc\": \"Device State\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Hibernate\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Power Save\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Safe Mode\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Operating\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Diagnostic Mode\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Remote Power Off\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"Data Not Available\",\n            \"value\": 255\n          }\n        ]\n      },\n      {\n        \"name\": \"DevPresent\",\n        \"desc\": \"Device Present\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Inactive (data invalid)\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Active (data valid)\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"Faults0\",\n        \"desc\": \"Fault Bitmap 0\",\n        \"access\": \"r\",\n        \"type\": \"bitfield16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"F1:AC Output Undervoltage Shutdown\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"F2:AC Output Overvoltage Shutdown\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"F17:AC BackFeed Fault (AC1 L1)\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"F18:AC BackFeed Fault (AC1 L2)\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"F19:AC BackFeed Fault (AC2 L1)\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"F20:AC Backfeed Fault (AC2 L2)\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"F21:AC Backfeed Fault (L1L2 Weld)\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"F22:AC Backfeed Fault( Line 1 Weld)\",\n            \"value\": 7\n          },\n          {\n            \"name\": \"F23:Anti-Islanding Fault (Over Freq)\",\n            \"value\": 8\n          },\n          {\n            \"name\": \"F24:Anti-Islanding Fault (Under Freq)\",\n            \"value\": 9\n          },\n          {\n            \"name\": \"F25:Anti-Islanding (Over Freq)\",\n            \"value\": 10\n          },\n          {\n            \"name\": \"F26:Anti-Islanding (Under Freq)\",\n            \"value\": 11\n          },\n          {\n            \"name\": \"F27:Anti-Islanding (Over Voltage Line 1)\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"F28:Anti-Islanding (Over Voltage Line 2)\",\n            \"value\": 13\n          },\n          {\n            \"name\": \"F29:Anti-Islanding (Over Voltage)\",\n            \"value\": 14\n          },\n          {\n            \"name\": \"F30:Anti-Islanding (Over voltage L1L2)\",\n            \"value\": 15\n          }\n        ]\n      },\n      {\n        \"name\": \"Faults1\",\n        \"desc\": \"Fault Bitmap 1\",\n        \"access\": \"r\",\n        \"type\": \"bitfield16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"F31:Anti-Islanding (Over Voltage L1 Slow)\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"F32:Anti-Islanding (Over Voltage L2 Slow)\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"F33:Anti-Islanding (Over Voltage L1L2 Slow)\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"F34:Anti-Islanding (Under Voltage L1 Slow)\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"F35:Anti-Islanding (Under Voltage L2 Slow)\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"F36:Anti-Islanding (Under Voltage L1L2 Slow)\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"F37:Anti-Islanding (Under Voltage L1 Fast)\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"F38:Anti-Islanding (Under Voltage L2 Fast)\",\n            \"value\": 7\n          },\n          {\n            \"name\": \"F39:Anti-Islanding (Under Voltage)\",\n            \"value\": 8\n          },\n          {\n            \"name\": \"F40:Anti-Islanding (Under Voltage L1L2 Fast)\",\n            \"value\": 9\n          },\n          {\n            \"name\": \"F41:APS Under Voltage\",\n            \"value\": 10\n          },\n          {\n            \"name\": \"F42:APS Over Voltage\",\n            \"value\": 11\n          },\n          {\n            \"name\": \"F44:Battery Over Temperature\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"F45:Capacitor Over Temperature\",\n            \"value\": 13\n          },\n          {\n            \"name\": \"F46:Controller Error\",\n            \"value\": 14\n          },\n          {\n            \"name\": \"F47:DC Under Voltage Immediate\",\n            \"value\": 15\n          }\n        ]\n      },\n      {\n        \"name\": \"Faults2\",\n        \"desc\": \"Fault Bitmap 2\",\n        \"access\": \"r\",\n        \"type\": \"bitfield16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"F48:DC Under-Voltage Shutdown\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"F49:DC Over-Voltage Shutdown\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"F51:EEPROM Error\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"F52:EEPROM Error (Cal Fail)\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"F53:EEPROM Error (Config Fail)\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"F54:EEPROM Error (Default Fail)\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"F55:EEPROM Error (Log Fail)\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"F56:EEPROM Error (Strings Fail)\",\n            \"value\": 7\n          },\n          {\n            \"name\": \"F57:FET1 Over-Temperature Shutdown\",\n            \"value\": 8\n          },\n          {\n            \"name\": \"F58:FET2 Over-Temperature Shutdown\",\n            \"value\": 9\n          },\n          {\n            \"name\": \"F59:Configuration Copy Error\",\n            \"value\": 10\n          },\n          {\n            \"name\": \"F60:Invalid Fault\",\n            \"value\": 11\n          },\n          {\n            \"name\": \"F61:Invalid Warning\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"F62:Invalid Interrupt\",\n            \"value\": 13\n          },\n          {\n            \"name\": \"F63:AC Overload (Primary)\",\n            \"value\": 14\n          },\n          {\n            \"name\": \"F64:AC Overload (Secondary 1s)\",\n            \"value\": 15\n          }\n        ]\n      },\n      {\n        \"name\": \"Faults3\",\n        \"desc\": \"Fault Bitmap 3\",\n        \"access\": \"r\",\n        \"type\": \"bitfield16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"F65:AC Overload (2s)\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"F66:System Configuration Error\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"F67:Watchdog Reset\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"F68:Transformer Over-Temperature\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"F69:Synchronization Signal Fault\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"F70:Three Phase Configuration Fault\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"F90:External BMS Disconnected\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"F71:Battery Discharge Over Current\",\n            \"value\": 7\n          },\n          {\n            \"name\": \"F72:External Contactor Malfunction\",\n            \"value\": 8\n          },\n          {\n            \"name\": \"F73:Battery Charge Over Current\",\n            \"value\": 9\n          },\n          {\n            \"name\": \"F74:Battery Under Voltage\",\n            \"value\": 10\n          },\n          {\n            \"name\": \"F75:Battery Over Voltage\",\n            \"value\": 11\n          },\n          {\n            \"name\": \"F91:SOC Level Lost\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"F92:Gateway Comms Lost\",\n            \"value\": 13\n          },\n          {\n            \"name\": \"F93:SunSpec Controller Comms Lost\",\n            \"value\": 14\n          }\n        ]\n      },\n      {\n        \"name\": \"Warnings0\",\n        \"desc\": \"Warning Bitmap 0\",\n        \"access\": \"r\",\n        \"type\": \"bitfield16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"W44:Battery Over Temperature\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"W45:Capacitor Over Temperature\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"W48:DC Under Voltage\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"W49:DC Over Voltage\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"W57:FET1 Over Temperature\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"W58:FET2 Over Temperature\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"W63:AC Overload\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"W64:AC Overload\",\n            \"value\": 7\n          },\n          {\n            \"name\": \"W68:Transformer Over Temperature\",\n            \"value\": 8\n          },\n          {\n            \"name\": \"W70:Check Phase Configuration\",\n            \"value\": 9\n          },\n          {\n            \"name\": \"W94:Remote Power Off\",\n            \"value\": 10\n          },\n          {\n            \"name\": \"W95:Equalize Abort\",\n            \"value\": 11\n          },\n          {\n            \"name\": \"W96:Cannot Equalize\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"W97:Battery Temperature Sensor Failure\",\n            \"value\": 13\n          },\n          {\n            \"name\": \"W500:Lost Network Connection\",\n            \"value\": 14\n          },\n          {\n            \"name\": \"W501:Non Volatile Memory Warning\",\n            \"value\": 15\n          }\n        ]\n      },\n      {\n        \"name\": \"InvEnabled\",\n        \"desc\": \"Inverter Enabled Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaEnabled\",\n        \"desc\": \"Charger Enabled Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"SellEnabled\",\n        \"desc\": \"Sell Enabled Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"SellForced\",\n        \"desc\": \"Forced Sell\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Unavailable\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"FaultsActive\",\n        \"desc\": \"Active Faults\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"No Faults\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Active Faults\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"WarningsActive\",\n        \"desc\": \"Active Warnings\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"No Warnings\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Active Warnings\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaMode\",\n        \"desc\": \"Charge Mode Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Stand alone\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Primary\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Secondary\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"ConfigErrors\",\n        \"desc\": \"Configuration Errors\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"VDC\",\n        \"desc\": \"DC Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ADC\",\n        \"desc\": \"DC Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"WDC\",\n        \"desc\": \"DC Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattTemp\",\n        \"desc\": \"Battery Temperature\",\n        \"units\": \"degC\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": -273,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_4\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"InvADC\",\n        \"desc\": \"Invert DC Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"InvWDC\",\n        \"desc\": \"Invert DC Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaADC\",\n        \"desc\": \"Charge DC Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaWDC\",\n        \"desc\": \"Charge DC Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaWDCPct\",\n        \"desc\": \"Charge DC Power Percentage\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1Freq\",\n        \"desc\": \"AC1 Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1V\",\n        \"desc\": \"AC1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1A\",\n        \"desc\": \"AC1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1W\",\n        \"desc\": \"AC1 Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1VAIn\",\n        \"desc\": \"AC1 Input Power (VA)\",\n        \"units\": \"VA\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1AIn\",\n        \"desc\": \"AC1 Input Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1WIn\",\n        \"desc\": \"AC1 Input Power (W)\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1VL1\",\n        \"desc\": \"AC1 L1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1AL2\",\n        \"desc\": \"AC1 L2 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1VL2\",\n        \"desc\": \"AC1 L2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1AL1\",\n        \"desc\": \"AC1 L1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1VQual\",\n        \"desc\": \"AC1 Voltage Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"AC1FreqQual\",\n        \"desc\": \"AC1 Frequency Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"AC1QualTime\",\n        \"desc\": \"AC1 Qualified Duration\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"InvStatus\",\n        \"desc\": \"Inverter Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Invert\",\n            \"value\": 1024\n          },\n          {\n            \"name\": \"AC Pass Through\",\n            \"value\": 1025\n          },\n          {\n            \"name\": \"APS Only\",\n            \"value\": 1026\n          },\n          {\n            \"name\": \"Load Sense\",\n            \"value\": 1027\n          },\n          {\n            \"name\": \"Inverter Disabled\",\n            \"value\": 1028\n          },\n          {\n            \"name\": \"Load Sense Ready\",\n            \"value\": 1029\n          },\n          {\n            \"name\": \"Engaging Inverter\",\n            \"value\": 1030\n          },\n          {\n            \"name\": \"Invert Fault\",\n            \"value\": 1031\n          },\n          {\n            \"name\": \"Inverter Standby\",\n            \"value\": 1032\n          },\n          {\n            \"name\": \"Grid-Tied\",\n            \"value\": 1033\n          },\n          {\n            \"name\": \"Grid Support\",\n            \"value\": 1034\n          },\n          {\n            \"name\": \"Gen Support\",\n            \"value\": 1035\n          },\n          {\n            \"name\": \"Sell-to-Grid\",\n            \"value\": 1036\n          },\n          {\n            \"name\": \"Load Shaving\",\n            \"value\": 1037\n          },\n          {\n            \"name\": \"Grid Frequency Stabilization\",\n            \"value\": 1038\n          },\n          {\n            \"name\": \"AC Coupling\",\n            \"value\": 1039\n          },\n          {\n            \"name\": \"Reverse Ibatt\",\n            \"value\": 1040\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaStatus\",\n        \"desc\": \"Charger Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not Charging\",\n            \"value\": 768\n          },\n          {\n            \"name\": \"Bulk\",\n            \"value\": 769\n          },\n          {\n            \"name\": \"Absorption\",\n            \"value\": 770\n          },\n          {\n            \"name\": \"Overcharge\",\n            \"value\": 771\n          },\n          {\n            \"name\": \"Equalize\",\n            \"value\": 772\n          },\n          {\n            \"name\": \"Float\",\n            \"value\": 773\n          },\n          {\n            \"name\": \"No Float\",\n            \"value\": 774\n          },\n          {\n            \"name\": \"Constant VI\",\n            \"value\": 775\n          },\n          {\n            \"name\": \"Charger Disabled\",\n            \"value\": 776\n          },\n          {\n            \"name\": \"Qualifying AC\",\n            \"value\": 777\n          },\n          {\n            \"name\": \"Qualifying APS\",\n            \"value\": 778\n          },\n          {\n            \"name\": \"Engaging Charger\",\n            \"value\": 779\n          },\n          {\n            \"name\": \"Charge Fault\",\n            \"value\": 780\n          },\n          {\n            \"name\": \"Charger Suspend\",\n            \"value\": 781\n          },\n          {\n            \"name\": \"AC Good\",\n            \"value\": 782\n          },\n          {\n            \"name\": \"APS Good\",\n            \"value\": 783\n          },\n          {\n            \"name\": \"AC Fault\",\n            \"value\": 784\n          },\n          {\n            \"name\": \"Charge\",\n            \"value\": 785\n          },\n          {\n            \"name\": \"Absorption Exit Pending\",\n            \"value\": 786\n          },\n          {\n            \"name\": \"Ground Fault\",\n            \"value\": 787\n          },\n          {\n            \"name\": \"AC Good Pending\",\n            \"value\": 788\n          }\n        ]\n      },\n      {\n        \"name\": \"_5\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_6\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1VDuplicate\",\n        \"desc\": \"AC1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1ADuplicate\",\n        \"desc\": \"AC1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1FreqDuplicate\",\n        \"desc\": \"AC1 Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_7\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1WOut\",\n        \"desc\": \"AC1 Output Power (W)\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__2\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__3\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1VAOut\",\n        \"desc\": \"AC1 Output Power (VA)\",\n        \"units\": \"VA\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadV\",\n        \"desc\": \"AC Load Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadVL1\",\n        \"desc\": \"AC Load L1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadVL2\",\n        \"desc\": \"AC Load L2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadAL1\",\n        \"desc\": \"AC Load L1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadAL2\",\n        \"desc\": \"AC Load L2 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadA\",\n        \"desc\": \"AC Load Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadFreq\",\n        \"desc\": \"AC Load Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_8\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"LoadW\",\n        \"desc\": \"AC Load Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__4\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__5\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadVA\",\n        \"desc\": \"AC Load Power (VA)\",\n        \"units\": \"VA\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2V\",\n        \"desc\": \"AC2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2A\",\n        \"desc\": \"AC2 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2Freq\",\n        \"desc\": \"AC2 Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC2VQual\",\n        \"desc\": \"AC2 Voltage Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"AC2FreqQual\",\n        \"desc\": \"AC2 Frequency Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"_9\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC2QualTime\",\n        \"desc\": \"AC2 Qualified Duration\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2W\",\n        \"desc\": \"AC2 Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__6\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__7\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2VL1\",\n        \"desc\": \"AC2 L1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2AL1\",\n        \"desc\": \"AC2 L1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2VL2\",\n        \"desc\": \"AC2 L2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2AL2\",\n        \"desc\": \"AC2 L2 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"int32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2VA\",\n        \"desc\": \"AC2 Power - Apparent\",\n        \"units\": \"VA\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AuxStatus\",\n        \"desc\": \"Auxiliary Output Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"AutoOn\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Auto Off\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Manual On\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Manual Off\",\n            \"value\": 4\n          }\n        ]\n      },\n      {\n        \"name\": \"AuxOnReason\",\n        \"desc\": \"Auxiliary Output On Reason\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not on\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Manual on\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Battery Voltage Low\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Battery Voltage High\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Array Voltage High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Battery Temp Low\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"Battery Temp High\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"Heat Sink Temp High\",\n            \"value\": 7\n          },\n          {\n            \"name\": \"Fault\",\n            \"value\": 8\n          }\n        ]\n      },\n      {\n        \"name\": \"AuxOffReason\",\n        \"desc\": \"Auxiliary Output Off Reason\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not off\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Manual Off\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"No Active Trigger\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Trigger Override\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Fault\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Bulk Exit\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"Absorption Exit\",\n            \"value\": 6\n          }\n        ]\n      },\n      {\n        \"name\": \"SellLevel\",\n        \"desc\": \"Grid Tie Sell Level\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SwitchState\",\n        \"desc\": \"Switch Operating State\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Inactive\",\n            \"value\": 800\n          },\n          {\n            \"name\": \"Input1 Active\",\n            \"value\": 801\n          },\n          {\n            \"name\": \"Input2 Active\",\n            \"value\": 802\n          },\n          {\n            \"name\": \"Input1 Delay\",\n            \"value\": 803\n          },\n          {\n            \"name\": \"Input2 Delay\",\n            \"value\": 804\n          }\n        ]\n      },\n      {\n        \"name\": \"SwitchMode\",\n        \"desc\": \"Switch Mode\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"unknown\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Grid Priority\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Generator Priority\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"Warnings1\",\n        \"desc\": \"Warning Bitmap 1\",\n        \"access\": \"r\",\n        \"type\": \"bitfield16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"W91:SOC Level Lost\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"W92:Gateway Comms Lost\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"W93:SunSpec Controller Comms Lost\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"__8\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"__9\",\n        \"desc\": \"unreadable\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__10\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 10\n      },\n      {\n        \"name\": \"DischaHour\",\n        \"desc\": \"Energy From Battery This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDurHour\",\n        \"desc\": \"Battery Discharge Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDay\",\n        \"desc\": \"Energy From Battery Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDurDay\",\n        \"desc\": \"Battery Discharge Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaWeek\",\n        \"desc\": \"Energy From Battery This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDurWeek\",\n        \"desc\": \"Battery Discharge Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaMonth\",\n        \"desc\": \"Energy From Battery This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDurMonth\",\n        \"desc\": \"Battery Discharge Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaYear\",\n        \"desc\": \"Energy From Battery This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDurYear\",\n        \"desc\": \"Battery Discharge Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaLife\",\n        \"desc\": \"Energy From Battery Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"DischaDurLife\",\n        \"desc\": \"Battery Discharge Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaHour\",\n        \"desc\": \"Energy To Battery This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDurHour\",\n        \"desc\": \"Battery Charge Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDay\",\n        \"desc\": \"Energy To Battery Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDurDay\",\n        \"desc\": \"Battery Charge Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaWeek\",\n        \"desc\": \"Energy To Battery This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDurWeek\",\n        \"desc\": \"Battery Charge Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaMonth\",\n        \"desc\": \"Energy To Battery This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDurMonth\",\n        \"desc\": \"Battery Charge Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaYear\",\n        \"desc\": \"Energy To Battery This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDurYear\",\n        \"desc\": \"Battery Charge Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaLife\",\n        \"desc\": \"Energy To Battery Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaDurLife\",\n        \"desc\": \"Battery Charge Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInHour\",\n        \"desc\": \"Grid Input Energy This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDurHour\",\n        \"desc\": \"Grid Input Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDay\",\n        \"desc\": \"Grid Input Energy Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDurDay\",\n        \"desc\": \"Grid Input Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInWeek\",\n        \"desc\": \"Grid Input Energy This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDurWeek\",\n        \"desc\": \"Grid Input Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInMonth\",\n        \"desc\": \"Grid Input Energy This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDurMonth\",\n        \"desc\": \"Grid Input Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInYear\",\n        \"desc\": \"Grid Input Energy This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDurYear\",\n        \"desc\": \"Grid Input Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInLife\",\n        \"desc\": \"Grid Input Energy Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridInDurLife\",\n        \"desc\": \"Grid Input Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutHour\",\n        \"desc\": \"Grid Output Energy This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDurHour\",\n        \"desc\": \"Grid Output Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDay\",\n        \"desc\": \"Grid Output Energy Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDurDay\",\n        \"desc\": \"Grid Output Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutWeek\",\n        \"desc\": \"Grid Output Energy This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDurWeek\",\n        \"desc\": \"Grid Output Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutMonth\",\n        \"desc\": \"Grid Output Energy This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDurMonth\",\n        \"desc\": \"Grid Output Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutYear\",\n        \"desc\": \"Grid Output Energy This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDurYear\",\n        \"desc\": \"Grid Output Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutLife\",\n        \"desc\": \"Grid Output Energy Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GridOutDurLife\",\n        \"desc\": \"Grid Output Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadHour\",\n        \"desc\": \"Load Output Energy This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDurHour\",\n        \"desc\": \"Load Output Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDay\",\n        \"desc\": \"Load Output Energy Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDurDay\",\n        \"desc\": \"Load Output Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadWeek\",\n        \"desc\": \"Load Output Energy This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDurWeek\",\n        \"desc\": \"Load Output Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadMonth\",\n        \"desc\": \"Load Output Energy This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDurMonth\",\n        \"desc\": \"Load Output Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadYear\",\n        \"desc\": \"Load Output Energy This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDurYear\",\n        \"desc\": \"Load Output Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadLife\",\n        \"desc\": \"Load Output Energy Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadDurLife\",\n        \"desc\": \"Load Output Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenHour\",\n        \"desc\": \"Generator Input Energy This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDurHour\",\n        \"desc\": \"Generator Input Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDay\",\n        \"desc\": \"Generator Input Energy Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDurDay\",\n        \"desc\": \"Generator Input Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenWeek\",\n        \"desc\": \"Generator Input Energy This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDurWeek\",\n        \"desc\": \"Generator Input Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenMonth\",\n        \"desc\": \"Generator Input Energy This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDurMonth\",\n        \"desc\": \"Generator Input Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenYear\",\n        \"desc\": \"Generator Input Energy This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDurYear\",\n        \"desc\": \"Generator Input Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenLife\",\n        \"desc\": \"Generator Input Energy Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenDurLife\",\n        \"desc\": \"Generator Input Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"IdEnable\",\n        \"desc\": \"Identify Enable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"InvEnable\",\n        \"desc\": \"Inverter Enable/Disable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"SellEnable\",\n        \"desc\": \"Grid Support Sell Enable/Disable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"SellForce\",\n        \"desc\": \"Force Sell\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaEnable\",\n        \"desc\": \"Charger Enable/Disable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaForceState\",\n        \"desc\": \"Force Charger State\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Bulk\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Float\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"No Float\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"name\": \"Mode\",\n        \"desc\": \"Operating Mode\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Standby\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Operating\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"name\": \"Reset\",\n        \"desc\": \"Reset\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Reboot\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Reset to Factory\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"Clear\",\n        \"desc\": \"Clear\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Fault Log\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Active Faults\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Warning Log\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Active Warnings\",\n            \"value\": 8\n          },\n          {\n            \"name\": \"State Event Log\",\n            \"value\": 16\n          },\n          {\n            \"name\": \"Communication Statistics\",\n            \"value\": 32\n          },\n          {\n            \"name\": \"Statistics\",\n            \"value\": 64\n          },\n          {\n            \"name\": \"User Statistics\",\n            \"value\": 128\n          },\n          {\n            \"name\": \"All\",\n            \"value\": 255\n          }\n        ]\n      },\n      {\n        \"name\": \"SearchEnable\",\n        \"desc\": \"Search Mode\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"InvConfig\",\n        \"desc\": \"Inverter Mode\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Invalid\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Single Phase Stand Alone\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Single Phase Master\",\n            \"value\": 11\n          },\n          {\n            \"name\": \"Single Phase Slave\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"Split Phase Stand Alone\",\n            \"value\": 20\n          },\n          {\n            \"name\": \"Split Phase Master\",\n            \"value\": 21\n          },\n          {\n            \"name\": \"Split Phase Slave\",\n            \"value\": 22\n          },\n          {\n            \"name\": \"Two Phase - Phase1-Master\",\n            \"value\": 23\n          },\n          {\n            \"name\": \"Two Phase - Phase1-Slave\",\n            \"value\": 24\n          },\n          {\n            \"name\": \"Two Phase - Phase2-Master\",\n            \"value\": 25\n          },\n          {\n            \"name\": \"Two Phase - Phase2-Slave\",\n            \"value\": 26\n          },\n          {\n            \"name\": \"Three Phase Stand Alone\",\n            \"value\": 30\n          },\n          {\n            \"name\": \"Three Phase Master\",\n            \"value\": 31\n          },\n          {\n            \"name\": \"Three Phase Slave\",\n            \"value\": 32\n          },\n          {\n            \"name\": \"Three Phase - Phase1-Master\",\n            \"value\": 33\n          },\n          {\n            \"name\": \"Three Phase - Phase1-Slave\",\n            \"value\": 34\n          },\n          {\n            \"name\": \"Three Phase - Phase2-Master\",\n            \"value\": 35\n          },\n          {\n            \"name\": \"Three Phase - Phase2-Slave\",\n            \"value\": 36\n          },\n          {\n            \"name\": \"Three Phase - Phase3-Master\",\n            \"value\": 37\n          },\n          {\n            \"name\": \"Three Phase - Phase3-Slave\",\n            \"value\": 38\n          }\n        ]\n      },\n      {\n        \"name\": \"RemotePowerEnable\",\n        \"desc\": \"Remote Power Off\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"PowerSaveEnable\",\n        \"desc\": \"Power Save\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"SellDelayEnable\",\n        \"desc\": \"Sell Delay 40 Sec\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaCycle\",\n        \"desc\": \"Charge Cycle\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"3 Stage\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"2 Stage\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"External BMS\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaPct\",\n        \"desc\": \"Maximum Charge Rate\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"EqualCmd\",\n        \"desc\": \"Equalize Now\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"BattTempDefault\",\n        \"desc\": \"Default Battery Temperature\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Cold\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Warm\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Hot\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"GFSEnable\",\n        \"desc\": \"GFS Enable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"BattType\",\n        \"desc\": \"Battery Type\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Flooded\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Gel\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"AGM\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Custom\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Li-Ion\",\n            \"value\": 6\n          }\n        ]\n      },\n      {\n        \"name\": \"BattVoltNominal\",\n        \"desc\": \"Nominal Battery Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattCapacity\",\n        \"desc\": \"Battery Bank Capacity\",\n        \"units\": \"Ah\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BattCoefficient\",\n        \"desc\": \"Battery Temperature Coefficient\",\n        \"units\": \"mV/degC\",\n        \"scale\": -1.0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"GridSupportV\",\n        \"desc\": \"Grid Support Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"RechaV\",\n        \"desc\": \"Recharge Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattLow\",\n        \"desc\": \"Low Battery Cut Out\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattLowDelay\",\n        \"desc\": \"Low Battery Cut Out Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_10\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BattLowTrig\",\n        \"desc\": \"Low Battery Trigger Set\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattLowTrigDelay\",\n        \"desc\": \"Low Battery Trigger Set Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_11\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BattLowTrigClear\",\n        \"desc\": \"Low Battery Trigger Clear\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattLowTrigClearDelay\",\n        \"desc\": \"Low Battery Trigger Clear Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"ACPriority\",\n        \"desc\": \"AC Priority\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Force AC Disqualify\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Grid Priority (AC1)\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Generator Priority (AC2)\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"AC1Breaker\",\n        \"desc\": \"AC1 Breaker Size\",\n        \"units\": \"A\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC2Breaker\",\n        \"desc\": \"AC2 Breaker Size\",\n        \"units\": \"A\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BattHigh\",\n        \"desc\": \"High Battery Cut Out\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattHighTrig\",\n        \"desc\": \"High Battery Trigger Set\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattHighTrigDelay\",\n        \"desc\": \"High Battery Trigger Set Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_12\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BattHighTrigClear\",\n        \"desc\": \"High Battery Trigger Clear\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BattHighTrigClearDelay\",\n        \"desc\": \"High Battery Trigger Clear Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SearchW\",\n        \"desc\": \"Maximum Search Watts\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SearchDelay\",\n        \"desc\": \"Search Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_13\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"EqualV\",\n        \"desc\": \"Equalize Voltage Set Point\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"EqualSupported\",\n        \"desc\": \"Equalize Support\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"No Equalization\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Equalization Allowed\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"_14\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BulkV\",\n        \"desc\": \"Bulk/Boost Voltage Set Point\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AbsorbV\",\n        \"desc\": \"Absorption Voltage Set Point\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AbsorbTime\",\n        \"desc\": \"Absorption Time\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_15\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"FloatV\",\n        \"desc\": \"Float Voltage Set Point\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1LowV\",\n        \"desc\": \"AC1 Low Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2LowV\",\n        \"desc\": \"AC2 Low Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC1HighV\",\n        \"desc\": \"AC1 High Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2HighV\",\n        \"desc\": \"AC2 High Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaStart\",\n        \"desc\": \"Charge Block Start\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"ChaStop\",\n        \"desc\": \"Charge Block Stop\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"LoadShaveStart\",\n        \"desc\": \"Load Shave Stop\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"LoadShaveStop\",\n        \"desc\": \"Load Shave Start\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1LowFreq\",\n        \"desc\": \"AC1 Low Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC2LowFreq\",\n        \"desc\": \"AC2 Low Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1HighFreq\",\n        \"desc\": \"AC1 High Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC2HighFreq\",\n        \"desc\": \"AC2 High Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"LoadShaveEnable\",\n        \"desc\": \"Load Shave\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"GridSupportEnable\",\n        \"desc\": \"Grid Support\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"SellA\",\n        \"desc\": \"Maximum Sell Amps\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"LoadShaveA\",\n        \"desc\": \"Load Shave Amps\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"GenSupportEnable\",\n        \"desc\": \"Generator Support Enable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"_16\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"GenSupportA\",\n        \"desc\": \"Generator Support Amps\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AuxMode\",\n        \"desc\": \"Manual Aux\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Manual Off\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Manual On\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Automatic\",\n            \"value\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"_17\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AuxActiveLevel\",\n        \"desc\": \"Auxiliary Output Active Level\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Active Low\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Active High\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"_18\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"TempLowTrig\",\n        \"desc\": \"Low Temperature Trigger Set\",\n        \"units\": \"degC\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": -273,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"TempLowTrigDelay\",\n        \"desc\": \"Low Temperature Trigger Set Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_19\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"TempLowTrigClear\",\n        \"desc\": \"Low Temperature Trigger Clear\",\n        \"units\": \"degC\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": -273,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"TempLowTrigClearDelay\",\n        \"desc\": \"Low Temperature Trigger Clear Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_20\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"TempHighTrig\",\n        \"desc\": \"High Temperature Trigger Set\",\n        \"units\": \"degC\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": -273,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"TempHighTrigDelay\",\n        \"desc\": \"High Temperature Trigger Set Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_21\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"TempHighTrigClear\",\n        \"desc\": \"High Temperature Trigger Clear\",\n        \"units\": \"degC\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": -273,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"TempHighTrigClearDelay\",\n        \"desc\": \"High Temperature Trigger Clear Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"ConfigRefreshCmd\",\n        \"desc\": \"Refresh Configuration Data\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Refresh\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ACOutAssoc\",\n        \"desc\": \"AC Output Association (Loads)\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"AC Load 1\",\n            \"value\": 51\n          },\n          {\n            \"name\": \"AC Load 2\",\n            \"value\": 52\n          },\n          {\n            \"name\": \"AC Load 3\",\n            \"value\": 53\n          },\n          {\n            \"name\": \"AC Load 4\",\n            \"value\": 54\n          },\n          {\n            \"name\": \"AC Load 5\",\n            \"value\": 55\n          },\n          {\n            \"name\": \"AC Load 6\",\n            \"value\": 56\n          },\n          {\n            \"name\": \"AC Load 7\",\n            \"value\": 57\n          },\n          {\n            \"name\": \"AC Load 8\",\n            \"value\": 58\n          },\n          {\n            \"name\": \"AC Load 9\",\n            \"value\": 59\n          },\n          {\n            \"name\": \"AC Load 10\",\n            \"value\": 60\n          }\n        ]\n      },\n      {\n        \"name\": \"AC2Assoc\",\n        \"desc\": \"AC2 Association (Generator)\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"None\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Generator 1\",\n            \"value\": 19\n          },\n          {\n            \"name\": \"Generator 2\",\n            \"value\": 20\n          },\n          {\n            \"name\": \"Generator 3\",\n            \"value\": 21\n          },\n          {\n            \"name\": \"Generator 4\",\n            \"value\": 22\n          },\n          {\n            \"name\": \"Generator 5\",\n            \"value\": 23\n          },\n          {\n            \"name\": \"Generator 6\",\n            \"value\": 24\n          },\n          {\n            \"name\": \"Generator 7\",\n            \"value\": 25\n          },\n          {\n            \"name\": \"Generator 8\",\n            \"value\": 26\n          },\n          {\n            \"name\": \"Generator 9\",\n            \"value\": 27\n          },\n          {\n            \"name\": \"Generator 10\",\n            \"value\": 28\n          },\n          {\n            \"name\": \"Grid 1\",\n            \"value\": 67\n          },\n          {\n            \"name\": \"Grid 2\",\n            \"value\": 68\n          },\n          {\n            \"name\": \"Grid 3\",\n            \"value\": 69\n          },\n          {\n            \"name\": \"Grid 4\",\n            \"value\": 70\n          },\n          {\n            \"name\": \"Grid 5\",\n            \"value\": 71\n          },\n          {\n            \"name\": \"Grid 6\",\n            \"value\": 72\n          },\n          {\n            \"name\": \"Grid 7\",\n            \"value\": 73\n          },\n          {\n            \"name\": \"Grid 8\",\n            \"value\": 74\n          },\n          {\n            \"name\": \"Grid 9\",\n            \"value\": 75\n          },\n          {\n            \"name\": \"Grid 10\",\n            \"value\": 76\n          }\n        ]\n      },\n      {\n        \"name\": \"AC1Assoc\",\n        \"desc\": \"AC1 Association (Grid)\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"None\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Generator 1\",\n            \"value\": 19\n          },\n          {\n            \"name\": \"Generator 2\",\n            \"value\": 20\n          },\n          {\n            \"name\": \"Generator 3\",\n            \"value\": 21\n          },\n          {\n            \"name\": \"Generator 4\",\n            \"value\": 22\n          },\n          {\n            \"name\": \"Generator 5\",\n            \"value\": 23\n          },\n          {\n            \"name\": \"Generator 6\",\n            \"value\": 24\n          },\n          {\n            \"name\": \"Generator 7\",\n            \"value\": 25\n          },\n          {\n            \"name\": \"Generator 8\",\n            \"value\": 26\n          },\n          {\n            \"name\": \"Generator 9\",\n            \"value\": 27\n          },\n          {\n            \"name\": \"Generator 10\",\n            \"value\": 28\n          },\n          {\n            \"name\": \"Grid 1\",\n            \"value\": 67\n          },\n          {\n            \"name\": \"Grid 2\",\n            \"value\": 68\n          },\n          {\n            \"name\": \"Grid 3\",\n            \"value\": 69\n          },\n          {\n            \"name\": \"Grid 4\",\n            \"value\": 70\n          },\n          {\n            \"name\": \"Grid 5\",\n            \"value\": 71\n          },\n          {\n            \"name\": \"Grid 6\",\n            \"value\": 72\n          },\n          {\n            \"name\": \"Grid 7\",\n            \"value\": 73\n          },\n          {\n            \"name\": \"Grid 8\",\n            \"value\": 74\n          },\n          {\n            \"name\": \"Grid 9\",\n            \"value\": 75\n          },\n          {\n            \"name\": \"Grid 10\",\n            \"value\": 76\n          }\n        ]\n      },\n      {\n        \"name\": \"BattAssoc\",\n        \"desc\": \"Battery Association\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"House Battery Bank 1\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"House Battery Bank 2\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"House Battery Bank 3\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"House Battery Bank 4\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"House Battery Bank 5\",\n            \"value\": 7\n          }\n        ]\n      },\n      {\n        \"name\": \"DischaA\",\n        \"desc\": \"Maximum Discharge Current\",\n        \"units\": \"A\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"DischaInterval\",\n        \"desc\": \"Maximum Discharge Time Interval\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"GVSEnable\",\n        \"desc\": \"GVS Enable/Disable\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"CapacitivePct\",\n        \"desc\": \"Maximum Reactive Capacitive Power\",\n        \"units\": \"%\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"InductivePct\",\n        \"desc\": \"Maximum Reactive Inductive Power\",\n        \"units\": \"%\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"GridVMaxReact\",\n        \"desc\": \"Maximum Reactive Power Grid Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"GridVMinReact\",\n        \"desc\": \"Minimum Reactive Power Grid Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"InductiveV\",\n        \"desc\": \"Inductive Voltage Set Point\",\n        \"units\": \"V\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"CapacitiveV\",\n        \"desc\": \"Capacitive Voltage Set Point\",\n        \"units\": \"V\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"ExcitationV\",\n        \"desc\": \"Voltage Threshold to start/stop excitation\",\n        \"units\": \"V\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"ExcitationDelay\",\n        \"desc\": \"Excitation Control Delay Time\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_22\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APIStart\",\n        \"desc\": \"API Frequency Start Level\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APIStop\",\n        \"desc\": \"API Frequency Stop Level\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APIRecover\",\n        \"desc\": \"API Frequency Recover Level\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APIGradient\",\n        \"desc\": \"API Gradient with Time\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APRStart\",\n        \"desc\": \"APR Frequency Start Level\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APRStop\",\n        \"desc\": \"APR Frequency Stop Level\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APRRecover\",\n        \"desc\": \"APR Frequency Recover Level\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APRGraidentFreq\",\n        \"desc\": \"APR Gradient with Frequency\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"APRGraidentTime\",\n        \"desc\": \"APR Gradient with Time\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_23\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCStop\",\n        \"desc\": \"State of Charge Level to Stop\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCStopDelay\",\n        \"desc\": \"State of Charge Stop Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCStart\",\n        \"desc\": \"State of Charge Level to Start\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCStartDelay\",\n        \"desc\": \"State of Charge Start Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"GenSupportPlusEnable\",\n        \"desc\": \"Generator Support Plus\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"CouplingEnable\",\n        \"desc\": \"AC Coupling\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"EqualEnable\",\n        \"desc\": \"Battery Energy Balance\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"LoadShaveDelayEnable\",\n        \"desc\": \"Peak Load Shaving Delay\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"BattLowHysteresis\",\n        \"desc\": \"Low Battery Cut Out Hysteresis\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"_24\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC1SwitchDelay\",\n        \"desc\": \"AC1 Transfer Switch Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AC2SwitchDelay\",\n        \"desc\": \"AC2 Transfer Switch Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SellStart\",\n        \"desc\": \"Sell Block Start\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SellStop\",\n        \"desc\": \"Sell Block End\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AuxStart\",\n        \"desc\": \"Auxiliary Output Trigger Block Start\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AuxEnd\",\n        \"desc\": \"Auxiliary Output Trigger Block End\",\n        \"units\": \"min\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_25\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"HeatSinkHighTrig\",\n        \"desc\": \"Heat Sink High Temperature Trigger Set\",\n        \"units\": \"degC\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": -273,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"HeatSinkHighTrigDelay\",\n        \"desc\": \"Heat Sink High Temperature Trigger Set Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SellPct\",\n        \"desc\": \"Maximum Sell Scale Percentage\",\n        \"units\": \"%\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"HeatSinkHighTrigClear\",\n        \"desc\": \"Heat Sink High Temperature Trigger Clear\",\n        \"units\": \"degC\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": -273,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"HeatSinkHighTrigClearDelay\",\n        \"desc\": \"Heat Sink High Temperature Trigger Clear Delay\",\n        \"units\": \"s\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"_26\",\n        \"desc\": \"reserved\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"AuxSource\",\n        \"desc\": \"Auxiliary Output Trigger Source\",\n        \"access\": \"rw\",\n        \"type\": \"enum32\",\n        \"size\": 2,\n        \"symbols\": [\n          {\n            \"name\": \"Low Battery Voltage\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"High Battery Voltage\",\n            \"value\": 12\n          },\n          {\n            \"name\": \"Low Battery Temperature\",\n            \"value\": 48\n          },\n          {\n            \"name\": \"High Battery Temperature\",\n            \"value\": 192\n          },\n          {\n            \"name\": \"Fault\",\n            \"value\": 768\n          },\n          {\n            \"name\": \"Bulk Exit\",\n            \"value\": 1024\n          },\n          {\n            \"name\": \"Absorption Exit\",\n            \"value\": 2048\n          },\n          {\n            \"name\": \"Heat Sink Over Temperature\",\n            \"value\": 12288\n          },\n          {\n            \"name\": \"Battery Low State of Charge\",\n            \"value\": 49152\n          },\n          {\n            \"name\": \"Time of Day\",\n            \"value\": 196608\n          }\n        ]\n      },\n      {\n        \"name\": \"SellRemoteEnable\",\n        \"desc\": \"Remote Sell\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"ContactorExtEnable\",\n        \"desc\": \"External Transfer Contactor\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"TOVDEnable\",\n        \"desc\": \"AC Transient Over Voltage Disconnect\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"LoadSwitchExtEnable\",\n        \"desc\": \"External Load Switch\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"BulkA\",\n        \"desc\": \"Maximum Bulk Charge Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AbsorbA\",\n        \"desc\": \"Maximum Absorption Charge Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"FloatA\",\n        \"desc\": \"Maximum Float Charge Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__11\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 16\n      },\n      {\n        \"name\": \"__12\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 16\n      },\n      {\n        \"name\": \"__13\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 16\n      },\n      {\n        \"name\": \"Gen1V\",\n        \"desc\": \"Generator (1) AC Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1A\",\n        \"desc\": \"Generator (1) AC Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1Freq\",\n        \"desc\": \"Generator (1) AC Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1VQual\",\n        \"desc\": \"Generator (1) AC Voltage Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum32\",\n        \"size\": 2,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"Gen1FreqQual\",\n        \"desc\": \"Generator (1) AC Frequency Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum32\",\n        \"size\": 2,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"Gen1QualTime\",\n        \"desc\": \"Generator (1) AC Qualified Duration\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1W\",\n        \"desc\": \"Generator (1) AC Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1VL1\",\n        \"desc\": \"Generator (1) AC L1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1AL1\",\n        \"desc\": \"Generator (1) AC L1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1VL2\",\n        \"desc\": \"Generator (1) AC L2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1AL2\",\n        \"desc\": \"Generator (1) AC L2 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1VA\",\n        \"desc\": \"Generator (1) AC Power - Apparent\",\n        \"units\": \"VA\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2V\",\n        \"desc\": \"Generator (2) AC Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2A\",\n        \"desc\": \"Generator (2) AC Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Freq\",\n        \"desc\": \"Generator (2) AC Frequency\",\n        \"units\": \"Hz\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2VQual\",\n        \"desc\": \"Generator (2) AC Voltage Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum32\",\n        \"size\": 2,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"Gen2FreqQual\",\n        \"desc\": \"Generator (2) AC Frequency Qualified\",\n        \"access\": \"r\",\n        \"type\": \"enum32\",\n        \"size\": 2,\n        \"symbols\": [\n          {\n            \"name\": \"Not Qualifying\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Qualifying\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Missing\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Too Low\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"Too High\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"Qualification Good\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"Gen2QualTime\",\n        \"desc\": \"Generator (2) AC Qualified Duration\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2W\",\n        \"desc\": \"Generator (2) AC Power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2VL1\",\n        \"desc\": \"Generator (2) AC L1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2AL1\",\n        \"desc\": \"Generator (2) AC L1 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2VL2\",\n        \"desc\": \"Generator (2) AC L2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2AL2\",\n        \"desc\": \"Generator (2) AC L2 Current\",\n        \"units\": \"A\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2VA\",\n        \"desc\": \"Generator (2) AC Power - Apparent\",\n        \"units\": \"VA\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"__14\",\n        \"desc\": \"unreadable\",\n        \"type\": \"string\",\n        \"size\": 16\n      },\n      {\n        \"name\": \"Gen1Hour\",\n        \"desc\": \"Generator (1) Input Energy This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1DurHour\",\n        \"desc\": \"Generator (1) Input Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1Day\",\n        \"desc\": \"Generator (1) Input Energy Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1DurDay\",\n        \"desc\": \"Generator (1) Input Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1Week\",\n        \"desc\": \"Generator (1) Input Energy This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1DurWeek\",\n        \"desc\": \"Generator (1) Input Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1Month\",\n        \"desc\": \"Generator (1) Input Energy This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1DurMonth\",\n        \"desc\": \"Generator (1) Input Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1Year\",\n        \"desc\": \"Generator (1) Input Energy This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1DurYear\",\n        \"desc\": \"Generator (1) Input Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1Life\",\n        \"desc\": \"Generator (1) Input Energy Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen1DurLife\",\n        \"desc\": \"Generator (1) Input Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Hour\",\n        \"desc\": \"Generator (2) Input Energy This Hour\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2DurHour\",\n        \"desc\": \"Generator (2) Input Active This Hour\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Day\",\n        \"desc\": \"Generator (2) Input Energy Today\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2DurDay\",\n        \"desc\": \"Generator (2) Input Active Today\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Week\",\n        \"desc\": \"Generator (2) Input Energy This Week\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2DurWeek\",\n        \"desc\": \"Generator (2) Input Active This Week\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Month\",\n        \"desc\": \"Generator (2) Input Energy This Month\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2DurMonth\",\n        \"desc\": \"Generator (2) Input Active This Month\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Year\",\n        \"desc\": \"Generator (2) Input Energy This Year\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2DurYear\",\n        \"desc\": \"Generator (2) Input Active This Year\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2Life\",\n        \"desc\": \"Generator (2) Input Energy Lifetime\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"Gen2DurLife\",\n        \"desc\": \"Generator (2) Input Active Lifetime\",\n        \"units\": \"s\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"XWPF\",\n        \"desc\": \"XW Power Factor\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"int16\",\n        \"size\": 1\n      }\n    ]\n  }\n}",
        "output": "json",
        "x": 570,
        "y": 480,
        "wires": [
            [
                "cb6d699421f3df0b"
            ]
        ]
    },
    {
        "id": "7f664ccdb28a1c56",
        "type": "template",
        "z": "da1113f849ed321d",
        "name": "Custom Model XW (502)",
        "field": "model",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"id\": -1,\n  \"label\": \"XW Pro Port 503\",\n  \"desc\": \"A custom schema built by Chandler.\",\n  \"comments\": [\n    \"Doesn't necessary follow the schema\",\n    \"but certainly gets close\"\n  ],\n  \"group\": {\n    \"name\": \"custom_model\",\n    \"label\": \"custom_model\",\n    \"type\": \"group\",\n    \"points\": [\n      {\n        \"name\": \"ID\",\n        \"desc\": \"Custom model map number\",\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"L\",\n        \"desc\": \"Custom model map len\",\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"XFMRLifekWh\",\n        \"desc\": \"Energy at the XFMR Lifetime - charging\",\n        \"units\": \"kWh\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"ChaMax\",\n        \"desc\": \"Max charge power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"DischaMax\",\n        \"desc\": \"Max dischage power\",\n        \"units\": \"W\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"WMaxSF\",\n        \"desc\": \"Wmax scaling factor\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"Mode\",\n        \"desc\": \"Operating Mode\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Standby\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Operating\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"name\": \"BattSensorCount\",\n        \"desc\": \"Battery sensor count\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"BattSensorConfig\",\n        \"desc\": \"Battery sensor config mode\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"InvClearFaultCmd\",\n        \"desc\": \"Inverter clear fault command\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCPVLimit\",\n        \"desc\": \"AC PV Charge SOC Limit\",\n        \"units\": \"%\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCHigh\",\n        \"desc\": \"High SOC Cut Out\",\n        \"units\": \"%\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"int16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCRecha\",\n        \"desc\": \"Recharge SOC\",\n        \"units\": \"%\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"int16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCLow\",\n        \"desc\": \"Low SOC Cut Out\",\n        \"units\": \"%\",\n        \"scale\": 0.01,\n        \"sf\": -2,\n        \"offset\": 0,\n        \"access\": \"rw\",\n        \"type\": \"int16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"SOCSF\",\n        \"desc\": \"SOC scaling factor\",\n        \"scale\": 1.0,\n        \"sf\": 0,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint16\",\n        \"size\": 1\n      },\n      {\n        \"name\": \"CommFailAction\",\n        \"desc\": \"Fail-over action on loss of SunSpec Controller heartbeat\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Heartbeat Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Do Nothing\",\n            \"value\": 1\n          },\n          {\n            \"name\": \"Autonomous Operation\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"AC Passthrough\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"name\": \"BattAssoc\",\n        \"desc\": \"Battery Association\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"House Battery Bank 1\",\n            \"value\": 3\n          },\n          {\n            \"name\": \"House Battery Bank 2\",\n            \"value\": 4\n          },\n          {\n            \"name\": \"House Battery Bank 3\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"House Battery Bank 4\",\n            \"value\": 6\n          },\n          {\n            \"name\": \"House Battery Bank 5\",\n            \"value\": 7\n          }\n        ]\n      },\n      {\n        \"name\": \"InvStatus\",\n        \"desc\": \"Inverter Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Invert\",\n            \"value\": 1024\n          },\n          {\n            \"name\": \"AC Pass Through\",\n            \"value\": 1025\n          },\n          {\n            \"name\": \"APS Only\",\n            \"value\": 1026\n          },\n          {\n            \"name\": \"Load Sense\",\n            \"value\": 1027\n          },\n          {\n            \"name\": \"Inverter Disabled\",\n            \"value\": 1028\n          },\n          {\n            \"name\": \"Load Sense Ready\",\n            \"value\": 1029\n          },\n          {\n            \"name\": \"Engaging Inverter\",\n            \"value\": 1030\n          },\n          {\n            \"name\": \"Invert Fault\",\n            \"value\": 1031\n          },\n          {\n            \"name\": \"Inverter Standby\",\n            \"value\": 1032\n          },\n          {\n            \"name\": \"Grid-Tied\",\n            \"value\": 1033\n          },\n          {\n            \"name\": \"Grid Support\",\n            \"value\": 1034\n          },\n          {\n            \"name\": \"Gen Support\",\n            \"value\": 1035\n          },\n          {\n            \"name\": \"Sell-to-Grid\",\n            \"value\": 1036\n          },\n          {\n            \"name\": \"Load Shaving\",\n            \"value\": 1037\n          },\n          {\n            \"name\": \"Grid Frequency Stabilization\",\n            \"value\": 1038\n          },\n          {\n            \"name\": \"AC Coupling\",\n            \"value\": 1039\n          },\n          {\n            \"name\": \"Reverse Ibatt\",\n            \"value\": 1040\n          }\n        ]\n      },\n      {\n        \"name\": \"ChaStatus\",\n        \"desc\": \"Charger Status\",\n        \"access\": \"r\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Not Charging\",\n            \"value\": 768\n          },\n          {\n            \"name\": \"Bulk\",\n            \"value\": 769\n          },\n          {\n            \"name\": \"Absorption\",\n            \"value\": 770\n          },\n          {\n            \"name\": \"Overcharge\",\n            \"value\": 771\n          },\n          {\n            \"name\": \"Equalize\",\n            \"value\": 772\n          },\n          {\n            \"name\": \"Float\",\n            \"value\": 773\n          },\n          {\n            \"name\": \"No Float\",\n            \"value\": 774\n          },\n          {\n            \"name\": \"Constant VI\",\n            \"value\": 775\n          },\n          {\n            \"name\": \"Charger Disabled\",\n            \"value\": 776\n          },\n          {\n            \"name\": \"Qualifying AC\",\n            \"value\": 777\n          },\n          {\n            \"name\": \"Qualifying APS\",\n            \"value\": 778\n          },\n          {\n            \"name\": \"Engaging Charger\",\n            \"value\": 779\n          },\n          {\n            \"name\": \"Charge Fault\",\n            \"value\": 780\n          },\n          {\n            \"name\": \"Charger Suspend\",\n            \"value\": 781\n          },\n          {\n            \"name\": \"AC Good\",\n            \"value\": 782\n          },\n          {\n            \"name\": \"APS Good\",\n            \"value\": 783\n          },\n          {\n            \"name\": \"AC Fault\",\n            \"value\": 784\n          },\n          {\n            \"name\": \"Charge\",\n            \"value\": 785\n          },\n          {\n            \"name\": \"Absorption Exit Pending\",\n            \"value\": 786\n          },\n          {\n            \"name\": \"Ground Fault\",\n            \"value\": 787\n          },\n          {\n            \"name\": \"AC Good Pending\",\n            \"value\": 788\n          }\n        ]\n      },\n      {\n        \"name\": \"ResetCmd\",\n        \"desc\": \"Reset\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Reboot\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Reset User Settings to Factory\",\n            \"value\": 2\n          },\n          {\n            \"name\": \"Reset All Settings to Factory\",\n            \"value\": 5\n          }\n        ]\n      },\n      {\n        \"name\": \"AC2V\",\n        \"desc\": \"AC2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2VL1\",\n        \"desc\": \"AC2 L1 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"AC2VL2\",\n        \"desc\": \"AC2 L2 Voltage\",\n        \"units\": \"V\",\n        \"scale\": 0.001,\n        \"sf\": -3,\n        \"offset\": 0,\n        \"access\": \"r\",\n        \"type\": \"uint32\",\n        \"size\": 2\n      },\n      {\n        \"name\": \"BackupEnable\",\n        \"desc\": \"Backup Mode\",\n        \"access\": \"rw\",\n        \"type\": \"enum16\",\n        \"size\": 1,\n        \"symbols\": [\n          {\n            \"name\": \"Disabled\",\n            \"value\": 0\n          },\n          {\n            \"name\": \"Enabled\",\n            \"value\": 1\n          }\n        ]\n      }\n    ]\n  }\n}",
        "output": "json",
        "x": 570,
        "y": 520,
        "wires": [
            [
                "cb6d699421f3df0b"
            ]
        ]
    },
    {
        "id": "2d9af2049d139528",
        "type": "template",
        "z": "da1113f849ed321d",
        "name": "SunSpec Model 802",
        "field": "model",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n    \"group\": {\n        \"label\": \"Battery Base Model\",\n        \"name\": \"battery\",\n        \"points\": [\n            {\n                \"desc\": \"Model identifier\",\n                \"label\": \"Model ID\",\n                \"mandatory\": \"M\",\n                \"name\": \"ID\",\n                \"size\": 1,\n                \"static\": \"S\",\n                \"type\": \"uint16\",\n                \"value\": 802\n            },\n            {\n                \"desc\": \"Model length\",\n                \"label\": \"Model Length\",\n                \"mandatory\": \"M\",\n                \"name\": \"L\",\n                \"size\": 1,\n                \"static\": \"S\",\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Nameplate charge capacity in amp-hours.\",\n                \"label\": \"Nameplate Charge Capacity\",\n                \"mandatory\": \"M\",\n                \"name\": \"AHRtg\",\n                \"sf\": \"AHRtg_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"Ah\"\n            },\n            {\n                \"desc\": \"Nameplate energy capacity in DC watt-hours.\",\n                \"label\": \"Nameplate Energy Capacity\",\n                \"mandatory\": \"M\",\n                \"name\": \"WHRtg\",\n                \"sf\": \"WHRtg_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"desc\": \"Maximum rate of energy transfer into the storage device in DC watts.\",\n                \"label\": \"Nameplate Max Charge Rate\",\n                \"mandatory\": \"M\",\n                \"name\": \"WChaRteMax\",\n                \"sf\": \"WChaDisChaMax_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"W\"\n            },\n            {\n                \"desc\": \"Maximum rate of energy transfer out of the storage device in DC watts.\",\n                \"label\": \"Nameplate Max Discharge Rate\",\n                \"mandatory\": \"M\",\n                \"name\": \"WDisChaRteMax\",\n                \"sf\": \"WChaDisChaMax_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"W\"\n            },\n            {\n                \"desc\": \"Self discharge rate.  Percentage of capacity (WHRtg) discharged per day.\",\n                \"label\": \"Self Discharge Rate\",\n                \"name\": \"DisChaRte\",\n                \"sf\": \"DisChaRte_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%WHRtg\"\n            },\n            {\n                \"desc\": \"Manufacturer maximum state of charge, expressed as a percentage.\",\n                \"label\": \"Nameplate Max SoC\",\n                \"name\": \"SoCMax\",\n                \"sf\": \"SoC_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%WHRtg\"\n            },\n            {\n                \"desc\": \"Manufacturer minimum state of charge, expressed as a percentage.\",\n                \"label\": \"Nameplate Min SoC\",\n                \"name\": \"SoCMin\",\n                \"sf\": \"SoC_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%WHRtg\"\n            },\n            {\n                \"access\": \"RW\",\n                \"desc\": \"Setpoint for maximum reserve for storage as a percentage of the nominal maximum storage.\",\n                \"label\": \"Max Reserve Percent\",\n                \"name\": \"SocRsvMax\",\n                \"sf\": \"SoC_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%WHRtg\"\n            },\n            {\n                \"access\": \"RW\",\n                \"desc\": \"Setpoint for minimum reserve for storage as a percentage of the nominal maximum storage.\",\n                \"label\": \"Min Reserve Percent\",\n                \"name\": \"SoCRsvMin\",\n                \"sf\": \"SoC_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%WHRtg\"\n            },\n            {\n                \"desc\": \"State of charge, expressed as a percentage.\",\n                \"label\": \"State of Charge\",\n                \"mandatory\": \"M\",\n                \"name\": \"SoC\",\n                \"sf\": \"SoC_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%WHRtg\"\n            },\n            {\n                \"desc\": \"Depth of discharge, expressed as a percentage.\",\n                \"label\": \"Depth of Discharge\",\n                \"name\": \"DoD\",\n                \"sf\": \"DoD_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%\"\n            },\n            {\n                \"desc\": \"Percentage of battery life remaining.\",\n                \"label\": \"State of Health\",\n                \"name\": \"SoH\",\n                \"sf\": \"SoH_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"%\"\n            },\n            {\n                \"desc\": \"Number of cycles executed in the battery.\",\n                \"label\": \"Cycle Count\",\n                \"name\": \"NCyc\",\n                \"size\": 2,\n                \"type\": \"uint32\"\n            },\n            {\n                \"desc\": \"Charge status of storage device. Enumeration.\",\n                \"label\": \"Charge Status\",\n                \"name\": \"ChaSt\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"OFF\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"EMPTY\",\n                        \"value\": 2\n                    },\n                    {\n                        \"name\": \"DISCHARGING\",\n                        \"value\": 3\n                    },\n                    {\n                        \"name\": \"CHARGING\",\n                        \"value\": 4\n                    },\n                    {\n                        \"name\": \"FULL\",\n                        \"value\": 5\n                    },\n                    {\n                        \"name\": \"HOLDING\",\n                        \"value\": 6\n                    },\n                    {\n                        \"name\": \"TESTING\",\n                        \"value\": 7\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"Battery control mode. Enumeration.\",\n                \"label\": \"Control Mode\",\n                \"mandatory\": \"M\",\n                \"name\": \"LocRemCtl\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"REMOTE\",\n                        \"value\": 0\n                    },\n                    {\n                        \"name\": \"LOCAL\",\n                        \"value\": 1\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"Value is incremented every second with periodic resets to zero.\",\n                \"label\": \"Battery Heartbeat\",\n                \"name\": \"Hb\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"access\": \"RW\",\n                \"desc\": \"Value is incremented every second with periodic resets to zero.\",\n                \"label\": \"Controller Heartbeat\",\n                \"name\": \"CtrlHb\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"access\": \"RW\",\n                \"desc\": \"Used to reset any latched alarms.  1 = Reset.\",\n                \"label\": \"Alarm Reset\",\n                \"mandatory\": \"M\",\n                \"name\": \"AlmRst\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Type of battery. Enumeration.\",\n                \"label\": \"Battery Type\",\n                \"mandatory\": \"M\",\n                \"name\": \"Typ\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"NOT APPLICABLE_UNKNOWN\",\n                        \"value\": 0\n                    },\n                    {\n                        \"name\": \"LEAD_ACID\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"NICKEL_METAL_HYDRATE\",\n                        \"value\": 2\n                    },\n                    {\n                        \"name\": \"NICKEL_CADMIUM\",\n                        \"value\": 3\n                    },\n                    {\n                        \"name\": \"LITHIUM_ION\",\n                        \"value\": 4\n                    },\n                    {\n                        \"name\": \"CARBON_ZINC\",\n                        \"value\": 5\n                    },\n                    {\n                        \"name\": \"ZINC_CHLORIDE\",\n                        \"value\": 6\n                    },\n                    {\n                        \"name\": \"ALKALINE\",\n                        \"value\": 7\n                    },\n                    {\n                        \"name\": \"RECHARGEABLE_ALKALINE\",\n                        \"value\": 8\n                    },\n                    {\n                        \"name\": \"SODIUM_SULFUR\",\n                        \"value\": 9\n                    },\n                    {\n                        \"name\": \"FLOW\",\n                        \"value\": 10\n                    },\n                    {\n                        \"name\": \"OTHER\",\n                        \"value\": 99\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"State of the battery bank.  Enumeration.\",\n                \"label\": \"State of the Battery Bank\",\n                \"mandatory\": \"M\",\n                \"name\": \"State\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"DISCONNECTED\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"INITIALIZING\",\n                        \"value\": 2\n                    },\n                    {\n                        \"name\": \"CONNECTED\",\n                        \"value\": 3\n                    },\n                    {\n                        \"name\": \"STANDBY\",\n                        \"value\": 4\n                    },\n                    {\n                        \"name\": \"SOC PROTECTION\",\n                        \"value\": 5\n                    },\n                    {\n                        \"name\": \"SUSPENDING\",\n                        \"value\": 6\n                    },\n                    {\n                        \"name\": \"FAULT\",\n                        \"value\": 99\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"Vendor specific battery bank state.  Enumeration.\",\n                \"label\": \"Vendor Battery Bank State\",\n                \"name\": \"StateVnd\",\n                \"size\": 1,\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"Date the device warranty expires.\",\n                \"label\": \"Warranty Date\",\n                \"name\": \"WarrDt\",\n                \"size\": 2,\n                \"type\": \"uint32\"\n            },\n            {\n                \"desc\": \"Alarms and warnings.  Bit flags.\",\n                \"label\": \"Battery Event 1 Bitfield\",\n                \"mandatory\": \"M\",\n                \"name\": \"Evt1\",\n                \"size\": 2,\n                \"symbols\": [\n                    {\n                        \"name\": \"COMMUNICATION_ERROR\",\n                        \"value\": 0\n                    },\n                    {\n                        \"name\": \"OVER_TEMP_ALARM\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"OVER_TEMP_WARNING\",\n                        \"value\": 2\n                    },\n                    {\n                        \"name\": \"UNDER_TEMP_ALARM\",\n                        \"value\": 3\n                    },\n                    {\n                        \"name\": \"UNDER_TEMP_WARNING\",\n                        \"value\": 4\n                    },\n                    {\n                        \"name\": \"OVER_CHARGE_CURRENT_ALARM\",\n                        \"value\": 5\n                    },\n                    {\n                        \"name\": \"OVER_CHARGE_CURRENT_WARNING\",\n                        \"value\": 6\n                    },\n                    {\n                        \"name\": \"OVER_DISCHARGE_CURRENT_ALARM\",\n                        \"value\": 7\n                    },\n                    {\n                        \"name\": \"OVER_DISCHARGE_CURRENT_WARNING\",\n                        \"value\": 8\n                    },\n                    {\n                        \"name\": \"OVER_VOLT_ALARM\",\n                        \"value\": 9\n                    },\n                    {\n                        \"name\": \"OVER_VOLT_WARNING\",\n                        \"value\": 10\n                    },\n                    {\n                        \"name\": \"UNDER_VOLT_ALARM\",\n                        \"value\": 11\n                    },\n                    {\n                        \"name\": \"UNDER_VOLT_WARNING\",\n                        \"value\": 12\n                    },\n                    {\n                        \"name\": \"UNDER_SOC_MIN_ALARM\",\n                        \"value\": 13\n                    },\n                    {\n                        \"name\": \"UNDER_SOC_MIN_WARNING\",\n                        \"value\": 14\n                    },\n                    {\n                        \"name\": \"OVER_SOC_MAX_ALARM\",\n                        \"value\": 15\n                    },\n                    {\n                        \"name\": \"OVER_SOC_MAX_WARNING\",\n                        \"value\": 16\n                    },\n                    {\n                        \"name\": \"VOLTAGE_IMBALANCE_WARNING\",\n                        \"value\": 17\n                    },\n                    {\n                        \"name\": \"TEMPERATURE_IMBALANCE_ALARM\",\n                        \"value\": 18\n                    },\n                    {\n                        \"name\": \"TEMPERATURE_IMBALANCE_WARNING\",\n                        \"value\": 19\n                    },\n                    {\n                        \"name\": \"CONTACTOR_ERROR\",\n                        \"value\": 20\n                    },\n                    {\n                        \"name\": \"FAN_ERROR\",\n                        \"value\": 21\n                    },\n                    {\n                        \"name\": \"GROUND_FAULT\",\n                        \"value\": 22\n                    },\n                    {\n                        \"name\": \"OPEN_DOOR_ERROR\",\n                        \"value\": 23\n                    },\n                    {\n                        \"name\": \"CURRENT_IMBALANCE_WARNING\",\n                        \"value\": 24\n                    },\n                    {\n                        \"name\": \"OTHER_ALARM\",\n                        \"value\": 25\n                    },\n                    {\n                        \"name\": \"OTHER_WARNING\",\n                        \"value\": 26\n                    },\n                    {\n                        \"name\": \"RESERVED_1\",\n                        \"value\": 27\n                    },\n                    {\n                        \"name\": \"CONFIGURATION_ALARM\",\n                        \"value\": 28\n                    },\n                    {\n                        \"name\": \"CONFIGURATION_WARNING\",\n                        \"value\": 29\n                    }\n                ],\n                \"type\": \"bitfield32\"\n            },\n            {\n                \"desc\": \"Alarms and warnings.  Bit flags.\",\n                \"label\": \"Battery Event 2 Bitfield\",\n                \"mandatory\": \"M\",\n                \"name\": \"Evt2\",\n                \"size\": 2,\n                \"type\": \"bitfield32\"\n            },\n            {\n                \"desc\": \"Vendor defined events.\",\n                \"label\": \"Vendor Event Bitfield 1\",\n                \"mandatory\": \"M\",\n                \"name\": \"EvtVnd1\",\n                \"size\": 2,\n                \"type\": \"bitfield32\"\n            },\n            {\n                \"desc\": \"Vendor defined events.\",\n                \"label\": \"Vendor Event Bitfield 2\",\n                \"mandatory\": \"M\",\n                \"name\": \"EvtVnd2\",\n                \"size\": 2,\n                \"type\": \"bitfield32\"\n            },\n            {\n                \"desc\": \"DC Bus Voltage.\",\n                \"label\": \"External Battery Voltage\",\n                \"mandatory\": \"M\",\n                \"name\": \"V\",\n                \"sf\": \"V_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Instantaneous maximum battery voltage.\",\n                \"label\": \"Max Battery Voltage\",\n                \"name\": \"VMax\",\n                \"sf\": \"V_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Instantaneous minimum battery voltage.\",\n                \"label\": \"Min Battery Voltage\",\n                \"name\": \"VMin\",\n                \"sf\": \"V_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Maximum voltage for all cells in the bank.\",\n                \"label\": \"Max Cell Voltage\",\n                \"name\": \"CellVMax\",\n                \"sf\": \"CellV_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"String containing the cell with maximum voltage.\",\n                \"label\": \"Max Cell Voltage String\",\n                \"name\": \"CellVMaxStr\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Module containing the cell with maximum voltage.\",\n                \"label\": \"Max Cell Voltage Module\",\n                \"name\": \"CellVMaxMod\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Minimum voltage for all cells in the bank.\",\n                \"label\": \"Min Cell Voltage\",\n                \"name\": \"CellVMin\",\n                \"sf\": \"CellV_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"String containing the cell with minimum voltage.\",\n                \"label\": \"Min Cell Voltage String\",\n                \"name\": \"CellVMinStr\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Module containing the cell with minimum voltage.\",\n                \"label\": \"Min Cell Voltage Module\",\n                \"name\": \"CellVMinMod\",\n                \"size\": 1,\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Average cell voltage for all cells in the bank.\",\n                \"label\": \"Average Cell Voltage\",\n                \"name\": \"CellVAvg\",\n                \"sf\": \"CellV_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Total DC current flowing to/from the battery bank.\",\n                \"label\": \"Total DC Current\",\n                \"mandatory\": \"M\",\n                \"name\": \"A\",\n                \"sf\": \"A_SF\",\n                \"size\": 1,\n                \"type\": \"int16\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Instantaneous maximum DC charge current.\",\n                \"label\": \"Max Charge Current\",\n                \"name\": \"AChaMax\",\n                \"sf\": \"AMax_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Instantaneous maximum DC discharge current.\",\n                \"label\": \"Max Discharge Current\",\n                \"name\": \"ADisChaMax\",\n                \"sf\": \"AMax_SF\",\n                \"size\": 1,\n                \"type\": \"uint16\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Total power flowing to/from the battery bank.\",\n                \"label\": \"Total Power\",\n                \"mandatory\": \"M\",\n                \"name\": \"W\",\n                \"sf\": \"W_SF\",\n                \"size\": 1,\n                \"type\": \"int16\",\n                \"units\": \"W\"\n            },\n            {\n                \"desc\": \"Request from battery to start or stop the inverter.  Enumeration.\",\n                \"label\": \"Inverter State Request\",\n                \"name\": \"ReqInvState\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"NO REQUEST\",\n                        \"value\": 0\n                    },\n                    {\n                        \"name\": \"START\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"STOP\",\n                        \"value\": 2\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"AC Power requested by battery.\",\n                \"label\": \"Battery Power Request\",\n                \"name\": \"ReqW\",\n                \"sf\": \"W_SF\",\n                \"size\": 1,\n                \"type\": \"int16\",\n                \"units\": \"W\"\n            },\n            {\n                \"access\": \"RW\",\n                \"desc\": \"Instruct the battery bank to perform an operation such as connecting.  Enumeration.\",\n                \"label\": \"Set Operation\",\n                \"mandatory\": \"M\",\n                \"name\": \"SetOp\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"CONNECT\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"DISCONNECT\",\n                        \"value\": 2\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"access\": \"RW\",\n                \"desc\": \"Set the current state of the inverter.\",\n                \"label\": \"Set Inverter State\",\n                \"mandatory\": \"M\",\n                \"name\": \"SetInvState\",\n                \"size\": 1,\n                \"symbols\": [\n                    {\n                        \"name\": \"INVERTER_STOPPED\",\n                        \"value\": 1\n                    },\n                    {\n                        \"name\": \"INVERTER_STANDBY\",\n                        \"value\": 2\n                    },\n                    {\n                        \"name\": \"INVERTER_STARTED\",\n                        \"value\": 3\n                    }\n                ],\n                \"type\": \"enum16\"\n            },\n            {\n                \"desc\": \"Scale factor for charge capacity.\",\n                \"mandatory\": \"M\",\n                \"name\": \"AHRtg_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for energy capacity.\",\n                \"mandatory\": \"M\",\n                \"name\": \"WHRtg_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for maximum charge and discharge rate.\",\n                \"mandatory\": \"M\",\n                \"name\": \"WChaDisChaMax_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for self discharge rate.\",\n                \"name\": \"DisChaRte_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for state of charge values.\",\n                \"mandatory\": \"M\",\n                \"name\": \"SoC_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for depth of discharge.\",\n                \"name\": \"DoD_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for state of health.\",\n                \"name\": \"SoH_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for DC bus voltage.\",\n                \"mandatory\": \"M\",\n                \"name\": \"V_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for cell voltage.\",\n                \"mandatory\": \"M\",\n                \"name\": \"CellV_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for DC current.\",\n                \"mandatory\": \"M\",\n                \"name\": \"A_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for instantaneous DC charge/discharge current.\",\n                \"mandatory\": \"M\",\n                \"name\": \"AMax_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            },\n            {\n                \"desc\": \"Scale factor for AC power request.\",\n                \"name\": \"W_SF\",\n                \"size\": 1,\n                \"type\": \"sunssf\"\n            }\n        ],\n        \"type\": \"group\"\n    },\n    \"id\": 802\n}",
        "output": "json",
        "x": 560,
        "y": 560,
        "wires": [
            [
                "cb6d699421f3df0b"
            ]
        ]
    },
    {
        "id": "9f319357f389d99a",
        "type": "template",
        "z": "da1113f849ed321d",
        "name": "SunSpec Model 213",
        "field": "model",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n    \"group\": {\n        \"label\": \"wye-connect three phase (abcn) meter\",\n        \"name\": \"ac_meter\",\n        \"points\": [\n            {\n                \"desc\": \"Model identifier\",\n                \"label\": \"Model ID\",\n                \"mandatory\": \"M\",\n                \"name\": \"ID\",\n                \"size\": 1,\n                \"static\": \"S\",\n                \"type\": \"uint16\",\n                \"value\": 213\n            },\n            {\n                \"desc\": \"Model length\",\n                \"label\": \"Model Length\",\n                \"mandatory\": \"M\",\n                \"name\": \"L\",\n                \"size\": 1,\n                \"static\": \"S\",\n                \"type\": \"uint16\"\n            },\n            {\n                \"desc\": \"Total AC Current\",\n                \"label\": \"Amps\",\n                \"mandatory\": \"M\",\n                \"name\": \"A\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Phase A Current\",\n                \"label\": \"Amps PhaseA\",\n                \"mandatory\": \"M\",\n                \"name\": \"AphA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Phase B Current\",\n                \"label\": \"Amps PhaseB\",\n                \"mandatory\": \"M\",\n                \"name\": \"AphB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Phase C Current\",\n                \"label\": \"Amps PhaseC\",\n                \"mandatory\": \"M\",\n                \"name\": \"AphC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"A\"\n            },\n            {\n                \"desc\": \"Line to Neutral AC Voltage (average of active phases)\",\n                \"label\": \"Voltage LN\",\n                \"mandatory\": \"M\",\n                \"name\": \"PhV\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Phase Voltage AN\",\n                \"label\": \"Phase Voltage AN\",\n                \"mandatory\": \"M\",\n                \"name\": \"PhVphA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Phase Voltage BN\",\n                \"label\": \"Phase Voltage BN\",\n                \"mandatory\": \"M\",\n                \"name\": \"PhVphB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Phase Voltage CN\",\n                \"label\": \"Phase Voltage CN\",\n                \"mandatory\": \"M\",\n                \"name\": \"PhVphC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Line to Line AC Voltage (average of active phases)\",\n                \"label\": \"Voltage LL\",\n                \"mandatory\": \"M\",\n                \"name\": \"PPV\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Phase Voltage AB\",\n                \"label\": \"Phase Voltage AB\",\n                \"mandatory\": \"M\",\n                \"name\": \"PPVphAB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Phase Voltage BC\",\n                \"label\": \"Phase Voltage BC\",\n                \"mandatory\": \"M\",\n                \"name\": \"PPVphBC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Phase Voltage CA\",\n                \"label\": \"Phase Voltage CA\",\n                \"mandatory\": \"M\",\n                \"name\": \"PPVphCA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"V\"\n            },\n            {\n                \"desc\": \"Frequency\",\n                \"label\": \"Hz\",\n                \"mandatory\": \"M\",\n                \"name\": \"Hz\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Hz\"\n            },\n            {\n                \"desc\": \"Total Real Power\",\n                \"label\": \"Watts\",\n                \"mandatory\": \"M\",\n                \"name\": \"W\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"W\"\n            },\n            {\n                \"label\": \"Watts phase A\",\n                \"name\": \"WphA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"W\"\n            },\n            {\n                \"label\": \"Watts phase B\",\n                \"name\": \"WphB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"W\"\n            },\n            {\n                \"label\": \"Watts phase C\",\n                \"name\": \"WphC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"W\"\n            },\n            {\n                \"desc\": \"AC Apparent Power\",\n                \"label\": \"VA\",\n                \"name\": \"VA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VA\"\n            },\n            {\n                \"label\": \"VA phase A\",\n                \"name\": \"VAphA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VA\"\n            },\n            {\n                \"label\": \"VA phase B\",\n                \"name\": \"VAphB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VA\"\n            },\n            {\n                \"label\": \"VA phase C\",\n                \"name\": \"VAphC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VA\"\n            },\n            {\n                \"desc\": \"Reactive Power\",\n                \"label\": \"VAR\",\n                \"name\": \"VAR\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"var\"\n            },\n            {\n                \"label\": \"VAR phase A\",\n                \"name\": \"VARphA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"var\"\n            },\n            {\n                \"label\": \"VAR phase B\",\n                \"name\": \"VARphB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"var\"\n            },\n            {\n                \"label\": \"VAR phase C\",\n                \"name\": \"VARphC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"var\"\n            },\n            {\n                \"desc\": \"Power Factor\",\n                \"label\": \"PF\",\n                \"name\": \"PF\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"PF\"\n            },\n            {\n                \"label\": \"PF phase A\",\n                \"name\": \"PFphA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"PF\"\n            },\n            {\n                \"label\": \"PF phase B\",\n                \"name\": \"PFphB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"PF\"\n            },\n            {\n                \"label\": \"PF phase C\",\n                \"name\": \"PFphC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"PF\"\n            },\n            {\n                \"desc\": \"Total Real Energy Exported\",\n                \"label\": \"Total Watt-hours Exported\",\n                \"mandatory\": \"M\",\n                \"name\": \"TotWhExp\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"label\": \"Total Watt-hours Exported phase A\",\n                \"name\": \"TotWhExpPhA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"label\": \"Total Watt-hours Exported phase B\",\n                \"name\": \"TotWhExpPhB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"label\": \"Total Watt-hours Exported phase C\",\n                \"name\": \"TotWhExpPhC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"desc\": \"Total Real Energy Imported\",\n                \"label\": \"Total Watt-hours Imported\",\n                \"mandatory\": \"M\",\n                \"name\": \"TotWhImp\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"label\": \"Total Watt-hours Imported phase A\",\n                \"name\": \"TotWhImpPhA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"label\": \"Total Watt-hours Imported phase B\",\n                \"name\": \"TotWhImpPhB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"label\": \"Total Watt-hours Imported phase C\",\n                \"name\": \"TotWhImpPhC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"Wh\"\n            },\n            {\n                \"desc\": \"Total Apparent Energy Exported\",\n                \"label\": \"Total VA-hours Exported\",\n                \"name\": \"TotVAhExp\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"label\": \"Total VA-hours Exported phase A\",\n                \"name\": \"TotVAhExpPhA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"label\": \"Total VA-hours Exported phase B\",\n                \"name\": \"TotVAhExpPhB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"label\": \"Total VA-hours Exported phase C\",\n                \"name\": \"TotVAhExpPhC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"desc\": \"Total Apparent Energy Imported\",\n                \"label\": \"Total VA-hours Imported\",\n                \"name\": \"TotVAhImp\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"label\": \"Total VA-hours Imported phase A\",\n                \"name\": \"TotVAhImpPhA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"label\": \"Total VA-hours Imported phase B\",\n                \"name\": \"TotVAhImpPhB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"label\": \"Total VA-hours Imported phase C\",\n                \"name\": \"TotVAhImpPhC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"VAh\"\n            },\n            {\n                \"desc\": \"Total Reactive Energy Imported Quadrant 1\",\n                \"label\": \"Total VAR-hours Imported Q1\",\n                \"name\": \"TotVArhImpQ1\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Imported Q1 phase A\",\n                \"name\": \"TotVArhImpQ1phA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Imported Q1 phase B\",\n                \"name\": \"TotVArhImpQ1phB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Imported Q1 phase C\",\n                \"name\": \"TotVArhImpQ1phC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"desc\": \"Total Reactive Power Imported Quadrant 2\",\n                \"label\": \"Total VAr-hours Imported Q2\",\n                \"name\": \"TotVArhImpQ2\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Imported Q2 phase A\",\n                \"name\": \"TotVArhImpQ2phA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Imported Q2 phase B\",\n                \"name\": \"TotVArhImpQ2phB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Imported Q2 phase C\",\n                \"name\": \"TotVArhImpQ2phC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"desc\": \"Total Reactive Power Exported Quadrant 3\",\n                \"label\": \"Total VAr-hours Exported Q3\",\n                \"name\": \"TotVArhExpQ3\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Exported Q3 phase A\",\n                \"name\": \"TotVArhExpQ3phA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Exported Q3 phase B\",\n                \"name\": \"TotVArhExpQ3phB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Exported Q3 phase C\",\n                \"name\": \"TotVArhExpQ3phC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"desc\": \"Total Reactive Power Exported Quadrant 4\",\n                \"label\": \"Total VAr-hours Exported Q4\",\n                \"name\": \"TotVArhExpQ4\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Exported Q4 Imported phase A\",\n                \"name\": \"TotVArhExpQ4phA\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Exported Q4 Imported phase B\",\n                \"name\": \"TotVArhExpQ4phB\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"label\": \"Total VAr-hours Exported Q4 Imported phase C\",\n                \"name\": \"TotVArhExpQ4phC\",\n                \"size\": 2,\n                \"type\": \"float32\",\n                \"units\": \"varh\"\n            },\n            {\n                \"desc\": \"Meter Event Flags\",\n                \"label\": \"Events\",\n                \"mandatory\": \"M\",\n                \"name\": \"Evt\",\n                \"size\": 2,\n                \"symbols\": [\n                    {\n                        \"name\": \"M_EVENT_Power_Failure\",\n                        \"value\": 2\n                    },\n                    {\n                        \"name\": \"M_EVENT_Under_Voltage\",\n                        \"value\": 3\n                    },\n                    {\n                        \"name\": \"M_EVENT_Low_PF\",\n                        \"value\": 4\n                    },\n                    {\n                        \"name\": \"M_EVENT_Over_Current\",\n                        \"value\": 5\n                    },\n                    {\n                        \"name\": \"M_EVENT_Over_Voltage\",\n                        \"value\": 6\n                    },\n                    {\n                        \"name\": \"M_EVENT_Missing_Sensor\",\n                        \"value\": 7\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved1\",\n                        \"value\": 8\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved2\",\n                        \"value\": 9\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved3\",\n                        \"value\": 10\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved4\",\n                        \"value\": 11\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved5\",\n                        \"value\": 12\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved6\",\n                        \"value\": 13\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved7\",\n                        \"value\": 14\n                    },\n                    {\n                        \"name\": \"M_EVENT_Reserved8\",\n                        \"value\": 15\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM01\",\n                        \"value\": 16\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM02\",\n                        \"value\": 17\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM03\",\n                        \"value\": 18\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM04\",\n                        \"value\": 19\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM05\",\n                        \"value\": 20\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM06\",\n                        \"value\": 21\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM07\",\n                        \"value\": 22\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM08\",\n                        \"value\": 23\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM09\",\n                        \"value\": 24\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM10\",\n                        \"value\": 25\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM11\",\n                        \"value\": 26\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM12\",\n                        \"value\": 27\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM13\",\n                        \"value\": 28\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM14\",\n                        \"value\": 29\n                    },\n                    {\n                        \"name\": \"M_EVENT_OEM15\",\n                        \"value\": 30\n                    }\n                ],\n                \"type\": \"bitfield32\"\n            }\n        ],\n        \"type\": \"group\"\n    },\n    \"id\": 213\n}",
        "output": "json",
        "x": 560,
        "y": 600,
        "wires": [
            [
                "cb6d699421f3df0b"
            ]
        ]
    },
    {
        "id": "1a1b51a8c38a47ae",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Error",
        "func": "\nnode.error(`Unknown model: ${env.get('model')}`);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 640,
        "wires": []
    },
    {
        "id": "c8aaae3188632316",
        "type": "split",
        "z": "da1113f849ed321d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "5fb57d2956081502"
            ]
        ]
    },
    {
        "id": "5fb57d2956081502",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Prepare Read",
        "func": "\n// msg.payload.start\n// msg.payload.endinc\n// msg.payload.unitid\n\n// Starting address\nlet add = msg.payload.start;\n\n// Number of registers to read\nlet count = msg.payload.endinc - msg.payload.start + 1;\nlet id = msg.payload.unitid;\n\n// Format of modbus requests\nmsg.payload = {\n    'fc': 3,\n    'address': add,\n    'quantity': count,\n};\n\n// Can request different address\nif (id) msg.payload.unitid = id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 260,
        "wires": [
            [
                "6498143fa289c6cf"
            ]
        ]
    },
    {
        "id": "6498143fa289c6cf",
        "type": "switch",
        "z": "da1113f849ed321d",
        "name": "",
        "property": "device",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "bms",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inv502",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inv503",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wattnode",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 370,
        "y": 260,
        "wires": [
            [
                "dff7751468592e62"
            ],
            [
                "bd445a9083665d45"
            ],
            [
                "e143aaa90d388cc7"
            ],
            [
                "539a85c75b93eccf"
            ],
            [
                "a8f0d4762ab37ac5"
            ]
        ]
    },
    {
        "id": "a8f0d4762ab37ac5",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Error",
        "func": "\nnode.error(`Unknown device: ${env.get('device')}`);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 420,
        "wires": []
    },
    {
        "id": "57c7937d62af51ab",
        "type": "join",
        "z": "da1113f849ed321d",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "4acff1358e3e0216"
            ]
        ]
    },
    {
        "id": "ad7d38dceaa9ca93",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Save Message",
        "func": "// Saves a copy of the original message object\n// Attempts to increase speed by cleaning up as much as possible\nmsg._msg = { ...msg};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "c8aaae3188632316"
            ]
        ]
    },
    {
        "id": "4acff1358e3e0216",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Merge Buffers",
        "func": "\n// Merge modbus reads\nlet buffers = [];\nfor (let i = 0; i < msg.payload.length; i++) {\n    buffers.push(msg.payload[i].buffer);\n}\n\n// Clean up left over modbus properties\nmsg._msg._msg = { ...msg._msg };\nmsg._msg.req = msg._msg.payload;\nmsg._msg.buffer = Buffer.concat(buffers);\n\nreturn msg._msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 480,
        "wires": [
            [
                "8396935deaa5cc11"
            ]
        ]
    },
    {
        "id": "cb6d699421f3df0b",
        "type": "change",
        "z": "da1113f849ed321d",
        "name": "Setup for Parse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.model.group.points",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 480,
        "wires": [
            [
                "8ec4423f4bec6eae"
            ]
        ]
    },
    {
        "id": "8ec4423f4bec6eae",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Calculate Registers/Offsets",
        "func": "\n// Function to check if request contained a specific register\nfunction includeAddress (addr) {\n    // msg.req has the thing\n    for (let i = 0; i < msg.req.length; i++) {\n        if (addr < msg.req[i].start) continue;\n        if (msg.req[i].endinc < addr) continue;\n        return true;\n    }\n    return false;\n}\n\n// Return value\nlet ret = [];\n\n// Calculate buffer offsets and register addresses\nlet offset = 0;\nlet realoffset = 0;\nfor (let i = 0; i < msg.payload.length; i++) {\n    \n    let point = msg.payload[i];\n\n    // Save scale and offset information\n    if ('scale' in point) {\n        point.adjust = {\n            scale: point.scale\n        };\n    }\n    if ('offset' in point) {\n        point.adjust = point.adjust || {};\n        point.adjust.offset = point.offset;\n    }\n\n    // Actual modbus register address\n    point.addr = offset / 2 + env.get('modeladdr');\n    offset += point.size * 2;\n\n    if (!includeAddress(point.addr)) continue;\n\n    // Offset of register in buffer\n    point.offset = realoffset;\n    realoffset += point.size * 2;\n    \n    ret.push(point);\n}\n\nmsg.payload = ret;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 700,
        "wires": [
            [
                "7e0e5bf87c8c5152"
            ]
        ]
    },
    {
        "id": "7e0e5bf87c8c5152",
        "type": "split",
        "z": "da1113f849ed321d",
        "name": "Split by Register",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 480,
        "y": 700,
        "wires": [
            [
                "126788aeeb0dc305"
            ]
        ]
    },
    {
        "id": "126788aeeb0dc305",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Process Parsing Info",
        "func": "\n// Determine buffer type for register (see \"On Start\" for function)\nmsg.payload.realType = msg.payload.type;\nmsg.payload.type = context.get(\"typeConversion\")[msg.payload.type];\n\n// Scale 'length' parameter as necessary\nswitch (msg.payload.type) {\n    case \"binary\":\n        msg.payload.length = msg.payload.size * 16;\n        break;\n    case \"string\":\n        msg.payload.length = msg.payload.size;\n        break;\n    case \"hex\":\n        msg.payload.length = msg.payload.size * 2;\n        break;\n    default:\n        if ('length' in msg.payload) delete msg.payload.length;\n        break;\n}\n\n// There is no 'offsetbit'\nif ('offsetbit' in msg.payload) delete msg.payload.offsetbit;\n\n// Would use scale, but 'multiple operations' not supported\n// Also can't have decimals or negative signs in string\n// https://github.com/Steve-Mcl/node-red-contrib-buffer-parser/issues/18\nif ('scale' in msg.payload) delete msg.payload.scale;\n\n// Mask is required for some reason\n// https://github.com/Steve-Mcl/node-red-contrib-buffer-parser/issues/16\nmsg.payload.mask = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"typeConversion\", \n    {\n        \"int16\": \"int16\",\n        \"int32\": \"int32\",\n        \"int64\": \"bigint64\",\n        \"raw16\": \"16bit\",\n        \"uint16\": \"uint16\",\n        \"uint32\": \"uint32\",\n        \"uint64\": \"biguint64\",\n        \"acc16\": \"uint16\",\n        \"acc32\": \"uint32\",\n        \"acc64\": \"biguint64\",\n        \"bitfield16\": \"binary\",\n        \"bitfield32\": \"binary\",\n        \"bitfield64\": \"binary\",\n        \"enum16\": \"uint16\",\n        \"enum32\": \"uint32\",\n        \"float32\": \"float\",\n        \"float64\": \"double\",\n        \"string\": \"string\",\n        \"sf\": \"int16\",\n        \"pad\": \"hex\",\n        \"ipaddr\": \"hex\",\n        \"ipv6addr\": \"hex\",\n        \"eui48\": \"hex\",\n        \"sunssf\": \"int16\",\n        \"count\": \"hex\"\n    }\n);",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 700,
        "wires": [
            [
                "eda910911c13d875"
            ]
        ]
    },
    {
        "id": "eda910911c13d875",
        "type": "join",
        "z": "da1113f849ed321d",
        "name": "Join Together",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 920,
        "y": 700,
        "wires": [
            [
                "963622792cb5d87c"
            ]
        ]
    },
    {
        "id": "963622792cb5d87c",
        "type": "change",
        "z": "da1113f849ed321d",
        "name": "Setup Parsing Specs",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "specs.items",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "specs.options",
                "pt": "msg",
                "to": "{\"resultType\": \"object\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 760,
        "wires": [
            [
                "206b19fce412bd6a"
            ]
        ]
    },
    {
        "id": "206b19fce412bd6a",
        "type": "buffer-parser",
        "z": "da1113f849ed321d",
        "name": "Parse Buffer",
        "data": "buffer",
        "dataType": "msg",
        "specification": "specs",
        "specificationType": "msg",
        "items": [
            {
                "type": "int16be",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 430,
        "y": 760,
        "wires": [
            [
                "97b4da4af4853663"
            ]
        ]
    },
    {
        "id": "d816f3aeda77da32",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Cleanup",
        "func": "\n// Remove everything besides values\nmsg._msg.payload = {};\nfor (const [name, reg] of Object.entries(msg.objectResults)) {\n    msg._msg.payload[name] = reg.value;\n}\n\nreturn msg._msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "97b4da4af4853663",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Post Process",
        "func": "\nfor (const [_, reg] of Object.entries(msg.objectResults)) {\n\n    // enumeration\n    if (reg.realType.startsWith('enum')) {\n        for (let i = 0; i < reg.symbols.length; i++) {\n            if (reg.value === reg.symbols[i].value) {\n                reg.value = reg.symbols[i].name;\n                break;\n            }\n        }\n    }\n\n    // bitfields\n    if (reg.realType.startsWith('bitfield')) {\n        let bits = reg.value\n            .split('')\n            .map(char => {\n                return char.charCodeAt(0).toString(2);\n            })\n            .join('');\n        reg.value = [];\n        for (let i = 0; i < reg.symbols.length; i++) {\n            if (bits[reg.symbols[i].value] === '1')\n                reg.value.push(reg.symbols[i].name);\n        }\n    }\n\n    // scaling/offset\n    if (reg.adjust && typeof reg.value !== 'number') continue;\n    if (reg.adjust?.scale) reg.value *= reg.adjust.scale;\n    if (reg.adjust?.offset) reg.value += reg.adjust.offset;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "d816f3aeda77da32"
            ]
        ]
    },
    {
        "id": "b096170aff307553",
        "type": "switch",
        "z": "da1113f849ed321d",
        "name": "",
        "property": "msg",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "hask",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 260,
        "wires": [
            [
                "ce460bc93b130aba"
            ],
            [
                "57c7937d62af51ab"
            ]
        ]
    },
    {
        "id": "ce460bc93b130aba",
        "type": "function",
        "z": "da1113f849ed321d",
        "name": "Error",
        "func": "\nnode.error(`Modbus fail: '${msg.error}'`);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 320,
        "wires": []
    },
    {
        "id": "45aaaa4ea40c6d3b",
        "type": "switch",
        "z": "60b9353837f41409",
        "name": "Check if HTTP Request",
        "property": "msg",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "hask",
                "v": "res",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "d070cd5d84a6c341"
            ],
            [
                "32bcea22be21f563"
            ]
        ]
    },
    {
        "id": "97e376d31f8e28b6",
        "type": "catch",
        "z": "60b9353837f41409",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 280,
        "wires": [
            [
                "aab4782a08713728",
                "816acf4343e53f9e",
                "53cb936137689734"
            ]
        ]
    },
    {
        "id": "d070cd5d84a6c341",
        "type": "function",
        "z": "60b9353837f41409",
        "name": "Register Subscriber",
        "func": "\n// Get ready for connection closing\nconst callback = () => {\n\n    if (msg.res._res.finished) {\n        node.error(\"how was this possible\");\n        return;\n    }\n\n    node.log(`Client disconnected: ${msg._msgid}`);\n    msg.res._res.write('event: close\\n');\n    msg.res._res.write(`data: The connection was closed by the server.\\n`);\n    msg.res._res.write(`id: ${msg._msgid}\\n\\n`);\n    msg.res._res.end();\n\n    flow.set('subscribers', flow.get('subscribers').filter(sub => {\n        return sub.id !== msg._msgid;\n    }));\n\n    flow.get('updateStatus')('success');\n};\nlet test = msg.res._res.req.once('close', callback);\n\n// Track subscribers\nlet old = flow.get('subscribers');\nold.push({\n    id: msg._msgid,\n    socket: msg.res,\n    callback: callback\n});\nflow.set('subscribers', old);\n\n// Update status\nflow.get('updateStatus')('success');\n\n// HTTP response for SSE\n// Using an HTTP response node won't work\n// As it closes the connection seemingly\nmsg.res._res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    Connection: 'keep-alive',\n});\nmsg.res._res.write(\n    'event: open\\n' +\n    `data: ${JSON.stringify(msg.payload || 'Connection opened')}\\n` +\n    `id: ${msg._msgid}\\n\\n`\n);\n\nnode.log(`Client connected: ${msg._msgid}`);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set('subscribers', []);",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\n// Close all connections on re-deploy\nlet subs = flow.get('subscribers');\nfor (let i = 0; i < subs.length; i++) {\n\n    let sub = subs[i];\n    node.warn(`Forced client disconnect: ${sub.id}`);\n\n    sub.socket._res.req.removeListener('close', sub.callback);\n    sub.socket._res.write('event: close\\n');\n    sub.socket._res.write(`data: The connection was closed by the server.\\n`);\n    sub.socket._res.write(`id: ${sub.id}\\n\\n`);\n    sub.socket._res.end();\n\n}",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "53cb936137689734",
        "type": "function",
        "z": "60b9353837f41409",
        "name": "Update Status",
        "func": "\nflow.get('updateStatus')('fail');\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 340,
        "wires": []
    },
    {
        "id": "6b20285b086be858",
        "type": "http response",
        "z": "60b9353837f41409",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 520,
        "y": 280,
        "wires": []
    },
    {
        "id": "7ffcef4a76897296",
        "type": "function",
        "z": "60b9353837f41409",
        "name": "Update Status",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set('updateStatus', (type) => {\n    node.send({\n        status: {\n            fill: type === \"success\" ? 'green' : 'red',\n            shape: 'dot',\n            text: `${flow.get(\"subscribers\").length} client(s) connected`\n        }\n    });\n});",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "aab4782a08713728",
        "type": "function",
        "z": "60b9353837f41409",
        "name": "Log Error",
        "func": "\nnode.error(\"sse error\", msg.error);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 400,
        "wires": []
    },
    {
        "id": "816acf4343e53f9e",
        "type": "switch",
        "z": "60b9353837f41409",
        "name": "Check if HTTP Request",
        "property": "msg",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "hask",
                "v": "res",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "6b20285b086be858"
            ]
        ]
    },
    {
        "id": "32bcea22be21f563",
        "type": "function",
        "z": "60b9353837f41409",
        "name": "Write Data",
        "func": "const event = `${env.get('event') || 'message'}`;\nconst data = `${JSON.stringify(env.get('data') || msg.payload)}`;\n\nnode.log(`Sending ${event} to ${flow.get('subscribers').length} subs`);\n\nflow.get('subscribers').forEach((sub) => {\n    sub.socket._res.write(`event: ${event}\\n`);\n    sub.socket._res.write(`data: ${data}\\n`);\n    sub.socket._res.write(`id: ${msg._msgid}\\n\\n`);\n});",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "19c730a6eabb37ef",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "fixed",
        "sql": "INSERT INTO Device (\n    Id, Name, Address, PowerType\n) Values (\n    1, \"Testwall WattNode\", \"http://100.113.203.142:1880/wattnode/status\", \"ac\"\n);",
        "name": "",
        "x": 470,
        "y": 1100,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "da6360578ab5087f",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{\"$id\":-1,\"$watts\":420}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "19c730a6eabb37ef"
            ]
        ]
    },
    {
        "id": "51af04274c5bb5b5",
        "type": "debug",
        "z": "060240745de70bc6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6361a6c24c243d3d",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "d2848eee44bc6894"
            ]
        ]
    },
    {
        "id": "d2848eee44bc6894",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT name FROM sqlite_schema WHERE type='table' ORDER BY name;",
        "name": "Check Tables",
        "x": 480,
        "y": 1160,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ],
        "info": "CREATE TABLE PowerAC (\r\n    Id INT,\r\n    Timestamp TEXT,\r\n    Volts FLOAT,\r\n    Amps FLOAT,\r\n    Watts FLOAT,\r\n    WattHours FLOAT,\r\n    PRIMARY KEY(Id, Timestamp)\r\n);\r\nCREATE TABLE PowerDC (\r\n    Id INT,\r\n    Timestamp TEXT,\r\n    Volts FLOAT,\r\n    Amps FLOAT,\r\n    Watts FLOAT,\r\n    WattHours FLOAT,\r\n    PRIMARY KEY(Id, Timestamp)\r\n);\r\nCREATE TABLE Battery (\r\n    Id INT,\r\n    Timestamp TEXT,\r\n    Voltage FLOAT,\r\n    SOC FLOAT,\r\n    Health FLOAT,\r\n    State TEXT,\r\n    PRIMARY KEY(Id, Timestamp)\r\n);\r\nCREATE TABLE Device (\r\n    Id INT,\r\n    Name TEXT,\r\n    Address TEXT,\r\n    PowerType TEXT,\r\n    PRIMARY KEY(Id)\r\n);"
    },
    {
        "id": "6be7e8ffc2b18fa2",
        "type": "comment",
        "z": "060240745de70bc6",
        "name": "Service Description",
        "info": "Describes the logging service (basically a REST API).\n\n## **Definitions:**\n`category`: A type of data, either:\n- `power`\n- `battery`\n\n`id`: A device identifier. Must be positive. -1 is reserved for testing.\n\n## **Interfaces:**\n### POST /log/record\nRecord data into the logs.  \nFormat: `/log/record/[category]/[id]`\n\n### GET /log/read\nRead data from the logs.  \nFormat: `/log/read/[category]/[id]`\n\n### GET /log/status\nGet the connection status of a device.  \nFormat: `/log/status/[id]`\n\n### POST /log/register\nRegister a device with an API endpoint.  \nFormat: `/log/register/[id]`\n\n### GET /log/registered\nCheck if a device is registered.  \nFormat: `/log/registered/[id]`",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "96f99957b5071c89",
        "type": "http in",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "POST /log/record",
        "url": "/log/record/:category/:id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "36f3b8db5fa30706"
            ]
        ]
    },
    {
        "id": "476df1a222398ed7",
        "type": "http in",
        "z": "060240745de70bc6",
        "name": "GET /log/read",
        "url": "/log/read/:category/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "c17aeb6872cdad76"
            ]
        ],
        "info": "# POST /log/read\r\nRead device data from the log.\r\n\r\n### URL Format\r\nThe request URL must be in the following formats.\r\n- `/log/read/[category]/[id]` - `[category]` is\r\na logging category name and `[id]` is a registered\r\ndevice id\r\n\r\n### Request Parameters\r\n- `start` - the start date and time to get results after\r\n- `end` - the end date and time to get results before\r\n- `filter` - a list of item types to include such as `[watts,watthours]`\r\n- `interval` - the interval at which to retrieve data\r\n\r\n### Procedure\r\n1. Recieve request\r\n2. Check if category exists and device exists\r\n3. Verify device has data for the category\r\n4. \r\n\r\n### Responses\r\n- `404` - Unknown category\r\n- `404` - Unknown device id\r\n- `400` - Invalid category for device\r\n- `400` - Invalid values for category\r\n- `500` - Internal error when writing to SQL database\r\n- `200` - Success  \r\nThe body of the message will contain the timestamp of\r\nthe recorded data, the device id and the device name."
    },
    {
        "id": "dcf90db21725757d",
        "type": "http in",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "GET /log/status",
        "url": "/log/status/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "6c449fd564a9ecd2"
            ]
        ]
    },
    {
        "id": "4fdcdd1aaf2cc630",
        "type": "http in",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "POST /log/register",
        "url": "/log/register",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 620,
        "wires": [
            [
                "3431e4fa78349449"
            ]
        ]
    },
    {
        "id": "7af68148ed617c49",
        "type": "http in",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "GET /log/info",
        "url": "/log/info/:id?",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 860,
        "wires": [
            [
                "085c4ad6a27bef27"
            ]
        ]
    },
    {
        "id": "50653faa4c685ac1",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "CREATE TABLE PowerDC (\n    Id INT,\n    Timestamp TEXT,\n    Volts FLOAT,\n    Amps FLOAT,\n    Watts FLOAT,\n    WattHours FLOAT,\n    PRIMARY KEY(Id, Timestamp)\n);",
        "name": "PowerDC",
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "09c1ece3762367c4",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "CREATE TABLE Battery (\n    Id INT,\n    Timestamp TEXT,\n    Voltage FLOAT,\n    SOC FLOAT,\n    Health FLOAT,\n    State TEXT,\n    PRIMARY KEY(Id, Timestamp)\n);",
        "name": "Battery",
        "x": 460,
        "y": 1300,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "89e5131385c10783",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "CREATE TABLE Device (\n    Id INT,\n    Name TEXT,\n    Address TEXT,\n    PowerType TEXT,\n    PRIMARY KEY(Id)\n);",
        "name": "Device",
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "51d0c0185995205b",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "CREATE TABLE PowerAC (\n    Id INT,\n    Timestamp TEXT,\n    Volts FLOAT,\n    Amps FLOAT,\n    Watts FLOAT,\n    WattHours FLOAT,\n    PRIMARY KEY(Id, Timestamp)\n);",
        "name": "PowerAC",
        "x": 460,
        "y": 1220,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "fca7083ebe0e8499",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1220,
        "wires": [
            [
                "50653faa4c685ac1",
                "09c1ece3762367c4",
                "89e5131385c10783",
                "51d0c0185995205b"
            ]
        ]
    },
    {
        "id": "144b8ea4e032c046",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "DELETE FROM PowerAC;",
        "name": "Change Things",
        "x": 480,
        "y": 1400,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "a5cb9904515322dd",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1400,
        "wires": [
            [
                "144b8ea4e032c046"
            ]
        ]
    },
    {
        "id": "47d5ec2e29f4a75c",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "Parse Id",
        "func": "msg.params = {\n    '$id': parseInt(msg.req.params.id)\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 860,
        "wires": [
            [
                "de7e2ba1bf229849"
            ]
        ]
    },
    {
        "id": "af2fdf8df365932d",
        "type": "http response",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1590,
        "y": 860,
        "wires": []
    },
    {
        "id": "085c4ad6a27bef27",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "Have Id Param?",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "undefined",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "514a5906c8c36ed5"
            ],
            [
                "f00f48fb83236220"
            ]
        ]
    },
    {
        "id": "f00f48fb83236220",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "mydb": "7426633e02a085fd",
        "sqlquery": "fixed",
        "sql": "SELECT Id FROM Device;",
        "name": "Get Device Ids",
        "x": 680,
        "y": 980,
        "wires": [
            [
                "1467fa61be5516c4"
            ]
        ]
    },
    {
        "id": "1467fa61be5516c4",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "Wrap Id Array",
        "func": "let ret = [];\nfor (var obj of msg.payload) {\n    ret.push(obj.Id);\n}\nmsg.payload = {\n    \"ids\": ret\n};\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 980,
        "wires": [
            [
                "321214cff9ac19e7"
            ]
        ]
    },
    {
        "id": "514a5906c8c36ed5",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "Id is Number?",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[0-9]+$",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 860,
        "wires": [
            [
                "47d5ec2e29f4a75c"
            ],
            [
                "8a64b210bb419880"
            ]
        ]
    },
    {
        "id": "8a64b210bb419880",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "",
        "x": 890,
        "y": 920,
        "wires": []
    },
    {
        "id": "321214cff9ac19e7",
        "type": "http response",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 980,
        "wires": []
    },
    {
        "id": "de7e2ba1bf229849",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT Name, PowerType\nFROM Device\nWHERE Id=$id;",
        "name": "Get Device Info",
        "x": 1040,
        "y": 860,
        "wires": [
            [
                "e74a7937f9a8b10f"
            ]
        ]
    },
    {
        "id": "e74a7937f9a8b10f",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "Device Exists?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1240,
        "y": 860,
        "wires": [
            [
                "9c0608e9f8a9a204"
            ],
            [
                "75b2f8d3b8dafc8f"
            ]
        ]
    },
    {
        "id": "9c0608e9f8a9a204",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "Wrap Result",
        "func": "msg.payload = msg.payload[0];\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 860,
        "wires": [
            [
                "af2fdf8df365932d"
            ]
        ]
    },
    {
        "id": "75b2f8d3b8dafc8f",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "g": "e7875e2de9c03017",
        "name": "",
        "x": 1450,
        "y": 920,
        "wires": []
    },
    {
        "id": "6c449fd564a9ecd2",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Id is Number?",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[0-9]+$",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 440,
        "wires": [
            [
                "4fd4e576a66823ba"
            ],
            [
                "8943f005652f4bb1"
            ]
        ]
    },
    {
        "id": "8943f005652f4bb1",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "4fd4e576a66823ba",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Parse Id",
        "func": "msg.params = {\n    '$id': parseInt(msg.req.params.id)\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 440,
        "wires": [
            [
                "653a20d09b8b8699"
            ]
        ]
    },
    {
        "id": "a7dcaa9b3e542b70",
        "type": "http request",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Request Status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1520,
        "y": 440,
        "wires": [
            [
                "3a31511fa94e9129"
            ]
        ]
    },
    {
        "id": "ad0aa214fde7a3a9",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Format Request",
        "func": "msg.url = msg.payload[0].Address;\nmsg.deviceName = msg.payload[0].Name;\nmsg.payload = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 440,
        "wires": [
            [
                "a7dcaa9b3e542b70"
            ]
        ]
    },
    {
        "id": "653a20d09b8b8699",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT Name, Address\nFROM Device\nWHERE Id=$id;",
        "name": "Get Connection Address",
        "x": 890,
        "y": 440,
        "wires": [
            [
                "0c01c1f85f9c26bc"
            ]
        ]
    },
    {
        "id": "89c0dfd5fcba393b",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{\"$id\":-1,\"$watts\":420}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1460,
        "wires": [
            [
                "cc9e9b385bb1c2db"
            ]
        ]
    },
    {
        "id": "cc9e9b385bb1c2db",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "fixed",
        "sql": "UPDATE Device\nSET Address=\"http://localhost:1880/wattnode/status\"\nWHERE Id=1;",
        "name": "",
        "x": 470,
        "y": 1460,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "0c01c1f85f9c26bc",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Device Exists?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1120,
        "y": 440,
        "wires": [
            [
                "ad0aa214fde7a3a9"
            ],
            [
                "ae7baee6b8c03746"
            ]
        ]
    },
    {
        "id": "ae7baee6b8c03746",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "",
        "x": 1330,
        "y": 500,
        "wires": []
    },
    {
        "id": "3a31511fa94e9129",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Check Status Code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 440,
        "wires": [
            [
                "861c36e9da5cc731"
            ],
            [
                "986ab8e0bcd62ccf"
            ]
        ]
    },
    {
        "id": "986ab8e0bcd62ccf",
        "type": "subflow:c625d94296a71599",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Failed to get device status.",
                "type": "str"
            },
            {
                "name": "logmsg",
                "value": "Error with Device Status:",
                "type": "str"
            }
        ],
        "x": 1950,
        "y": 500,
        "wires": []
    },
    {
        "id": "861c36e9da5cc731",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "Check Response Format",
        "func": "// JSON parse failed\nif (typeof msg.payload === 'string') return [null, msg];\n\nif (!('status' in msg.payload)) return [null, msg];\n\nlet ret;\n\nswitch (msg.payload.status) {\n    case 'fail':\n    case 'connected':\n        ret = msg.payload.status;\n        break;\n    default:\n        return [null, msg];\n}\nmsg.payload = {\n    'device': msg.deviceName,\n    'status': ret\n};\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 440,
        "wires": [
            [
                "fafe070557d0a9c8"
            ],
            [
                "e438baf5e34ece62"
            ]
        ]
    },
    {
        "id": "e438baf5e34ece62",
        "type": "subflow:c625d94296a71599",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Device status response malformed.",
                "type": "str"
            },
            {
                "name": "logmsg",
                "value": "Error with Device Status:",
                "type": "str"
            }
        ],
        "x": 2210,
        "y": 500,
        "wires": []
    },
    {
        "id": "fafe070557d0a9c8",
        "type": "http response",
        "z": "060240745de70bc6",
        "g": "9a4c8c642f90b5f9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2170,
        "y": 440,
        "wires": []
    },
    {
        "id": "cf25a28af42ce908",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1520,
        "wires": [
            [
                "7c06c26b868ebfe6"
            ]
        ]
    },
    {
        "id": "3431e4fa78349449",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Validate Parameters",
        "func": "msg.insertParams = {};\n\nif (!('name' in msg.payload)) return [null, msg];\nmsg.insertParams[\"$name\"] = msg.payload.name;\n\nif (!('address' in msg.payload)) return [null, msg];\nmsg.insertParams[\"$address\"] = msg.payload.address;\nmsg.url = msg.payload.address;\n\nif (!('powertype' in msg.payload)) return [null, msg];\nswitch (msg.payload.powertype) {\n    case 'acdc':\n    case 'ac':\n    case 'dc':\n    case 'none':\n        msg.insertParams[\"$pt\"] = msg.payload.powertype;\n        break;\n    default:\n        return [null, msg];\n}\n\nmsg.payload = undefined;\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "cebb5660f8fa4666"
            ],
            [
                "4ae0d4cced67a221"
            ]
        ]
    },
    {
        "id": "cebb5660f8fa4666",
        "type": "http request",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Request Status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 760,
        "y": 620,
        "wires": [
            [
                "e937f95755f0aea3"
            ]
        ]
    },
    {
        "id": "e937f95755f0aea3",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Check Status Code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 620,
        "wires": [
            [
                "29a8b67e75c87ff3"
            ],
            [
                "bc223d5c956d8dac"
            ]
        ]
    },
    {
        "id": "29a8b67e75c87ff3",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Check Response Format",
        "func": "// JSON parse failed\nif (typeof msg.payload === 'string') return [null, msg];\n\nif (!('status' in msg.payload)) return [null, msg];\n\nswitch (msg.payload.status) {\n    case 'fail':\n    case 'connected':\n        break;\n    default:\n        return [null, msg];\n}\n\nmsg.payload = undefined;\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 620,
        "wires": [
            [
                "0b35f57da62bc11b"
            ],
            [
                "68bc76ec11fdafee"
            ]
        ]
    },
    {
        "id": "0b35f57da62bc11b",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Generate Id",
        "func": "// Generate random id\nif (msg.payload === undefined || msg.payload.length > 0) {\n    msg.params = {\n        '$id': Math.floor(Math.random() * 999)\n    };\n    return [null, msg];\n}\n\nmsg.params = {\n    ...msg.params,\n    ...msg.insertParams\n};\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 620,
        "wires": [
            [
                "22e4d983d6f09553"
            ],
            [
                "299b7d608855aa7a"
            ]
        ]
    },
    {
        "id": "22e4d983d6f09553",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "INSERT INTO Device\n(Id, Name, Address, PowerType)\nVALUES\n($id, $name, $address, $pt);",
        "name": "Record Device",
        "x": 1620,
        "y": 620,
        "wires": [
            [
                "25f3a83e48519a95"
            ]
        ]
    },
    {
        "id": "a24736a631d53c6a",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT *\nFROM Device\nWHERE Id=$id;",
        "name": "Check Record",
        "x": 2000,
        "y": 620,
        "wires": [
            [
                "a493908c90418cda"
            ]
        ]
    },
    {
        "id": "a493908c90418cda",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Verify Recorded",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2200,
        "y": 620,
        "wires": [
            [
                "d006e5721410794e"
            ],
            [
                "388612334105d9ab"
            ]
        ]
    },
    {
        "id": "d006e5721410794e",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Wrap Response",
        "func": "msg.payload = {\n    'id': msg.payload[0].Id,\n    'name': msg.payload[0].Name,\n    'address': msg.payload[0].Address,\n    'powertype': msg.payload[0].PowerType\n};\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 620,
        "wires": [
            [
                "3141cf159d9fe3aa"
            ]
        ]
    },
    {
        "id": "3141cf159d9fe3aa",
        "type": "http response",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2570,
        "y": 620,
        "wires": []
    },
    {
        "id": "4ae0d4cced67a221",
        "type": "subflow:2dcb06cda48677d7",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Request body invalid.",
                "type": "str"
            }
        ],
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "bc223d5c956d8dac",
        "type": "subflow:2dcb06cda48677d7",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Device URL address failed to respond.",
                "type": "str"
            }
        ],
        "x": 1190,
        "y": 680,
        "wires": []
    },
    {
        "id": "68bc76ec11fdafee",
        "type": "subflow:2dcb06cda48677d7",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Device status response malformed.",
                "type": "str"
            }
        ],
        "x": 1460,
        "y": 740,
        "wires": []
    },
    {
        "id": "388612334105d9ab",
        "type": "subflow:c625d94296a71599",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Failed to write to database.",
                "type": "str"
            },
            {
                "name": "logmsg",
                "value": "Error with SQL write:",
                "type": "str"
            }
        ],
        "x": 2420,
        "y": 680,
        "wires": []
    },
    {
        "id": "299b7d608855aa7a",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "mydb": "7426633e02a085fd",
        "sqlquery": "fixed",
        "sql": "SELECT 1\nFROM Device\nWHERE Id=$id;",
        "name": "Verify Unique Id",
        "x": 1440,
        "y": 680,
        "wires": [
            [
                "0b35f57da62bc11b"
            ]
        ]
    },
    {
        "id": "78dec1742ad8ab7c",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM Device\nWHERE Id=336;",
        "name": "Check Record",
        "x": 480,
        "y": 1580,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ]
    },
    {
        "id": "4611f1f7dcacc646",
        "type": "inject",
        "z": "060240745de70bc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "params",
                "v": "{\"$id\":14}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1580,
        "wires": [
            [
                "78dec1742ad8ab7c"
            ]
        ]
    },
    {
        "id": "7c06c26b868ebfe6",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT * FROM PowerAC LIMIT 200;",
        "name": "See All",
        "x": 460,
        "y": 1520,
        "wires": [
            [
                "51af04274c5bb5b5"
            ]
        ],
        "info": "CREATE TABLE PowerAC (\r\n    Id INT,\r\n    Timestamp TEXT,\r\n    Volts FLOAT,\r\n    Amps FLOAT,\r\n    Watts FLOAT,\r\n    WattHours FLOAT,\r\n    PRIMARY KEY(Id, Timestamp)\r\n);\r\nCREATE TABLE PowerDC (\r\n    Id INT,\r\n    Timestamp TEXT,\r\n    Volts FLOAT,\r\n    Amps FLOAT,\r\n    Watts FLOAT,\r\n    WattHours FLOAT,\r\n    PRIMARY KEY(Id, Timestamp)\r\n);\r\nCREATE TABLE Battery (\r\n    Id INT,\r\n    Timestamp TEXT,\r\n    Voltage FLOAT,\r\n    SOC FLOAT,\r\n    Health FLOAT,\r\n    State TEXT,\r\n    PRIMARY KEY(Id, Timestamp)\r\n);\r\nCREATE TABLE Device (\r\n    Id INT,\r\n    Name TEXT,\r\n    Address TEXT,\r\n    PowerType TEXT,\r\n    PRIMARY KEY(Id)\r\n);"
    },
    {
        "id": "25f3a83e48519a95",
        "type": "change",
        "z": "060240745de70bc6",
        "g": "f1ccc8bd2ac54d97",
        "name": "Set up Query",
        "rules": [
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "{'$id':msg.params.`$id`}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1810,
        "y": 620,
        "wires": [
            [
                "a24736a631d53c6a"
            ]
        ]
    },
    {
        "id": "a9e4fa5dd7c04fbd",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Parse Category",
        "func": "msg.log = {\n    'deviceName': msg.payload[0].Name\n};\n\nswitch (msg.req.params.category) {\n    case 'powerac':\n        msg.log.category = \"PowerAC\";\n        break;\n    case 'powerdc':\n        msg.log.category = \"PowerDC\";\n        break;\n    case 'battery':\n        msg.log.category = \"Battery\";\n        break;\n    default:\n        return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "3365ddb2fede8b56"
            ],
            [
                "8f860c08121896d9"
            ]
        ]
    },
    {
        "id": "4bfe5a943caf0bd3",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "",
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "b917ac3be5e883c7",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT Name, PowerType\nFROM Device\nWHERE Id=$id;",
        "name": "Get Device Name",
        "x": 870,
        "y": 260,
        "wires": [
            [
                "723ef3bd1c68f81a"
            ]
        ]
    },
    {
        "id": "723ef3bd1c68f81a",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Device Exists?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "a9e4fa5dd7c04fbd"
            ],
            [
                "8f860c08121896d9"
            ]
        ]
    },
    {
        "id": "7ff4163166824f35",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Validate PowerAC",
        "func": "msg.valid = false;\nlet isISODate = flow.get('isISODate');\nlet isFloat = flow.get('isFloat');\n\n// Timestamp\nif (!isISODate(msg.req.body.timestamp)) {\n    return msg;\n} else {\n    msg.params.$timestamp = msg.req.body.timestamp;\n}\n\n// Volts\nif ('volts' in msg.req.body && !isFloat(msg.req.body.volts)) {\n    return msg;\n} else if ('volts' in msg.req.body) {\n    msg.params.$volts = parseFloat(msg.req.body.volts);\n    if (msg.params.$volts < 0) return msg;\n}\n\n// Amps\nif ('amps' in msg.req.body && !isFloat(msg.req.body.amps)) {\n    return msg;\n} else if ('amps' in msg.req.body) {\n    msg.params.$amps = parseFloat(msg.req.body.amps);\n}\n\n// Watts\nif ('watts' in msg.req.body && !isFloat(msg.req.body.watts)) {\n    return msg;\n} else if ('watts' in msg.req.body) {\n    msg.params.$watts = parseFloat(msg.req.body.watts);\n}\n\n// Watthours\nif ('watthours' in msg.req.body && !isFloat(msg.req.body.watthours)) {\n    return msg;\n} else if ('watthours' in msg.req.body) {\n    msg.params.$watthours = parseFloat(msg.req.body.watthours);\n}\n\n// Must include at least volts and amps or watts\nif (!((('$volts' in msg.params) && ('$amps' in msg.params)) || ('$watts' in msg.params))) {\n    return msg;\n}\n\n// Account for optional parameters\nif (!('$volts' in msg.params)) msg.params.$volts = 0;\nif (!('$amps' in msg.params)) msg.params.$amps = 0;\nif (!('$watts' in msg.params)) msg.params.$watts = 0;\nif (!('$watthours' in msg.params)) msg.params.$watthours = 0;\n\nmsg.valid = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n/**\n* @param {string} str\n*/\nfunction isISODate(str) {\n    if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(str)) return false;\n    const d = new Date(str);\n    return d instanceof Date && !isNaN(d.getTime()) && d.toISOString() === str; // valid date \n}\nflow.set('isISODate', isISODate);\n\n/**\n * \n */\nfunction isFloat(x) {\n    if (!isNaN(x)) return true;\n    if (/^\\-?[0-9]*\\.?[0-9]+$/.test(x)) return true;\n    return false;\n}\nflow.set('isFloat', isFloat);",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 260,
        "wires": [
            [
                "933f379216a90879"
            ]
        ]
    },
    {
        "id": "8f860c08121896d9",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "",
        "x": 1300,
        "y": 320,
        "wires": []
    },
    {
        "id": "3365ddb2fede8b56",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Validate Category",
        "func": "let ret = false;\nswitch (msg.payload[0].PowerType) {\n    case 'acdc':\n        ret = true;\n        break;\n    case 'ac':\n        ret = (msg.log.category === \"PowerAC\");\n        break;\n    case 'dc':\n        ret = (msg.log.category === \"PowerDC\");\n        break;\n    case 'none':\n        ret = (msg.log.category != \"PowerAC\" && msg.log.category != \"PowerDC\");\n        break;\n}\n\nif (!ret) return [null, msg];\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 260,
        "wires": [
            [
                "8190129e7c5f717a"
            ],
            [
                "fd9bc06971cb7d34"
            ]
        ]
    },
    {
        "id": "fd9bc06971cb7d34",
        "type": "subflow:2dcb06cda48677d7",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Category incompatible with device.",
                "type": "str"
            }
        ],
        "x": 1720,
        "y": 320,
        "wires": []
    },
    {
        "id": "6d1a2f27d0eabb46",
        "type": "subflow:2dcb06cda48677d7",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Invalid values for category.",
                "type": "str"
            }
        ],
        "x": 2380,
        "y": 320,
        "wires": []
    },
    {
        "id": "430f966847abe48c",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "mydb": "7426633e02a085fd",
        "sqlquery": "msg.topic",
        "sql": "SELECT *\nFROM $category\nWHERE Id=$id AND Timestamp=$timestamp;",
        "name": "Check Record",
        "x": 3140,
        "y": 260,
        "wires": [
            [
                "2322c598d49e45cd"
            ]
        ]
    },
    {
        "id": "18270af3f52bdf02",
        "type": "string",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Parse Id",
        "methods": [
            {
                "name": "toInteger",
                "params": []
            }
        ],
        "prop": "req.params.id",
        "propout": "params.$id",
        "object": "msg",
        "objectout": "msg",
        "x": 680,
        "y": 260,
        "wires": [
            [
                "b917ac3be5e883c7"
            ]
        ]
    },
    {
        "id": "36f3b8db5fa30706",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Id is Number?",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[0-9]+$",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 260,
        "wires": [
            [
                "18270af3f52bdf02"
            ],
            [
                "4bfe5a943caf0bd3"
            ]
        ]
    },
    {
        "id": "8190129e7c5f717a",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Switch on Log Category",
        "property": "log.category",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PowerAC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PowerDC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Battery",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1730,
        "y": 260,
        "wires": [
            [
                "7ff4163166824f35"
            ],
            [
                "7ff4163166824f35"
            ],
            [
                "b5414f660bf6f02c"
            ]
        ]
    },
    {
        "id": "933f379216a90879",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Check Valid",
        "property": "valid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2170,
        "y": 260,
        "wires": [
            [
                "d7570cfbdd465a92"
            ],
            [
                "6d1a2f27d0eabb46"
            ]
        ]
    },
    {
        "id": "b5414f660bf6f02c",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Validate Battery",
        "func": "msg.valid = false;\nlet isISODate = flow.get('isISODate');\nlet isFloat = flow.get('isFloat');\n\n// Timestamp\nif (!isISODate(msg.req.body.timestamp)) {\n    return msg;\n} else {\n    msg.params.$timestamp = msg.req.body.timestamp;\n}\n\n// Voltage\nif (!isFloat(msg.req.body.voltage)) {\n    return msg;\n} else {\n    msg.params.$voltage = parseFloat(msg.req.body.voltage);\n    if (msg.params.$voltage < 0) return msg;\n}\n\n// SOC\nif ('soc' in msg.req.body && !isFloat(msg.req.body.soc)) {\n    return msg;\n} else if ('soc' in msg.req.body) {\n    msg.params.$soc = parseFloat(msg.req.body.soc);\n    if (msg.params.$soc < 0 || msg.params.$soc > 1) return msg;\n}\n\n// Health\nif ('health' in msg.req.body && !isFloat(msg.req.body.health)) {\n    return msg;\n} else if ('health' in msg.req.body) {\n    msg.params.$health = parseFloat(msg.req.body.health);\n    if (msg.params.$health < 0 || msg.params.$health > 1) return msg;\n}\n\n// State\nswitch (msg.req.body.state) {\n    case 'standby':\n    case 'idle':\n    case 'charging':\n    case 'discharging':\n        msg.params.$state = msg.req.body.state;\n        break;\n    default:\n        return msg;\n}\n\n// Account for optional parameters\nif (!('$soc' in msg.params)) msg.params.$soc = 0;\nif (!('$health' in msg.params)) msg.params.$health = 0;\n\nmsg.valid = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 320,
        "wires": [
            [
                "933f379216a90879"
            ]
        ]
    },
    {
        "id": "d7570cfbdd465a92",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Table Information",
        "func": "switch (msg.log.category) {\n    case 'PowerAC':\n        msg.log.cols = [\"Id\", \"Timestamp\", \"Volts\", \"Amps\", \"Watts\", \"Watthours\"];\n        msg.log.values = [\"$id\", \"$timestamp\", \"$volts\", \"$amps\", \"$watts\", \"$watthours\"];\n        break;\n    case 'PowerDC':\n        msg.log.cols = [\"Id\", \"Timestamp\", \"Volts\", \"Amps\", \"Watts\", \"Watthours\"];\n        msg.log.values = [\"$id\", \"$timestamp\", \"$volts\", \"$amps\", \"$watts\", \"$watthours\"];\n        break;\n    case 'Battery':\n        msg.log.cols = [\"Id\", \"Timestamp\", \"Voltage\", \"SOC\", \"Health\", \"State\"];\n        msg.log.values = [\"$id\", \"$timestamp\", \"$voltage\", \"$soc\", \"$health\", \"$state\"];\n        break;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 260,
        "wires": [
            [
                "91f4422cae6d79f5"
            ]
        ]
    },
    {
        "id": "89070e322dc5035d",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "mydb": "7426633e02a085fd",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO PowerAC\n(Id, Timestamp, Volts, Amps, Watts, Watthours)\nValues\n($id, $timestamp, $volts, $amps, $watts, $watthours);",
        "name": "Record Values",
        "x": 2760,
        "y": 260,
        "wires": [
            [
                "c7c4cbe8daa21e8a"
            ]
        ]
    },
    {
        "id": "c7c4cbe8daa21e8a",
        "type": "change",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Set up Query",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$join(['SELECT * FROM', msg.log.category, 'WHERE Id=$id AND Timestamp=$timestamp;'], ' ')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$map(msg.log.values[[0..1]], function($v) {$lookup(msg.params, $v)})",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2950,
        "y": 260,
        "wires": [
            [
                "430f966847abe48c"
            ]
        ]
    },
    {
        "id": "91f4422cae6d79f5",
        "type": "change",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Set up Query",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$join(\t    ['INSERT INTO ',\t    msg.log.category,\t    ' (',\t    $join(msg.log.cols, ', '),\t    ') VALUES (',\t    $join(msg.log.values, ', '),\t    ');'],\t    '')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$map(msg.log.values, function($v) {$lookup(msg.params, $v)})",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2570,
        "y": 260,
        "wires": [
            [
                "89070e322dc5035d"
            ]
        ]
    },
    {
        "id": "34a2aa1c6dc52269",
        "type": "function",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Wrap Response",
        "func": "msg.payload = {\n    'id': msg.payload[0].Id,\n    'name': msg.log.deviceName,\n    'timestamp': msg.payload[0].Timestamp\n};\nmsg.statusCode = 201;\nmsg.headers = undefined;\nmsg.cookies = undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3540,
        "y": 260,
        "wires": [
            [
                "6c49b36440883348"
            ]
        ]
    },
    {
        "id": "2322c598d49e45cd",
        "type": "switch",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "Verify Recorded",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3340,
        "y": 260,
        "wires": [
            [
                "34a2aa1c6dc52269"
            ],
            [
                "392a19925a0c9b2a"
            ]
        ]
    },
    {
        "id": "392a19925a0c9b2a",
        "type": "subflow:c625d94296a71599",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Failed to write to database.",
                "type": "str"
            },
            {
                "name": "logmsg",
                "value": "Error with SQL write:",
                "type": "str"
            }
        ],
        "x": 3560,
        "y": 320,
        "wires": []
    },
    {
        "id": "6c49b36440883348",
        "type": "http response",
        "z": "060240745de70bc6",
        "g": "9f9ce2cd5a2131c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3710,
        "y": 260,
        "wires": []
    },
    {
        "id": "c17aeb6872cdad76",
        "type": "switch",
        "z": "060240745de70bc6",
        "name": "Id is Number?",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[0-9]+$",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 120,
        "wires": [
            [
                "e25dda72874ecf22"
            ],
            [
                "e347e72e26d1e067"
            ]
        ]
    },
    {
        "id": "e25dda72874ecf22",
        "type": "string",
        "z": "060240745de70bc6",
        "name": "Parse Id",
        "methods": [
            {
                "name": "toInteger",
                "params": []
            }
        ],
        "prop": "req.params.id",
        "propout": "params.$id",
        "object": "msg",
        "objectout": "msg",
        "x": 660,
        "y": 120,
        "wires": [
            [
                "a14e486152d011a5"
            ]
        ]
    },
    {
        "id": "a14e486152d011a5",
        "type": "sqlite",
        "z": "060240745de70bc6",
        "mydb": "7426633e02a085fd",
        "sqlquery": "prepared",
        "sql": "SELECT Name, PowerType\nFROM Device\nWHERE Id=$id;",
        "name": "Get Device Name",
        "x": 850,
        "y": 120,
        "wires": [
            [
                "fb7271faba7a1ab1"
            ]
        ]
    },
    {
        "id": "fb7271faba7a1ab1",
        "type": "switch",
        "z": "060240745de70bc6",
        "name": "Device Exists?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "102792648e59dd9a"
            ],
            [
                "adf353c229c8485a"
            ]
        ]
    },
    {
        "id": "adf353c229c8485a",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "name": "",
        "x": 1280,
        "y": 180,
        "wires": []
    },
    {
        "id": "102792648e59dd9a",
        "type": "function",
        "z": "060240745de70bc6",
        "name": "Parse Category",
        "func": "msg.log = {\n    'deviceName': msg.payload[0].Name\n};\n\nswitch (msg.req.params.category) {\n    case 'powerac':\n        msg.log.category = \"PowerAC\";\n        break;\n    case 'powerdc':\n        msg.log.category = \"PowerDC\";\n        break;\n    case 'battery':\n        msg.log.category = \"Battery\";\n        break;\n    default:\n        return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "406cbf783c7d914a"
            ],
            [
                "adf353c229c8485a"
            ]
        ]
    },
    {
        "id": "406cbf783c7d914a",
        "type": "function",
        "z": "060240745de70bc6",
        "name": "Validate Category",
        "func": "let ret = false;\nswitch (msg.payload[0].PowerType) {\n    case 'acdc':\n        ret = true;\n        break;\n    case 'ac':\n        ret = (msg.log.category === \"PowerAC\");\n        break;\n    case 'dc':\n        ret = (msg.log.category === \"PowerDC\");\n        break;\n    case 'none':\n        ret = (msg.log.category != \"PowerAC\" && msg.log.category != \"PowerDC\");\n        break;\n}\n\nif (!ret) return [null, msg];\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 120,
        "wires": [
            [],
            [
                "98bee7a27186b16f"
            ]
        ]
    },
    {
        "id": "98bee7a27186b16f",
        "type": "subflow:2dcb06cda48677d7",
        "z": "060240745de70bc6",
        "name": "",
        "env": [
            {
                "name": "errormsg",
                "value": "Category incompatible with device.",
                "type": "str"
            }
        ],
        "x": 1700,
        "y": 180,
        "wires": []
    },
    {
        "id": "e347e72e26d1e067",
        "type": "subflow:ca2cbf00c7f20f50",
        "z": "060240745de70bc6",
        "name": "",
        "x": 700,
        "y": 180,
        "wires": []
    },
    {
        "id": "04b92fcc79bf902a",
        "type": "batch",
        "z": "060240745de70bc6",
        "name": "",
        "mode": "concat",
        "count": 10,
        "overlap": 0,
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [
            {
                "topic": ""
            }
        ],
        "x": 1930,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "04e2ac4c67f5e2d9",
        "type": "modbus-getter",
        "z": "bb83c536da590f5c",
        "name": "Read WattNode",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "40000",
        "quantity": "2",
        "server": "ff919ca25c0fe87f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 580,
        "y": 400,
        "wires": [
            [],
            [
                "d024e323660bd109"
            ]
        ]
    },
    {
        "id": "80685ee48c0c301d",
        "type": "debug",
        "z": "bb83c536da590f5c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "e54c9a7b326d5526",
        "type": "http in",
        "z": "bb83c536da590f5c",
        "name": "GET /wattnode/status",
        "url": "/wattnode/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 440,
        "wires": [
            [
                "04e2ac4c67f5e2d9",
                "d024e323660bd109"
            ]
        ]
    },
    {
        "id": "456bfc4ce3a5af36",
        "type": "function",
        "z": "bb83c536da590f5c",
        "name": "Validation",
        "func": "\nlet status = \"fail\";\n\nif (msg.values?.length === 2) {\n\n    let ssid = msg.values.map(x => x.toString(16)).join('');\n\n    // SunSpec identifier\n    if (ssid.toUpperCase() === \"53756E53\") {\n\n        status = \"connected\";\n\n    }\n\n}\n\nmsg.payload = { \"status\": status };\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 440,
        "wires": [
            [
                "80685ee48c0c301d",
                "4c01648c25d3353c"
            ]
        ]
    },
    {
        "id": "4c01648c25d3353c",
        "type": "http response",
        "z": "bb83c536da590f5c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 440,
        "wires": []
    },
    {
        "id": "d024e323660bd109",
        "type": "join",
        "z": "bb83c536da590f5c",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 750,
        "y": 440,
        "wires": [
            [
                "456bfc4ce3a5af36"
            ]
        ]
    },
    {
        "id": "e68300e3f6f03b17",
        "type": "modbus-getter",
        "z": "bb83c536da590f5c",
        "name": "Read WattNode",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "40179",
        "quantity": "124",
        "server": "ff919ca25c0fe87f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 320,
        "y": 300,
        "wires": [
            [],
            [
                "910801dfc4992c39",
                "4b3d8426b6787a32"
            ]
        ]
    },
    {
        "id": "8286b3587d985566",
        "type": "debug",
        "z": "bb83c536da590f5c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "6e633daaf68a2e6d",
        "type": "inject",
        "z": "bb83c536da590f5c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "e68300e3f6f03b17"
            ]
        ]
    },
    {
        "id": "910801dfc4992c39",
        "type": "change",
        "z": "bb83c536da590f5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "buffer",
                "pt": "msg",
                "to": "payload.buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 300,
        "wires": [
            [
                "6a07ef0b8e5513f5"
            ]
        ]
    },
    {
        "id": "6a07ef0b8e5513f5",
        "type": "subflow:826f2798ac97948c",
        "z": "bb83c536da590f5c",
        "name": "Parse Model 213",
        "env": [
            {
                "name": "ssmodel",
                "value": "{     \"group\": {         \"label\": \"wye-connect three phase (abcn) meter\",         \"name\": \"ac_meter\",         \"points\": [             {                 \"desc\": \"Model identifier\",                 \"label\": \"Model ID\",                 \"mandatory\": \"M\",                 \"name\": \"ID\",                 \"size\": 1,                 \"static\": \"S\",                 \"type\": \"uint16\",                 \"value\": 213             },             {                 \"desc\": \"Model length\",                 \"label\": \"Model Length\",                 \"mandatory\": \"M\",                 \"name\": \"L\",                 \"size\": 1,                 \"static\": \"S\",                 \"type\": \"uint16\"             },             {                 \"desc\": \"Total AC Current\",                 \"label\": \"Amps\",                 \"mandatory\": \"M\",                 \"name\": \"A\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"A\"             },             {                 \"desc\": \"Phase A Current\",                 \"label\": \"Amps PhaseA\",                 \"mandatory\": \"M\",                 \"name\": \"AphA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"A\"             },             {                 \"desc\": \"Phase B Current\",                 \"label\": \"Amps PhaseB\",                 \"mandatory\": \"M\",                 \"name\": \"AphB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"A\"             },             {                 \"desc\": \"Phase C Current\",                 \"label\": \"Amps PhaseC\",                 \"mandatory\": \"M\",                 \"name\": \"AphC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"A\"             },             {                 \"desc\": \"Line to Neutral AC Voltage (average of active phases)\",                 \"label\": \"Voltage LN\",                 \"mandatory\": \"M\",                 \"name\": \"PhV\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Phase Voltage AN\",                 \"label\": \"Phase Voltage AN\",                 \"mandatory\": \"M\",                 \"name\": \"PhVphA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Phase Voltage BN\",                 \"label\": \"Phase Voltage BN\",                 \"mandatory\": \"M\",                 \"name\": \"PhVphB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Phase Voltage CN\",                 \"label\": \"Phase Voltage CN\",                 \"mandatory\": \"M\",                 \"name\": \"PhVphC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Line to Line AC Voltage (average of active phases)\",                 \"label\": \"Voltage LL\",                 \"mandatory\": \"M\",                 \"name\": \"PPV\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Phase Voltage AB\",                 \"label\": \"Phase Voltage AB\",                 \"mandatory\": \"M\",                 \"name\": \"PPVphAB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Phase Voltage BC\",                 \"label\": \"Phase Voltage BC\",                 \"mandatory\": \"M\",                 \"name\": \"PPVphBC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Phase Voltage CA\",                 \"label\": \"Phase Voltage CA\",                 \"mandatory\": \"M\",                 \"name\": \"PPVphCA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"V\"             },             {                 \"desc\": \"Frequency\",                 \"label\": \"Hz\",                 \"mandatory\": \"M\",                 \"name\": \"Hz\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Hz\"             },             {                 \"desc\": \"Total Real Power\",                 \"label\": \"Watts\",                 \"mandatory\": \"M\",                 \"name\": \"W\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"W\"             },             {                 \"label\": \"Watts phase A\",                 \"name\": \"WphA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"W\"             },             {                 \"label\": \"Watts phase B\",                 \"name\": \"WphB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"W\"             },             {                 \"label\": \"Watts phase C\",                 \"name\": \"WphC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"W\"             },             {                 \"desc\": \"AC Apparent Power\",                 \"label\": \"VA\",                 \"name\": \"VA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VA\"             },             {                 \"label\": \"VA phase A\",                 \"name\": \"VAphA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VA\"             },             {                 \"label\": \"VA phase B\",                 \"name\": \"VAphB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VA\"             },             {                 \"label\": \"VA phase C\",                 \"name\": \"VAphC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VA\"             },             {                 \"desc\": \"Reactive Power\",                 \"label\": \"VAR\",                 \"name\": \"VAR\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"var\"             },             {                 \"label\": \"VAR phase A\",                 \"name\": \"VARphA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"var\"             },             {                 \"label\": \"VAR phase B\",                 \"name\": \"VARphB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"var\"             },             {                 \"label\": \"VAR phase C\",                 \"name\": \"VARphC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"var\"             },             {                 \"desc\": \"Power Factor\",                 \"label\": \"PF\",                 \"name\": \"PF\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"PF\"             },             {                 \"label\": \"PF phase A\",                 \"name\": \"PFphA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"PF\"             },             {                 \"label\": \"PF phase B\",                 \"name\": \"PFphB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"PF\"             },             {                 \"label\": \"PF phase C\",                 \"name\": \"PFphC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"PF\"             },             {                 \"desc\": \"Total Real Energy Exported\",                 \"label\": \"Total Watt-hours Exported\",                 \"mandatory\": \"M\",                 \"name\": \"TotWhExp\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"label\": \"Total Watt-hours Exported phase A\",                 \"name\": \"TotWhExpPhA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"label\": \"Total Watt-hours Exported phase B\",                 \"name\": \"TotWhExpPhB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"label\": \"Total Watt-hours Exported phase C\",                 \"name\": \"TotWhExpPhC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"desc\": \"Total Real Energy Imported\",                 \"label\": \"Total Watt-hours Imported\",                 \"mandatory\": \"M\",                 \"name\": \"TotWhImp\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"label\": \"Total Watt-hours Imported phase A\",                 \"name\": \"TotWhImpPhA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"label\": \"Total Watt-hours Imported phase B\",                 \"name\": \"TotWhImpPhB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"label\": \"Total Watt-hours Imported phase C\",                 \"name\": \"TotWhImpPhC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"Wh\"             },             {                 \"desc\": \"Total Apparent Energy Exported\",                 \"label\": \"Total VA-hours Exported\",                 \"name\": \"TotVAhExp\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"label\": \"Total VA-hours Exported phase A\",                 \"name\": \"TotVAhExpPhA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"label\": \"Total VA-hours Exported phase B\",                 \"name\": \"TotVAhExpPhB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"label\": \"Total VA-hours Exported phase C\",                 \"name\": \"TotVAhExpPhC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"desc\": \"Total Apparent Energy Imported\",                 \"label\": \"Total VA-hours Imported\",                 \"name\": \"TotVAhImp\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"label\": \"Total VA-hours Imported phase A\",                 \"name\": \"TotVAhImpPhA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"label\": \"Total VA-hours Imported phase B\",                 \"name\": \"TotVAhImpPhB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"label\": \"Total VA-hours Imported phase C\",                 \"name\": \"TotVAhImpPhC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"VAh\"             },             {                 \"desc\": \"Total Reactive Energy Imported Quadrant 1\",                 \"label\": \"Total VAR-hours Imported Q1\",                 \"name\": \"TotVArhImpQ1\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Imported Q1 phase A\",                 \"name\": \"TotVArhImpQ1phA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Imported Q1 phase B\",                 \"name\": \"TotVArhImpQ1phB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Imported Q1 phase C\",                 \"name\": \"TotVArhImpQ1phC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"desc\": \"Total Reactive Power Imported Quadrant 2\",                 \"label\": \"Total VAr-hours Imported Q2\",                 \"name\": \"TotVArhImpQ2\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Imported Q2 phase A\",                 \"name\": \"TotVArhImpQ2phA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Imported Q2 phase B\",                 \"name\": \"TotVArhImpQ2phB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Imported Q2 phase C\",                 \"name\": \"TotVArhImpQ2phC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"desc\": \"Total Reactive Power Exported Quadrant 3\",                 \"label\": \"Total VAr-hours Exported Q3\",                 \"name\": \"TotVArhExpQ3\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Exported Q3 phase A\",                 \"name\": \"TotVArhExpQ3phA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Exported Q3 phase B\",                 \"name\": \"TotVArhExpQ3phB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Exported Q3 phase C\",                 \"name\": \"TotVArhExpQ3phC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"desc\": \"Total Reactive Power Exported Quadrant 4\",                 \"label\": \"Total VAr-hours Exported Q4\",                 \"name\": \"TotVArhExpQ4\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Exported Q4 Imported phase A\",                 \"name\": \"TotVArhExpQ4phA\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Exported Q4 Imported phase B\",                 \"name\": \"TotVArhExpQ4phB\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"label\": \"Total VAr-hours Exported Q4 Imported phase C\",                 \"name\": \"TotVArhExpQ4phC\",                 \"size\": 2,                 \"type\": \"float32\",                 \"units\": \"varh\"             },             {                 \"desc\": \"Meter Event Flags\",                 \"label\": \"Events\",                 \"mandatory\": \"M\",                 \"name\": \"Evt\",                 \"size\": 2,                 \"symbols\": [                     {                         \"name\": \"M_EVENT_Power_Failure\",                         \"value\": 2                     },                     {                         \"name\": \"M_EVENT_Under_Voltage\",                         \"value\": 3                     },                     {                         \"name\": \"M_EVENT_Low_PF\",                         \"value\": 4                     },                     {                         \"name\": \"M_EVENT_Over_Current\",                         \"value\": 5                     },                     {                         \"name\": \"M_EVENT_Over_Voltage\",                         \"value\": 6                     },                     {                         \"name\": \"M_EVENT_Missing_Sensor\",                         \"value\": 7                     },                     {                         \"name\": \"M_EVENT_Reserved1\",                         \"value\": 8                     },                     {                         \"name\": \"M_EVENT_Reserved2\",                         \"value\": 9                     },                     {                         \"name\": \"M_EVENT_Reserved3\",                         \"value\": 10                     },                     {                         \"name\": \"M_EVENT_Reserved4\",                         \"value\": 11                     },                     {                         \"name\": \"M_EVENT_Reserved5\",                         \"value\": 12                     },                     {                         \"name\": \"M_EVENT_Reserved6\",                         \"value\": 13                     },                     {                         \"name\": \"M_EVENT_Reserved7\",                         \"value\": 14                     },                     {                         \"name\": \"M_EVENT_Reserved8\",                         \"value\": 15                     },                     {                         \"name\": \"M_EVENT_OEM01\",                         \"value\": 16                     },                     {                         \"name\": \"M_EVENT_OEM02\",                         \"value\": 17                     },                     {                         \"name\": \"M_EVENT_OEM03\",                         \"value\": 18                     },                     {                         \"name\": \"M_EVENT_OEM04\",                         \"value\": 19                     },                     {                         \"name\": \"M_EVENT_OEM05\",                         \"value\": 20                     },                     {                         \"name\": \"M_EVENT_OEM06\",                         \"value\": 21                     },                     {                         \"name\": \"M_EVENT_OEM07\",                         \"value\": 22                     },                     {                         \"name\": \"M_EVENT_OEM08\",                         \"value\": 23                     },                     {                         \"name\": \"M_EVENT_OEM09\",                         \"value\": 24                     },                     {                         \"name\": \"M_EVENT_OEM10\",                         \"value\": 25                     },                     {                         \"name\": \"M_EVENT_OEM11\",                         \"value\": 26                     },                     {                         \"name\": \"M_EVENT_OEM12\",                         \"value\": 27                     },                     {                         \"name\": \"M_EVENT_OEM13\",                         \"value\": 28                     },                     {                         \"name\": \"M_EVENT_OEM14\",                         \"value\": 29                     },                     {                         \"name\": \"M_EVENT_OEM15\",                         \"value\": 30                     }                 ],                 \"type\": \"bitfield32\"             }         ],         \"type\": \"group\"     },     \"id\": 213 }",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 300,
        "wires": [
            [
                "8286b3587d985566"
            ]
        ]
    },
    {
        "id": "4b3d8426b6787a32",
        "type": "debug",
        "z": "bb83c536da590f5c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 220,
        "wires": []
    },
    {
        "id": "ecb8d3cdc562a609",
        "type": "debug",
        "z": "e5680ec93718b3f6",
        "g": "06e9bdefebec18b3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 160,
        "wires": []
    },
    {
        "id": "0facc22de6274825",
        "type": "http in",
        "z": "e5680ec93718b3f6",
        "g": "06e9bdefebec18b3",
        "name": "GET /inverter/status",
        "url": "/inverter/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "3619a5aeca928cd2",
                "ee354f4e98b669a7"
            ]
        ]
    },
    {
        "id": "fa54962a7e0f8069",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "g": "06e9bdefebec18b3",
        "name": "Validation",
        "func": "\nlet status = \"fail\";\n\nif (msg.values?.length === 2) {\n\n    let ssid = msg.values.map(x => x.toString(16)).join('');\n\n    // SunSpec identifier\n    if (ssid.toUpperCase() === \"53756E53\") {\n\n        status = \"connected\";\n\n    }\n\n}\n\nmsg.payload = { \"status\": status };\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "ecb8d3cdc562a609",
                "f79824953eef4fc6"
            ]
        ]
    },
    {
        "id": "f79824953eef4fc6",
        "type": "http response",
        "z": "e5680ec93718b3f6",
        "g": "06e9bdefebec18b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "3619a5aeca928cd2",
        "type": "modbus-getter",
        "z": "e5680ec93718b3f6",
        "g": "06e9bdefebec18b3",
        "name": "Read Inverter",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "40000",
        "quantity": "2",
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 160,
        "wires": [
            [],
            [
                "ee354f4e98b669a7"
            ]
        ]
    },
    {
        "id": "ee354f4e98b669a7",
        "type": "join",
        "z": "e5680ec93718b3f6",
        "g": "06e9bdefebec18b3",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "fa54962a7e0f8069"
            ]
        ]
    },
    {
        "id": "194adb635f9b1c11",
        "type": "http in",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "GET /inverter/status/details",
        "url": "/inverter/status/details",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "79a457a7c046625e",
                "f1865b16d068e488",
                "efea16944386fe65"
            ]
        ]
    },
    {
        "id": "f1865b16d068e488",
        "type": "modbus-getter",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Read Status",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "40252",
        "quantity": "2",
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 390,
        "y": 400,
        "wires": [
            [],
            [
                "f1a98c8e98819aad"
            ]
        ]
    },
    {
        "id": "79a457a7c046625e",
        "type": "modbus-getter",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Read Mode",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "40241",
        "quantity": "1",
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 390,
        "y": 340,
        "wires": [
            [],
            [
                "862dba68ffcab69a"
            ]
        ]
    },
    {
        "id": "c78d10d9207b6273",
        "type": "buffer-parser",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "mode",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "inverterStatus",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "chargerStatus",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": true,
        "fanOutMultipleResult": true,
        "setTopic": false,
        "outputs": 3,
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "9c8f9570df4d8eae"
            ],
            [
                "3ef0649182b0b463"
            ],
            [
                "2c25dc453d994771"
            ]
        ]
    },
    {
        "id": "2d223f6874c2ebd9",
        "type": "join",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "",
        "mode": "auto",
        "build": "buffer",
        "property": "payload.buffer",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 910,
        "y": 340,
        "wires": [
            [
                "c78d10d9207b6273"
            ]
        ]
    },
    {
        "id": "862dba68ffcab69a",
        "type": "change",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Index = 0",
        "rules": [
            {
                "t": "set",
                "p": "parts.index",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 340,
        "wires": [
            [
                "b0229cb481613388"
            ]
        ]
    },
    {
        "id": "f1a98c8e98819aad",
        "type": "change",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Index = 1",
        "rules": [
            {
                "t": "set",
                "p": "parts.index",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "b0229cb481613388"
            ]
        ]
    },
    {
        "id": "b0229cb481613388",
        "type": "change",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "parts.type",
                "pt": "msg",
                "to": "buffer",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.count",
                "pt": "msg",
                "to": "2",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.ch",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.key",
                "pt": "msg",
                "to": "buffer",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.id",
                "pt": "msg",
                "to": "lmao",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 340,
        "wires": [
            [
                "2d223f6874c2ebd9"
            ]
        ]
    },
    {
        "id": "9c8f9570df4d8eae",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Parse Mode",
        "func": "switch (msg.payload) {\n    case 2:\n        msg.payload = \"Standby\";\n        break;\n    case 3:\n        msg.payload = \"Operating\";\n        break;\n    default:\n        msg.payload = \"???\";\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 340,
        "wires": [
            [
                "0c344cccf8263101"
            ]
        ]
    },
    {
        "id": "3ef0649182b0b463",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Parse Inverter Status",
        "func": "switch (msg.payload) {\n    case 1024:\n        msg.payload = \"Invert\";\n        break;\n    case 1025:\n        msg.payload = \"AC Pass Through\";\n        break;\n    case 1026:\n        msg.payload = \"APS Only\";\n        break;\n    case 1027:\n        msg.payload = \"Load Sense\";\n        break;\n    case 1028:\n        msg.payload = \"Inverter Disabled\";\n        break;\n    case 1029:\n        msg.payload = \"Load Sense Ready\";\n        break;\n    case 1030:\n        msg.payload = \"Engaging Inverter\";\n        break;\n    case 1031:\n        msg.payload = \"Invert Fault\";\n        break;\n    case 1032:\n        msg.payload = \"Inverter Standby\";\n        break;\n    case 1033:\n        msg.payload = \"Grid-Tied\";\n        break;\n    case 1034:\n        msg.payload = \"Grid Support\";\n        break;\n    case 1035:\n        msg.payload = \"Gen Support\";\n        break;\n    case 1036:\n        msg.payload = \"Sell-to-Grid\";\n        break;\n    case 1037:\n        msg.payload = \"Load Shaving\";\n        break;\n    case 1038:\n        msg.payload = \"Grid Frequency Stabilization\";\n        break;\n    case 1039:\n        msg.payload = \"AC Coupling\";\n        break;\n    case 1040:\n        msg.payload = \"Reverse Ibatt\";\n        break;\n    default:\n        msg.payload = \"???\";\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "0c344cccf8263101"
            ]
        ]
    },
    {
        "id": "2c25dc453d994771",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Parse Charger Status",
        "func": "switch (msg.payload) {\n    case 768:\n        msg.payload = \"Not Charging\";\n        break;\n    case 769:\n        msg.payload = \"Bulk\";\n        break;\n    case 770:\n        msg.payload = \"Absorption\";\n        break;\n    case 771:\n        msg.payload = \"Overcharge\";\n        break;\n    case 772:\n        msg.payload = \"Equalize\";\n        break;\n    case 773:\n        msg.payload = \"Float\";\n        break;\n    case 774:\n        msg.payload = \"No Float\";\n        break;\n    case 775:\n        msg.payload = \"Constant VI\";\n        break;\n    case 776:\n        msg.payload = \"Charger Disabled\";\n        break;\n    case 777:\n        msg.payload = \"Qualifying AC\";\n        break;\n    case 778:\n        msg.payload = \"Qualifying APS\";\n        break;\n    case 779:\n        msg.payload = \"Engaging Charger\";\n        break;\n    case 780:\n        msg.payload = \"Charge Fault\";\n        break;\n    case 781:\n        msg.payload = \"Charger Suspend\";\n        break;\n    case 782:\n        msg.payload = \"AC Good\";\n        break;\n    case 783:\n        msg.payload = \"APS Good\";\n        break;\n    case 784:\n        msg.payload = \"AC Fault\";\n        break;\n    case 785:\n        msg.payload = \"Charge\";\n        break;\n    case 786:\n        msg.payload = \"Absorption Exit Pending\";\n        break;\n    case 787:\n        msg.payload = \"Ground Fault\";\n        break;\n    case 788:\n        msg.payload = \"AC Good Pending\";\n        break;\n    default:\n        msg.payload = \"???\";\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 460,
        "wires": [
            [
                "0c344cccf8263101"
            ]
        ]
    },
    {
        "id": "0c344cccf8263101",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "Add Names",
        "func": "let ret = {};\nret[msg.specification.name] = msg.payload;\nmsg.payload = ret;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 340,
        "wires": [
            [
                "bd2b19c13d701435"
            ]
        ]
    },
    {
        "id": "bd2b19c13d701435",
        "type": "join",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1650,
        "y": 340,
        "wires": [
            [
                "efea16944386fe65"
            ]
        ]
    },
    {
        "id": "efea16944386fe65",
        "type": "join",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1790,
        "y": 280,
        "wires": [
            [
                "34eb321b97e8d73e"
            ]
        ]
    },
    {
        "id": "34eb321b97e8d73e",
        "type": "http response",
        "z": "e5680ec93718b3f6",
        "g": "af38d5b5994866d9",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1940,
        "y": 280,
        "wires": []
    },
    {
        "id": "542f167d0496b6c2",
        "type": "modbus-flex-write",
        "z": "e5680ec93718b3f6",
        "name": "Write to Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "916070376faeaa7d",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1180,
        "y": 620,
        "wires": [
            [],
            [
                "a732b92ddfeb4c49"
            ]
        ]
    },
    {
        "id": "9e631e5c3816b7e5",
        "type": "split",
        "z": "e5680ec93718b3f6",
        "name": "Split Writes",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 990,
        "y": 620,
        "wires": [
            [
                "542f167d0496b6c2"
            ]
        ]
    },
    {
        "id": "f884a51d535f564d",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "name": "Set Discharge",
        "func": "\nlet millivolts = 48000;\n\nmsg.payload = [\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 356,\n        'value': 0\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 354,\n        'value': 1\n    },\n    {\n        'fc': 16,\n        'quantity': 2,\n        'address': 378,\n        'value': [millivolts >> 16, millivolts & 0xFFFF]\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 511,\n        'value': Math.floor(100 * msg.payload.pct)\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 620,
        "wires": [
            [
                "9e631e5c3816b7e5"
            ]
        ]
    },
    {
        "id": "a732b92ddfeb4c49",
        "type": "join",
        "z": "e5680ec93718b3f6",
        "name": "Join Writes",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1370,
        "y": 620,
        "wires": [
            [
                "a641070d89f9eba6"
            ]
        ]
    },
    {
        "id": "0c5c1f026a01beb0",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "name": "Set Charge",
        "func": "\nlet millivolts = 55000;\n\nmsg.payload = [\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 354,\n        'value': 0\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 356,\n        'value': 1\n    },\n    {\n        'fc': 16,\n        'quantity': 2,\n        'address': 378,\n        'value': [millivolts >> 16, millivolts & 0xFFFF]\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 367,\n        'value': Math.floor(100 * msg.payload.pct)\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 680,
        "wires": [
            [
                "9e631e5c3816b7e5"
            ]
        ]
    },
    {
        "id": "1e8b15b7d011aaab",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "name": "Set Inactive",
        "func": "\nmsg.payload = [\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 354,\n        'value': 0\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 356,\n        'value': 0\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 740,
        "wires": [
            [
                "9e631e5c3816b7e5"
            ]
        ]
    },
    {
        "id": "7473d2b5b06e4067",
        "type": "switch",
        "z": "e5680ec93718b3f6",
        "name": "Determine Operation",
        "property": "payload.operation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "discharge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "charge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 580,
        "y": 620,
        "wires": [
            [
                "f884a51d535f564d"
            ],
            [
                "0c5c1f026a01beb0"
            ],
            [
                "1e8b15b7d011aaab"
            ]
        ]
    },
    {
        "id": "0c0b0f5bd13873d3",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "name": "Save Message",
        "func": "msg._msg = { ...msg};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 620,
        "wires": [
            [
                "7473d2b5b06e4067"
            ]
        ]
    },
    {
        "id": "a641070d89f9eba6",
        "type": "function",
        "z": "e5680ec93718b3f6",
        "name": "Restore Message",
        "func": "if (msg.payload.length > 0) {\n    msg._msg.operationSuccess = true;\n}\nreturn msg._msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 620,
        "wires": [
            [
                "f243622e36fb36f3"
            ]
        ]
    },
    {
        "id": "d8d2d6861ff942e7",
        "type": "link in",
        "z": "e5680ec93718b3f6",
        "name": "Change Inverter Mode",
        "links": [],
        "x": 140,
        "y": 620,
        "wires": [
            [
                "0c0b0f5bd13873d3"
            ]
        ],
        "l": true,
        "info": "### Input\r\n: payload.operation (string) : Either `'charge'`, `'discharge'`, or `'inactive'`.\r\n: payload.pct (number) : Percentage input/output power between 0 and 1.\r\n\r\nOriginal message is restored when returned. The following properties are added to output.\r\n### Output\r\n: operationSuccess (boolean) : `true` if setting the operation succeeded, `false` otherwise."
    },
    {
        "id": "f243622e36fb36f3",
        "type": "link out",
        "z": "e5680ec93718b3f6",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 1715,
        "y": 620,
        "wires": []
    },
    {
        "id": "7c79e4b5289b6e35",
        "type": "link call",
        "z": "e5680ec93718b3f6",
        "name": "",
        "links": [
            "d8d2d6861ff942e7"
        ],
        "timeout": "15",
        "x": 340,
        "y": 700,
        "wires": [
            [
                "f9110e5112dc1b6e"
            ]
        ]
    },
    {
        "id": "9a63c22b4986730c",
        "type": "inject",
        "z": "e5680ec93718b3f6",
        "name": "Inactive Mode",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.operation",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "7c79e4b5289b6e35"
            ]
        ]
    },
    {
        "id": "f9110e5112dc1b6e",
        "type": "debug",
        "z": "e5680ec93718b3f6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 700,
        "wires": []
    },
    {
        "id": "9230620450a69ad5",
        "type": "inject",
        "z": "e5680ec93718b3f6",
        "name": "Charge Mode",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.operation",
                "v": "charge",
                "vt": "str"
            },
            {
                "p": "payload.pct",
                "v": "0.8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "7c79e4b5289b6e35"
            ]
        ]
    },
    {
        "id": "9e0b258abb323b43",
        "type": "inject",
        "z": "e5680ec93718b3f6",
        "name": "Discharge Mode",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.operation",
                "v": "discharge",
                "vt": "str"
            },
            {
                "p": "payload.pct",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "7c79e4b5289b6e35"
            ]
        ]
    },
    {
        "id": "3e6dcc26d1c288bf",
        "type": "exec",
        "z": "b1d7e9e0a4578c1f",
        "command": "/data/changeled /dev/revpi 3 off",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 770,
        "y": 160,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "01cb31bee0b0da87",
        "type": "exec",
        "z": "b1d7e9e0a4578c1f",
        "command": "/data/changeled /dev/revpi 3 green",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 780,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a67d0a99fc4bcbe5",
        "type": "function",
        "z": "b1d7e9e0a4578c1f",
        "name": "Toggle",
        "func": "\nmsg.payload = !context.get(\"led\");\ncontext.set(\"led\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"led\", false);",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "4e945812ba3f633d"
            ]
        ]
    },
    {
        "id": "4e945812ba3f633d",
        "type": "switch",
        "z": "b1d7e9e0a4578c1f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "3e6dcc26d1c288bf"
            ],
            [
                "01cb31bee0b0da87"
            ]
        ]
    },
    {
        "id": "d7f9cf4fabab8cb8",
        "type": "exec",
        "z": "b1d7e9e0a4578c1f",
        "command": "/data/changeled /dev/revpi 3 off",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c3adf05dfae12efd",
        "type": "exec",
        "z": "b1d7e9e0a4578c1f",
        "command": "/data/changeled /dev/revpi 2 off",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 710,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "d7f9cf4fabab8cb8"
            ]
        ]
    },
    {
        "id": "0e6448e5be10c3fa",
        "type": "exec",
        "z": "b1d7e9e0a4578c1f",
        "command": "/data/changeled /dev/revpi 1 off",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 410,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "c3adf05dfae12efd"
            ]
        ]
    },
    {
        "id": "76d50beea3080dca",
        "type": "inject",
        "z": "b1d7e9e0a4578c1f",
        "name": "All off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "0e6448e5be10c3fa"
            ]
        ]
    },
    {
        "id": "a02c295a94d1200e",
        "type": "subflow:826f2798ac97948c",
        "z": "b1d7e9e0a4578c1f",
        "name": "Parse Model 802",
        "env": [
            {
                "name": "ssmodel",
                "value": "{     \"group\": {         \"label\": \"Battery Base Model\",         \"name\": \"battery\",         \"points\": [             {                 \"desc\": \"Model identifier\",                 \"label\": \"Model ID\",                 \"mandatory\": \"M\",                 \"name\": \"ID\",                 \"size\": 1,                 \"static\": \"S\",                 \"type\": \"uint16\",                 \"value\": 802             },             {                 \"desc\": \"Model length\",                 \"label\": \"Model Length\",                 \"mandatory\": \"M\",                 \"name\": \"L\",                 \"size\": 1,                 \"static\": \"S\",                 \"type\": \"uint16\"             },             {                 \"desc\": \"Nameplate charge capacity in amp-hours.\",                 \"label\": \"Nameplate Charge Capacity\",                 \"mandatory\": \"M\",                 \"name\": \"AHRtg\",                 \"sf\": \"AHRtg_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"Ah\"             },             {                 \"desc\": \"Nameplate energy capacity in DC watt-hours.\",                 \"label\": \"Nameplate Energy Capacity\",                 \"mandatory\": \"M\",                 \"name\": \"WHRtg\",                 \"sf\": \"WHRtg_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"Wh\"             },             {                 \"desc\": \"Maximum rate of energy transfer into the storage device in DC watts.\",                 \"label\": \"Nameplate Max Charge Rate\",                 \"mandatory\": \"M\",                 \"name\": \"WChaRteMax\",                 \"sf\": \"WChaDisChaMax_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"W\"             },             {                 \"desc\": \"Maximum rate of energy transfer out of the storage device in DC watts.\",                 \"label\": \"Nameplate Max Discharge Rate\",                 \"mandatory\": \"M\",                 \"name\": \"WDisChaRteMax\",                 \"sf\": \"WChaDisChaMax_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"W\"             },             {                 \"desc\": \"Self discharge rate.  Percentage of capacity (WHRtg) discharged per day.\",                 \"label\": \"Self Discharge Rate\",                 \"name\": \"DisChaRte\",                 \"sf\": \"DisChaRte_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%WHRtg\"             },             {                 \"desc\": \"Manufacturer maximum state of charge, expressed as a percentage.\",                 \"label\": \"Nameplate Max SoC\",                 \"name\": \"SoCMax\",                 \"sf\": \"SoC_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%WHRtg\"             },             {                 \"desc\": \"Manufacturer minimum state of charge, expressed as a percentage.\",                 \"label\": \"Nameplate Min SoC\",                 \"name\": \"SoCMin\",                 \"sf\": \"SoC_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%WHRtg\"             },             {                 \"access\": \"RW\",                 \"desc\": \"Setpoint for maximum reserve for storage as a percentage of the nominal maximum storage.\",                 \"label\": \"Max Reserve Percent\",                 \"name\": \"SocRsvMax\",                 \"sf\": \"SoC_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%WHRtg\"             },             {                 \"access\": \"RW\",                 \"desc\": \"Setpoint for minimum reserve for storage as a percentage of the nominal maximum storage.\",                 \"label\": \"Min Reserve Percent\",                 \"name\": \"SoCRsvMin\",                 \"sf\": \"SoC_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%WHRtg\"             },             {                 \"desc\": \"State of charge, expressed as a percentage.\",                 \"label\": \"State of Charge\",                 \"mandatory\": \"M\",                 \"name\": \"SoC\",                 \"sf\": \"SoC_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%WHRtg\"             },             {                 \"desc\": \"Depth of discharge, expressed as a percentage.\",                 \"label\": \"Depth of Discharge\",                 \"name\": \"DoD\",                 \"sf\": \"DoD_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%\"             },             {                 \"desc\": \"Percentage of battery life remaining.\",                 \"label\": \"State of Health\",                 \"name\": \"SoH\",                 \"sf\": \"SoH_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"%\"             },             {                 \"desc\": \"Number of cycles executed in the battery.\",                 \"label\": \"Cycle Count\",                 \"name\": \"NCyc\",                 \"size\": 2,                 \"type\": \"uint32\"             },             {                 \"desc\": \"Charge status of storage device. Enumeration.\",                 \"label\": \"Charge Status\",                 \"name\": \"ChaSt\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"OFF\",                         \"value\": 1                     },                     {                         \"name\": \"EMPTY\",                         \"value\": 2                     },                     {                         \"name\": \"DISCHARGING\",                         \"value\": 3                     },                     {                         \"name\": \"CHARGING\",                         \"value\": 4                     },                     {                         \"name\": \"FULL\",                         \"value\": 5                     },                     {                         \"name\": \"HOLDING\",                         \"value\": 6                     },                     {                         \"name\": \"TESTING\",                         \"value\": 7                     }                 ],                 \"type\": \"enum16\"             },             {                 \"desc\": \"Battery control mode. Enumeration.\",                 \"label\": \"Control Mode\",                 \"mandatory\": \"M\",                 \"name\": \"LocRemCtl\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"REMOTE\",                         \"value\": 0                     },                     {                         \"name\": \"LOCAL\",                         \"value\": 1                     }                 ],                 \"type\": \"enum16\"             },             {                 \"desc\": \"Value is incremented every second with periodic resets to zero.\",                 \"label\": \"Battery Heartbeat\",                 \"name\": \"Hb\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"access\": \"RW\",                 \"desc\": \"Value is incremented every second with periodic resets to zero.\",                 \"label\": \"Controller Heartbeat\",                 \"name\": \"CtrlHb\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"access\": \"RW\",                 \"desc\": \"Used to reset any latched alarms.  1 = Reset.\",                 \"label\": \"Alarm Reset\",                 \"mandatory\": \"M\",                 \"name\": \"AlmRst\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"desc\": \"Type of battery. Enumeration.\",                 \"label\": \"Battery Type\",                 \"mandatory\": \"M\",                 \"name\": \"Typ\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"NOT APPLICABLE_UNKNOWN\",                         \"value\": 0                     },                     {                         \"name\": \"LEAD_ACID\",                         \"value\": 1                     },                     {                         \"name\": \"NICKEL_METAL_HYDRATE\",                         \"value\": 2                     },                     {                         \"name\": \"NICKEL_CADMIUM\",                         \"value\": 3                     },                     {                         \"name\": \"LITHIUM_ION\",                         \"value\": 4                     },                     {                         \"name\": \"CARBON_ZINC\",                         \"value\": 5                     },                     {                         \"name\": \"ZINC_CHLORIDE\",                         \"value\": 6                     },                     {                         \"name\": \"ALKALINE\",                         \"value\": 7                     },                     {                         \"name\": \"RECHARGEABLE_ALKALINE\",                         \"value\": 8                     },                     {                         \"name\": \"SODIUM_SULFUR\",                         \"value\": 9                     },                     {                         \"name\": \"FLOW\",                         \"value\": 10                     },                     {                         \"name\": \"OTHER\",                         \"value\": 99                     }                 ],                 \"type\": \"enum16\"             },             {                 \"desc\": \"State of the battery bank.  Enumeration.\",                 \"label\": \"State of the Battery Bank\",                 \"mandatory\": \"M\",                 \"name\": \"State\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"DISCONNECTED\",                         \"value\": 1                     },                     {                         \"name\": \"INITIALIZING\",                         \"value\": 2                     },                     {                         \"name\": \"CONNECTED\",                         \"value\": 3                     },                     {                         \"name\": \"STANDBY\",                         \"value\": 4                     },                     {                         \"name\": \"SOC PROTECTION\",                         \"value\": 5                     },                     {                         \"name\": \"SUSPENDING\",                         \"value\": 6                     },                     {                         \"name\": \"FAULT\",                         \"value\": 99                     }                 ],                 \"type\": \"enum16\"             },             {                 \"desc\": \"Vendor specific battery bank state.  Enumeration.\",                 \"label\": \"Vendor Battery Bank State\",                 \"name\": \"StateVnd\",                 \"size\": 1,                 \"type\": \"enum16\"             },             {                 \"desc\": \"Date the device warranty expires.\",                 \"label\": \"Warranty Date\",                 \"name\": \"WarrDt\",                 \"size\": 2,                 \"type\": \"uint32\"             },             {                 \"desc\": \"Alarms and warnings.  Bit flags.\",                 \"label\": \"Battery Event 1 Bitfield\",                 \"mandatory\": \"M\",                 \"name\": \"Evt1\",                 \"size\": 2,                 \"symbols\": [                     {                         \"name\": \"COMMUNICATION_ERROR\",                         \"value\": 0                     },                     {                         \"name\": \"OVER_TEMP_ALARM\",                         \"value\": 1                     },                     {                         \"name\": \"OVER_TEMP_WARNING\",                         \"value\": 2                     },                     {                         \"name\": \"UNDER_TEMP_ALARM\",                         \"value\": 3                     },                     {                         \"name\": \"UNDER_TEMP_WARNING\",                         \"value\": 4                     },                     {                         \"name\": \"OVER_CHARGE_CURRENT_ALARM\",                         \"value\": 5                     },                     {                         \"name\": \"OVER_CHARGE_CURRENT_WARNING\",                         \"value\": 6                     },                     {                         \"name\": \"OVER_DISCHARGE_CURRENT_ALARM\",                         \"value\": 7                     },                     {                         \"name\": \"OVER_DISCHARGE_CURRENT_WARNING\",                         \"value\": 8                     },                     {                         \"name\": \"OVER_VOLT_ALARM\",                         \"value\": 9                     },                     {                         \"name\": \"OVER_VOLT_WARNING\",                         \"value\": 10                     },                     {                         \"name\": \"UNDER_VOLT_ALARM\",                         \"value\": 11                     },                     {                         \"name\": \"UNDER_VOLT_WARNING\",                         \"value\": 12                     },                     {                         \"name\": \"UNDER_SOC_MIN_ALARM\",                         \"value\": 13                     },                     {                         \"name\": \"UNDER_SOC_MIN_WARNING\",                         \"value\": 14                     },                     {                         \"name\": \"OVER_SOC_MAX_ALARM\",                         \"value\": 15                     },                     {                         \"name\": \"OVER_SOC_MAX_WARNING\",                         \"value\": 16                     },                     {                         \"name\": \"VOLTAGE_IMBALANCE_WARNING\",                         \"value\": 17                     },                     {                         \"name\": \"TEMPERATURE_IMBALANCE_ALARM\",                         \"value\": 18                     },                     {                         \"name\": \"TEMPERATURE_IMBALANCE_WARNING\",                         \"value\": 19                     },                     {                         \"name\": \"CONTACTOR_ERROR\",                         \"value\": 20                     },                     {                         \"name\": \"FAN_ERROR\",                         \"value\": 21                     },                     {                         \"name\": \"GROUND_FAULT\",                         \"value\": 22                     },                     {                         \"name\": \"OPEN_DOOR_ERROR\",                         \"value\": 23                     },                     {                         \"name\": \"CURRENT_IMBALANCE_WARNING\",                         \"value\": 24                     },                     {                         \"name\": \"OTHER_ALARM\",                         \"value\": 25                     },                     {                         \"name\": \"OTHER_WARNING\",                         \"value\": 26                     },                     {                         \"name\": \"RESERVED_1\",                         \"value\": 27                     },                     {                         \"name\": \"CONFIGURATION_ALARM\",                         \"value\": 28                     },                     {                         \"name\": \"CONFIGURATION_WARNING\",                         \"value\": 29                     }                 ],                 \"type\": \"bitfield32\"             },             {                 \"desc\": \"Alarms and warnings.  Bit flags.\",                 \"label\": \"Battery Event 2 Bitfield\",                 \"mandatory\": \"M\",                 \"name\": \"Evt2\",                 \"size\": 2,                 \"type\": \"bitfield32\"             },             {                 \"desc\": \"Vendor defined events.\",                 \"label\": \"Vendor Event Bitfield 1\",                 \"mandatory\": \"M\",                 \"name\": \"EvtVnd1\",                 \"size\": 2,                 \"type\": \"bitfield32\"             },             {                 \"desc\": \"Vendor defined events.\",                 \"label\": \"Vendor Event Bitfield 2\",                 \"mandatory\": \"M\",                 \"name\": \"EvtVnd2\",                 \"size\": 2,                 \"type\": \"bitfield32\"             },             {                 \"desc\": \"DC Bus Voltage.\",                 \"label\": \"External Battery Voltage\",                 \"mandatory\": \"M\",                 \"name\": \"V\",                 \"sf\": \"V_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"V\"             },             {                 \"desc\": \"Instantaneous maximum battery voltage.\",                 \"label\": \"Max Battery Voltage\",                 \"name\": \"VMax\",                 \"sf\": \"V_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"V\"             },             {                 \"desc\": \"Instantaneous minimum battery voltage.\",                 \"label\": \"Min Battery Voltage\",                 \"name\": \"VMin\",                 \"sf\": \"V_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"V\"             },             {                 \"desc\": \"Maximum voltage for all cells in the bank.\",                 \"label\": \"Max Cell Voltage\",                 \"name\": \"CellVMax\",                 \"sf\": \"CellV_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"V\"             },             {                 \"desc\": \"String containing the cell with maximum voltage.\",                 \"label\": \"Max Cell Voltage String\",                 \"name\": \"CellVMaxStr\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"desc\": \"Module containing the cell with maximum voltage.\",                 \"label\": \"Max Cell Voltage Module\",                 \"name\": \"CellVMaxMod\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"desc\": \"Minimum voltage for all cells in the bank.\",                 \"label\": \"Min Cell Voltage\",                 \"name\": \"CellVMin\",                 \"sf\": \"CellV_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"V\"             },             {                 \"desc\": \"String containing the cell with minimum voltage.\",                 \"label\": \"Min Cell Voltage String\",                 \"name\": \"CellVMinStr\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"desc\": \"Module containing the cell with minimum voltage.\",                 \"label\": \"Min Cell Voltage Module\",                 \"name\": \"CellVMinMod\",                 \"size\": 1,                 \"type\": \"uint16\"             },             {                 \"desc\": \"Average cell voltage for all cells in the bank.\",                 \"label\": \"Average Cell Voltage\",                 \"name\": \"CellVAvg\",                 \"sf\": \"CellV_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"V\"             },             {                 \"desc\": \"Total DC current flowing to/from the battery bank.\",                 \"label\": \"Total DC Current\",                 \"mandatory\": \"M\",                 \"name\": \"A\",                 \"sf\": \"A_SF\",                 \"size\": 1,                 \"type\": \"int16\",                 \"units\": \"A\"             },             {                 \"desc\": \"Instantaneous maximum DC charge current.\",                 \"label\": \"Max Charge Current\",                 \"name\": \"AChaMax\",                 \"sf\": \"AMax_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"A\"             },             {                 \"desc\": \"Instantaneous maximum DC discharge current.\",                 \"label\": \"Max Discharge Current\",                 \"name\": \"ADisChaMax\",                 \"sf\": \"AMax_SF\",                 \"size\": 1,                 \"type\": \"uint16\",                 \"units\": \"A\"             },             {                 \"desc\": \"Total power flowing to/from the battery bank.\",                 \"label\": \"Total Power\",                 \"mandatory\": \"M\",                 \"name\": \"W\",                 \"sf\": \"W_SF\",                 \"size\": 1,                 \"type\": \"int16\",                 \"units\": \"W\"             },             {                 \"desc\": \"Request from battery to start or stop the inverter.  Enumeration.\",                 \"label\": \"Inverter State Request\",                 \"name\": \"ReqInvState\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"NO REQUEST\",                         \"value\": 0                     },                     {                         \"name\": \"START\",                         \"value\": 1                     },                     {                         \"name\": \"STOP\",                         \"value\": 2                     }                 ],                 \"type\": \"enum16\"             },             {                 \"desc\": \"AC Power requested by battery.\",                 \"label\": \"Battery Power Request\",                 \"name\": \"ReqW\",                 \"sf\": \"W_SF\",                 \"size\": 1,                 \"type\": \"int16\",                 \"units\": \"W\"             },             {                 \"access\": \"RW\",                 \"desc\": \"Instruct the battery bank to perform an operation such as connecting.  Enumeration.\",                 \"label\": \"Set Operation\",                 \"mandatory\": \"M\",                 \"name\": \"SetOp\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"CONNECT\",                         \"value\": 1                     },                     {                         \"name\": \"DISCONNECT\",                         \"value\": 2                     }                 ],                 \"type\": \"enum16\"             },             {                 \"access\": \"RW\",                 \"desc\": \"Set the current state of the inverter.\",                 \"label\": \"Set Inverter State\",                 \"mandatory\": \"M\",                 \"name\": \"SetInvState\",                 \"size\": 1,                 \"symbols\": [                     {                         \"name\": \"INVERTER_STOPPED\",                         \"value\": 1                     },                     {                         \"name\": \"INVERTER_STANDBY\",                         \"value\": 2                     },                     {                         \"name\": \"INVERTER_STARTED\",                         \"value\": 3                     }                 ],                 \"type\": \"enum16\"             },             {                 \"desc\": \"Scale factor for charge capacity.\",                 \"mandatory\": \"M\",                 \"name\": \"AHRtg_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for energy capacity.\",                 \"mandatory\": \"M\",                 \"name\": \"WHRtg_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for maximum charge and discharge rate.\",                 \"mandatory\": \"M\",                 \"name\": \"WChaDisChaMax_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for self discharge rate.\",                 \"name\": \"DisChaRte_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for state of charge values.\",                 \"mandatory\": \"M\",                 \"name\": \"SoC_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for depth of discharge.\",                 \"name\": \"DoD_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for state of health.\",                 \"name\": \"SoH_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for DC bus voltage.\",                 \"mandatory\": \"M\",                 \"name\": \"V_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for cell voltage.\",                 \"mandatory\": \"M\",                 \"name\": \"CellV_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for DC current.\",                 \"mandatory\": \"M\",                 \"name\": \"A_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for instantaneous DC charge/discharge current.\",                 \"mandatory\": \"M\",                 \"name\": \"AMax_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             },             {                 \"desc\": \"Scale factor for AC power request.\",                 \"name\": \"W_SF\",                 \"size\": 1,                 \"type\": \"sunssf\"             }         ],         \"type\": \"group\"     },     \"id\": 802 }",
                "type": "str"
            }
        ],
        "x": 790,
        "y": 520,
        "wires": [
            [
                "b109d38b103147bd"
            ]
        ]
    },
    {
        "id": "0174b80796f507de",
        "type": "modbus-getter",
        "z": "b1d7e9e0a4578c1f",
        "name": "Read SunSpec BMS",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "230",
        "dataType": "HoldingRegister",
        "adr": "40072",
        "quantity": "62",
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 360,
        "y": 520,
        "wires": [
            [],
            [
                "46af360bc5e1c180"
            ]
        ]
    },
    {
        "id": "46af360bc5e1c180",
        "type": "change",
        "z": "b1d7e9e0a4578c1f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "buffer",
                "pt": "msg",
                "to": "payload.buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 520,
        "wires": [
            [
                "a02c295a94d1200e"
            ]
        ]
    },
    {
        "id": "b109d38b103147bd",
        "type": "debug",
        "z": "b1d7e9e0a4578c1f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 520,
        "wires": []
    },
    {
        "id": "7fafd9bbe34238e0",
        "type": "inject",
        "z": "b1d7e9e0a4578c1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "0174b80796f507de"
            ]
        ]
    },
    {
        "id": "22622d788359fff1",
        "type": "http in",
        "z": "2dc6fe71588e17c7",
        "name": "GET /history/status",
        "url": "/history/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "9da9c475ca294313"
            ]
        ]
    },
    {
        "id": "9da9c475ca294313",
        "type": "function",
        "z": "2dc6fe71588e17c7",
        "name": "Validation",
        "func": "msg.payload = { \"status\": 'connected' };\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "1122500b80d983de"
            ]
        ]
    },
    {
        "id": "1122500b80d983de",
        "type": "http response",
        "z": "2dc6fe71588e17c7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "7589dfcff1387d67",
        "type": "modbus-flex-write",
        "z": "05b90c81d8e90a14",
        "name": "Write to Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "server": "916070376faeaa7d",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1580,
        "y": 380,
        "wires": [
            [],
            [
                "ae8b1efbd33230a2"
            ]
        ]
    },
    {
        "id": "d48c02c6892c62f0",
        "type": "split",
        "z": "05b90c81d8e90a14",
        "name": "Split Writes",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1390,
        "y": 380,
        "wires": [
            [
                "7589dfcff1387d67"
            ]
        ]
    },
    {
        "id": "a9ed739e434c7084",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "Set Discharge",
        "func": "\nlet millivolts = 48000;\n\nmsg.payload = [\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 356,\n        'value': 0\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 354,\n        'value': 1\n    },\n    {\n        'fc': 16,\n        'quantity': 2,\n        'address': 378,\n        'value': [millivolts >> 16, millivolts & 0xFFFF]\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 511,\n        'value': 50\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 380,
        "wires": [
            [
                "d48c02c6892c62f0"
            ]
        ]
    },
    {
        "id": "ae8b1efbd33230a2",
        "type": "join",
        "z": "05b90c81d8e90a14",
        "name": "Join Writes",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1770,
        "y": 380,
        "wires": [
            [
                "848acb8ecd747583"
            ]
        ]
    },
    {
        "id": "ac58a035cd0b1361",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "Set Charge",
        "func": "\nlet millivolts = 55000;\n\nmsg.payload = [\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 354,\n        'value': 0\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 356,\n        'value': 1\n    },\n    {\n        'fc': 16,\n        'quantity': 2,\n        'address': 378,\n        'value': [millivolts >> 16, millivolts & 0xFFFF]\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 367,\n        'value': 80\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 440,
        "wires": [
            [
                "d48c02c6892c62f0"
            ]
        ]
    },
    {
        "id": "15d0b4b4ecd4a5a6",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "Set Inactive",
        "func": "\nmsg.payload = [\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 354,\n        'value': 0\n    },\n    {\n        'fc': 6,\n        'quantity': 1,\n        'address': 356,\n        'value': 0\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 500,
        "wires": [
            [
                "d48c02c6892c62f0"
            ]
        ]
    },
    {
        "id": "9d1c7dfeb98f4eba",
        "type": "http in",
        "z": "05b90c81d8e90a14",
        "name": "",
        "url": "/api/operation",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "168e27817342d651"
            ]
        ]
    },
    {
        "id": "875dd790f3c8619e",
        "type": "http response",
        "z": "05b90c81d8e90a14",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 490,
        "y": 220,
        "wires": []
    },
    {
        "id": "8a270a53c945ce68",
        "type": "http in",
        "z": "05b90c81d8e90a14",
        "name": "",
        "url": "/api/connections",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "2929da3915cff06a"
            ]
        ]
    },
    {
        "id": "2929da3915cff06a",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "",
        "func": "msg.payload = [\n    { 'name': 'dev1', 'status': 'connected' },\n    { 'name': 'dev2', 'status': 'disconnected' },\n    { 'name': 'dev3', 'status': 'error' }\n];\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "875dd790f3c8619e"
            ]
        ]
    },
    {
        "id": "ea18ccd043397733",
        "type": "http in",
        "z": "05b90c81d8e90a14",
        "name": "",
        "url": "/api/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "269f9a47b48b9c09"
            ]
        ]
    },
    {
        "id": "269f9a47b48b9c09",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "",
        "func": "msg.payload = {\n    'operation': 'discharge',\n    'voltage': [48, 53.1, 55],\n    'soc': 0.74,\n    'capacity': [18.6, 20],\n    'temperature': [40, 68, 100],\n    'ac': [3.3, 6],\n    'dc': [4.1, 6.3],\n    'pct': 0.65\n};\nmsg.statusCode = 200;\nmsg.headers = undefined;\nmsg.cookies = undefined;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "96f229e2b0d82d3e"
            ]
        ]
    },
    {
        "id": "bcb8945e32584c07",
        "type": "switch",
        "z": "05b90c81d8e90a14",
        "name": "Determine Operation",
        "property": "payload.operation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "discharge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "charge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inactive",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 980,
        "y": 380,
        "wires": [
            [
                "a9ed739e434c7084"
            ],
            [
                "ac58a035cd0b1361"
            ],
            [
                "15d0b4b4ecd4a5a6"
            ]
        ]
    },
    {
        "id": "cea7bf18364ed0e8",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "Check Request",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "f7947477c274e063"
            ]
        ]
    },
    {
        "id": "f7947477c274e063",
        "type": "switch",
        "z": "05b90c81d8e90a14",
        "name": "Schedule Delay",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 380,
        "wires": [
            [
                "bcb8945e32584c07"
            ],
            []
        ]
    },
    {
        "id": "38e47d2972d7779e",
        "type": "http response",
        "z": "05b90c81d8e90a14",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2130,
        "y": 380,
        "wires": []
    },
    {
        "id": "848acb8ecd747583",
        "type": "function",
        "z": "05b90c81d8e90a14",
        "name": "Wrap Response",
        "func": "msg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 380,
        "wires": [
            [
                "38e47d2972d7779e"
            ]
        ]
    },
    {
        "id": "3936edc3ec40d849",
        "type": "catch",
        "z": "05b90c81d8e90a14",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "be059150e0851137"
            ]
        ]
    },
    {
        "id": "be059150e0851137",
        "type": "subflow:c625d94296a71599",
        "z": "05b90c81d8e90a14",
        "name": "",
        "x": 300,
        "y": 140,
        "wires": []
    },
    {
        "id": "96f229e2b0d82d3e",
        "type": "http response",
        "z": "05b90c81d8e90a14",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 300,
        "wires": []
    },
    {
        "id": "31c3803fb860b9f2",
        "type": "comment",
        "z": "05b90c81d8e90a14",
        "name": "API Description",
        "info": "# Raspberry Pi \"Testbox\" API\n\n## **GET /api/connections**\n### Request parameters\nNone\n### Response\n- `200`: Success  \nBody: JSON array of objects with the following parameters\n  - `name`: The device name\n  - `status`: Either `'connected'`, `'disconnected'`, or `'error'`\n- `500`: Server error\n\n\n## **GET /api/status**\n### Request parameters\nNone\n### Response\n- `200`: Success  \nBody: JSON object with the following parameters\n  - `operation`: Either `'charge'`, `'discharge'`, `'inactive'`, `'fault'`, or `'standby'`\n  - `voltage`: An array with the minimum voltage, actual voltage, and maximum voltage\n  - `soc`: The \n  - `capacity`\n  - `temperature`\n  - `ac`\n  - `dc`\n  - `pct`\n\n{\n'operation': 'charge' OR 'discharge' OR 'inactive' OR 'fault' OR 'standby',\n'voltage': [MIN, ACTUAL, MAX],\n'soc': 0.74,\n'capacity': [ACTUAL, MAX],\n'temperature': [MIN, ACTUAL, MAX],\n'ac': [ACTUAL, MAX],\n'dc': [ACTUAL, MAX],\n'pct': 0.43\n}\n- `500`: Server error\n\n\n## **POST /api/operation**\n### Request body\nJSON in the following form  \n{\n    'password': 'lmao',\n  'operation': 'charge' OR 'discharge' OR 'inactive',\n  'pct': OPTIONAL OPERATION PERCENTAGE,\n  'delay': OPTIONAL OPERATION DELAY (IN SECONDS)\n}\n### Response\n- `200`: Success\n- `400`: Malformed request\n- `403`: Wrong password\n- `500`: Server error\n\n## **GET /api/data**\n### Request parameters\nNone\n### Response\n- `200`: Success\n- `500`: Server error",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "168e27817342d651",
        "type": "switch",
        "z": "05b90c81d8e90a14",
        "name": "Check Password",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 380,
        "wires": [
            [
                "cea7bf18364ed0e8"
            ],
            []
        ]
    },
    {
        "id": "8da89b63c0e385b0",
        "type": "http in",
        "z": "05b90c81d8e90a14",
        "name": "",
        "url": "/api/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "c9547452372cf41c"
            ]
        ]
    },
    {
        "id": "c9547452372cf41c",
        "type": "subflow:60b9353837f41409",
        "z": "05b90c81d8e90a14",
        "name": "",
        "x": 330,
        "y": 540,
        "wires": []
    },
    {
        "id": "31b1248996a0d606",
        "type": "inject",
        "z": "05b90c81d8e90a14",
        "name": "Send message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "c9547452372cf41c"
            ]
        ]
    },
    {
        "id": "29aa4af90d6b4d9e",
        "type": "http in",
        "z": "05b90c81d8e90a14",
        "name": "",
        "url": "/api/testsse",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "0e15da506d76b993"
            ]
        ]
    },
    {
        "id": "0e15da506d76b993",
        "type": "template",
        "z": "05b90c81d8e90a14",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<html>\n\n<head>\n    <script>\n\n        addEventListener(\"load\", (event) => {\n\n            if (typeof(EventSource) === \"undefined\") {\n                document.innerHTML = \"<h1>Server-sent events not supported!</h1>\";\n                return;\n            }\n\n            window.urlInput = document.getElementById(\"url\");\n            window.connectButton = document.getElementById(\"connect\");\n            window.disconnectButton = document.getElementById(\"disconnect\");\n            window.clearButton = document.getElementById(\"clear\");\n            window.eventList = document.getElementById(\"list\");\n            window.lastState = -1;\n\n            connectButton.onclick = () => connectSSE(urlInput.value);\n            disconnectButton.onclick = disconnectSSE;\n            clearButton.onclick = clearText;\n        });\n\n\n        function connectSSE (url) {\n            window.evtSource = new EventSource(url, {withCredentials: false,});\n            updateState();\n\n            window.stateInterval = setInterval(updateState, 1000);\n\n            evtSource.onmessage = onMessage;\n            evtSource.addEventListener('close', onClose);\n        }\n\n        function disconnectSSE () {\n            clearInterval(stateInterval);\n            evtSource.close();\n            evtSource.onmessage = undefined;\n            evtSource.removeEventListener('close', onClose);\n            evtSource = undefined;\n            onClose();\n            updateState();\n        }\n\n        function updateState () {\n            urlInput.disabled = Boolean(evtSource);\n            connect.disabled = Boolean(evtSource);\n            disconnect.disabled = !Boolean(evtSource);\n\n            if (!evtSource || evtSource.readyState === lastState) return;\n            lastState = evtSource.readyState;\n            \n            switch (lastState) {\n                case EventSource.CONNECTING:\n                    listText(\"CONNECTING\");\n                    break;\n                case EventSource.OPEN:\n                    listText(\"OPEN\");\n                    break;\n                case EventSource.CLOSED:\n                    listText(\"CLOSED\");\n                    break;\n            }\n        }\n\n        function onMessage (evt) {\n            listText(`message: ${event.data}`);\n        }\n\n        function onClose (evt) {\n            listText(\"CLOSED\");\n            window.lastState = EventSource.CLOSED;\n        }\n\n        function listText (txt) {\n            const newElement = document.createElement(\"li\");\n            newElement.textContent = txt;\n            eventList.appendChild(newElement);\n            clearButton.disabled = false;\n        }\n\n        function clearText () {\n            eventList.innerHTML = \"\";\n            clearButton.disabled = true;\n        }\n\n    </script>\n</head>\n\n<body>\n    <label for=\"url\">SSE URL:</label>\n    <input type=\"text\" id=\"url\" value=\"/api/data\">\n    <button id=\"connect\">Connect</button>\n    <button id=\"disconnect\" disabled>Disconnect</button>\n    <button id=\"clear\" disabled>Clear</button>\n    <ul id=\"list\"></ul>\n</body>\n\n</html>",
        "output": "str",
        "x": 300,
        "y": 460,
        "wires": [
            [
                "13b3ee0cd2e84e8a"
            ]
        ]
    },
    {
        "id": "13b3ee0cd2e84e8a",
        "type": "http response",
        "z": "05b90c81d8e90a14",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 460,
        "wires": []
    },
    {
        "id": "1c523af552715ba5",
        "type": "buffer-parser",
        "z": "7fde02a3dbacda26",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "ProtocolVersion",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "MaximumChargeVoltage",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "MinimumDischargeVoltage",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "MaximumChargeCurrent",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "MinimumDischargeCurrent",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "BatteryVoltage",
                "offset": 18,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int32be",
                "name": "BatteryCurrent",
                "offset": 22,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.01",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "Temperature",
                "offset": 26,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "SOC",
                "offset": 28,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "Commands",
                "offset": 30,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "Warnings",
                "offset": 32,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "Faults",
                "offset": 34,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "State",
                "offset": 36,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "CycleCount",
                "offset": 38,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "SOH",
                "offset": 40,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint16be",
                "name": "CapacityFullCharge",
                "offset": 42,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "BMSCellMaxTemperatureC",
                "offset": 44,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "BMSCellMinTemperatureC",
                "offset": 46,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "CellMaxVolt",
                "offset": 48,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.001",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "CellMinVolt",
                "offset": 50,
                "length": 1,
                "offsetbit": 0,
                "scale": "0.001",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "LifetimeChargeEnergy",
                "offset": 52,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "LifetimeDischargeEnergy",
                "offset": 56,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "BatteryManufacturerID",
                "offset": 60,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "int16be",
                "name": "BatteryModelID",
                "offset": 62,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber1",
                "offset": 64,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber2",
                "offset": 66,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber3",
                "offset": 68,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber4",
                "offset": 70,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber5",
                "offset": 72,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber6",
                "offset": 74,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber7",
                "offset": 76,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber8",
                "offset": 78,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber9",
                "offset": 80,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "SerialNumber10",
                "offset": 82,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "ascii",
                "name": "UniqueID",
                "offset": 84,
                "length": 6,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 770,
        "y": 160,
        "wires": [
            [
                "f16d45ba125cee90"
            ]
        ]
    },
    {
        "id": "165da4096b3f0483",
        "type": "function",
        "z": "7fde02a3dbacda26",
        "name": "BMS",
        "func": "msg.payload = { \n    'fc': 4, \n    'unitid': 20, \n    'address': 0,\n    'quantity': 45\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "935612bb6d9d9bd9"
            ]
        ]
    },
    {
        "id": "935612bb6d9d9bd9",
        "type": "modbus-flex-getter",
        "z": "7fde02a3dbacda26",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "0bf62b5a82a31810",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 160,
        "wires": [
            [],
            [
                "1c523af552715ba5"
            ]
        ]
    },
    {
        "id": "f16d45ba125cee90",
        "type": "function",
        "z": "7fde02a3dbacda26",
        "name": "BMSCalculation",
        "func": "var BMS = msg.payload\nvar payload = {}\npayload['BMSAccountEnergy'] = parseFloat((((BMS['SOH']/100) * (BMS['SOC']/100) * BMS['CapacityFullCharge'] * 51.2) / 1000).toFixed(2))\npayload['BMSAccountPower'] = parseFloat((BMS['BatteryVoltage'] * BMS['BatteryCurrent'] / 1000).toFixed(2))\npayload['BMSTemperatureF'] = parseFloat(((((BMS['Temperature']) * 9) / 5) + 32).toFixed(2))\npayload['BMSCellMaxTemperatureF'] = parseFloat(((((BMS['BMSCellMaxTemperatureC']) * 9) / 5) + 32).toFixed(2))\npayload['BMSCellMinTemperatureF'] = parseFloat(((((BMS['BMSCellMinTemperatureC']) * 9) / 5) + 32).toFixed(2))\nvar data = Object.assign({}, BMS, payload)\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9ee5dda9d5bedef9",
        "type": "inject",
        "z": "3acd283250bad6bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "2eb7ee49f2d5df53"
            ]
        ]
    },
    {
        "id": "2eb7ee49f2d5df53",
        "type": "function",
        "z": "3acd283250bad6bf",
        "name": "",
        "func": "\nmsg.payload = {\n    'fc': 3,\n    'address': 276,\n    'quantity': 28\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            [
                "0da04fa62bcb511c"
            ]
        ]
    },
    {
        "id": "0da04fa62bcb511c",
        "type": "modbus-flex-getter",
        "z": "3acd283250bad6bf",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 510,
        "y": 220,
        "wires": [
            [],
            [
                "6cda255c48ca8095"
            ]
        ]
    },
    {
        "id": "6cda255c48ca8095",
        "type": "buffer-parser",
        "z": "3acd283250bad6bf",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "GridInLife",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "GridInLifeDur",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item3",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item4",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item5",
                "offset": 16,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item6",
                "offset": 20,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item7",
                "offset": 24,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item8",
                "offset": 28,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item9",
                "offset": 32,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item10",
                "offset": 36,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item11",
                "offset": 40,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "item12",
                "offset": 44,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "GridOutLife",
                "offset": 48,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            },
            {
                "type": "uint32be",
                "name": "GridOutLifeDur",
                "offset": 52,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 710,
        "y": 220,
        "wires": [
            [
                "35013a54d2206728"
            ]
        ]
    },
    {
        "id": "3bc6db881f8c8336",
        "type": "debug",
        "z": "3acd283250bad6bf",
        "name": "",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "capacity",
        "targetType": "msg",
        "statusVal": "capacity",
        "statusType": "auto",
        "x": 1070,
        "y": 220,
        "wires": []
    },
    {
        "id": "35013a54d2206728",
        "type": "function",
        "z": "3acd283250bad6bf",
        "name": "The Big Math",
        "func": "\n// BESS performance numbers\nconst idleLoss = 1.5 / 24;\nconst chargeEff = 0.95;\nconst dischargeEff = 0.97;\n\n// A complete guess\nconst startingCapacity = 8.5;\n\n// Inverter data when the above 'guess' was made\nconst startingLife = 205.569;\nconst startingDur = 1315.6;\nconst startingTime = new Date('December 15, 2023 03:00:00 PM EST');\n\n// Calculations\nlet inv = msg.keyvalues;\n\nlet chargedCapacity = (chargeEff * inv.GridInLife - (2 - dischargeEff) * inv.GridOutLife) - startingLife;\nlet activeDuration = (inv.GridInLifeDur + inv.GridOutLifeDur) / (60 * 60) - startingDur;\nlet idleDuration = ((new Date()).getTime() - startingTime.getTime()) / (1000 * 60 * 60) - activeDuration;\n\nmsg.capacity = startingCapacity + chargedCapacity - idleDuration * idleLoss;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 220,
        "wires": [
            [
                "3bc6db881f8c8336"
            ]
        ]
    },
    {
        "id": "ccbb9271422cf257",
        "type": "subflow:da1113f849ed321d",
        "z": "3acd283250bad6bf",
        "name": "",
        "env": [
            {
                "name": "device",
                "value": "inv503",
                "type": "str"
            },
            {
                "name": "model",
                "value": "c1",
                "type": "str"
            },
            {
                "name": "modeladdr",
                "value": "0",
                "type": "num"
            },
            {
                "name": "Device",
                "value": "",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 380,
        "wires": [
            [
                "cca822fe1bdab09c"
            ]
        ]
    },
    {
        "id": "2ea539e88be49351",
        "type": "function",
        "z": "3acd283250bad6bf",
        "name": "",
        "func": "\nmsg.payload = [\n    {\n        start: 72,\n        endinc: 103,\n    },\n    {\n        start: 276,\n        endinc: 389,\n    },\n    {\n        start: 412,\n        endinc: 525,\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "ccbb9271422cf257"
            ]
        ]
    },
    {
        "id": "16c6cc1c657b108c",
        "type": "inject",
        "z": "3acd283250bad6bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "2ea539e88be49351"
            ]
        ]
    },
    {
        "id": "cca822fe1bdab09c",
        "type": "debug",
        "z": "3acd283250bad6bf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "2b3cd846f06e3692",
        "type": "subflow:da1113f849ed321d",
        "z": "3acd283250bad6bf",
        "name": "",
        "env": [
            {
                "name": "device",
                "value": "inv502",
                "type": "str"
            },
            {
                "name": "model",
                "value": "802",
                "type": "str"
            },
            {
                "name": "modeladdr",
                "value": "40070",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "cca822fe1bdab09c"
            ]
        ]
    },
    {
        "id": "467107d9cc7bfc4e",
        "type": "function",
        "z": "3acd283250bad6bf",
        "name": "",
        "func": "\nmsg.payload = [\n    {\n        start: 40081,\n        endinc: 40083,\n        unitid: 230\n    },\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 440,
        "wires": [
            [
                "2b3cd846f06e3692"
            ]
        ]
    },
    {
        "id": "fee8ef24b2e6881b",
        "type": "inject",
        "z": "3acd283250bad6bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "467107d9cc7bfc4e"
            ]
        ]
    },
    {
        "id": "d1774c0a70d2a97e",
        "type": "inject",
        "z": "9c7b6bcb5d3cc407",
        "name": "Tutorial Flow 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "a3f308a590040ee1"
            ]
        ]
    },
    {
        "id": "5b616e369bea0d79",
        "type": "debug",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "a3f308a590040ee1",
        "type": "function",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "func": "var date = new Date(msg.payload);\n\nmsg.payload = date.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "5b616e369bea0d79"
            ]
        ]
    },
    {
        "id": "f06639ed8794e83a",
        "type": "inject",
        "z": "9c7b6bcb5d3cc407",
        "name": "Tutorial Flow 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "84468c2d7c3707b1"
            ]
        ]
    },
    {
        "id": "84468c2d7c3707b1",
        "type": "http request",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "cb9ae70ab610a89e"
            ]
        ]
    },
    {
        "id": "cb9ae70ab610a89e",
        "type": "csv",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 280,
        "wires": [
            [
                "94e712a50f27a054"
            ]
        ]
    },
    {
        "id": "12f1634f64c422ed",
        "type": "debug",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 400,
        "wires": []
    },
    {
        "id": "94e712a50f27a054",
        "type": "switch",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "property": "payload.mag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "7",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 280,
        "wires": [
            [
                "830e7cda426bceb3",
                "801d03dbf420d585"
            ],
            [
                "12f1634f64c422ed"
            ]
        ]
    },
    {
        "id": "a83e8d84e221c8fb",
        "type": "debug",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 260,
        "wires": []
    },
    {
        "id": "830e7cda426bceb3",
        "type": "change",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PANIC!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "a83e8d84e221c8fb"
            ]
        ]
    },
    {
        "id": "801d03dbf420d585",
        "type": "debug",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 320,
        "wires": []
    },
    {
        "id": "da3cd65a9b721447",
        "type": "inject",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "hello",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "acb3cd86b0f0de50"
            ]
        ]
    },
    {
        "id": "c6da4aefbb117870",
        "type": "debug",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 640,
        "wires": []
    },
    {
        "id": "8b9f0faadc348a3d",
        "type": "buffer-parser",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "floatbe",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 410,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "acb3cd86b0f0de50",
        "type": "function",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "func": "msg.payload = [\n    {\n        start: 2,\n        endinc: 4,\n    }\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 560,
        "wires": [
            [
                "766dd9b08c763a61"
            ]
        ]
    },
    {
        "id": "766dd9b08c763a61",
        "type": "modbus-flex-getter",
        "z": "9c7b6bcb5d3cc407",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 290,
        "y": 660,
        "wires": [
            [
                "c6da4aefbb117870"
            ],
            []
        ]
    },
    {
        "id": "ba650aacd9b72e1b",
        "type": "inject",
        "z": "74744644deeb2c2d",
        "g": "b2b21d60fd034d5e",
        "name": "Manual Input",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "c402d84af592f391"
            ]
        ]
    },
    {
        "id": "5036fdd32d6954e9",
        "type": "debug",
        "z": "74744644deeb2c2d",
        "g": "b2b21d60fd034d5e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 300,
        "wires": []
    },
    {
        "id": "c402d84af592f391",
        "type": "function",
        "z": "74744644deeb2c2d",
        "g": "b2b21d60fd034d5e",
        "name": "Placeholder Inverter Data",
        "func": "msg.payload = {\n    inverterStatus: \"AC Pass Through\",\n    chargerStatus: \"Not Charging\",\n    backupPower: 0.03,\n    throughput: 928.79,\n    temperature: 29\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "5036fdd32d6954e9",
                "83cef3a930100b4a"
            ]
        ]
    },
    {
        "id": "20d64085c0001ed8",
        "type": "http in",
        "z": "74744644deeb2c2d",
        "g": "b2b21d60fd034d5e",
        "name": "",
        "url": "/dummyInverterStatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "c402d84af592f391"
            ]
        ]
    },
    {
        "id": "83cef3a930100b4a",
        "type": "http response",
        "z": "74744644deeb2c2d",
        "g": "b2b21d60fd034d5e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "1a68c9c2c02df7b1",
        "type": "http in",
        "z": "74744644deeb2c2d",
        "g": "03001057cd5c48a2",
        "name": "",
        "url": "dummyBmsStatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "f3358f1ccba50160"
            ]
        ]
    },
    {
        "id": "f3358f1ccba50160",
        "type": "function",
        "z": "74744644deeb2c2d",
        "g": "03001057cd5c48a2",
        "name": "Placeholder BMS Data",
        "func": "msg.payload = {\n    soc: 99,\n    temperature: 22\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 420,
        "wires": [
            [
                "70c12397d0049302"
            ]
        ]
    },
    {
        "id": "70c12397d0049302",
        "type": "http response",
        "z": "74744644deeb2c2d",
        "g": "03001057cd5c48a2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 420,
        "wires": []
    },
    {
        "id": "9798c35274a2c081",
        "type": "sqlite",
        "z": "74744644deeb2c2d",
        "g": "a8bbc03dfd9e8d54",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "prepared",
        "sql": "INSERT INTO voltage_current\n  (timestamp, voltage, current)\n  VALUES\n  ($timestamp, $voltage, $current);",
        "name": "Add Data",
        "x": 620,
        "y": 540,
        "wires": [
            [
                "4ac5872e35c8173e"
            ]
        ]
    },
    {
        "id": "534bfcabbd5462b5",
        "type": "inject",
        "z": "74744644deeb2c2d",
        "g": "a8bbc03dfd9e8d54",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "175ef019e4dd417e"
            ]
        ]
    },
    {
        "id": "175ef019e4dd417e",
        "type": "function",
        "z": "74744644deeb2c2d",
        "g": "a8bbc03dfd9e8d54",
        "name": "dummyParamsGenerator",
        "func": "let params = {};\nparams[\"$timestamp\"] = new Date(msg.payload);\nparams[\"$voltage\"] = (Math.random() * 2) + 51;\nparams[\"$current\"] = 5 / params.$voltage;\n\nmsg.params = params;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "9798c35274a2c081"
            ]
        ]
    },
    {
        "id": "4ac5872e35c8173e",
        "type": "debug",
        "z": "74744644deeb2c2d",
        "g": "a8bbc03dfd9e8d54",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "params",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 600,
        "wires": []
    },
    {
        "id": "fe7d7b78d7083376",
        "type": "sqlite",
        "z": "74744644deeb2c2d",
        "g": "aee3634cd98892d9",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM voltage_current\n  ORDER BY timestamp;",
        "name": "Retrieve Data",
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "c021c82a596df0b0"
            ]
        ]
    },
    {
        "id": "d2acc6a3ae0e2dfd",
        "type": "http in",
        "z": "74744644deeb2c2d",
        "g": "aee3634cd98892d9",
        "name": "",
        "url": "/dummy_voltage_current",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 980,
        "wires": [
            [
                "fe7d7b78d7083376"
            ]
        ]
    },
    {
        "id": "c021c82a596df0b0",
        "type": "http response",
        "z": "74744644deeb2c2d",
        "g": "aee3634cd98892d9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 980,
        "wires": []
    },
    {
        "id": "2e6c901e24c9a24e",
        "type": "debug",
        "z": "74744644deeb2c2d",
        "g": "abd1b67ed71f30c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1240,
        "wires": []
    },
    {
        "id": "868e82969d8ee366",
        "type": "modbus-getter",
        "z": "74744644deeb2c2d",
        "g": "abd1b67ed71f30c2",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "10",
        "dataType": "InputRegister",
        "adr": "123",
        "quantity": "1",
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "13a1333344ac2608"
            ],
            []
        ]
    },
    {
        "id": "a8643fec24d55610",
        "type": "inject",
        "z": "74744644deeb2c2d",
        "g": "abd1b67ed71f30c2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1180,
        "wires": [
            [
                "868e82969d8ee366"
            ]
        ]
    },
    {
        "id": "13a1333344ac2608",
        "type": "buffer-parser",
        "z": "74744644deeb2c2d",
        "g": "abd1b67ed71f30c2",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 470,
        "y": 1180,
        "wires": [
            [
                "b6a02b766b81babc"
            ]
        ]
    },
    {
        "id": "7705fa5b2b1f3b26",
        "type": "join",
        "z": "74744644deeb2c2d",
        "g": "abd1b67ed71f30c2",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 310,
        "y": 1240,
        "wires": [
            [
                "2e6c901e24c9a24e"
            ]
        ]
    },
    {
        "id": "b6a02b766b81babc",
        "type": "split",
        "z": "74744644deeb2c2d",
        "g": "abd1b67ed71f30c2",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 170,
        "y": 1240,
        "wires": [
            [
                "7705fa5b2b1f3b26"
            ]
        ]
    },
    {
        "id": "c5b1dae229421886",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "401d23dd2b193aa1",
                "339bf88bbcb8b2ae",
                "b69ecae4c195f324",
                "c6edc9bf19a533a2",
                "b1ccdf841d297156",
                "1023f3393f2faa95",
                "b8af68e819552965"
            ]
        ]
    },
    {
        "id": "287ad3a48c41f799",
        "type": "http response",
        "z": "8422413f2206a942",
        "g": "6312df9e9fa6a47f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1850,
        "y": 180,
        "wires": []
    },
    {
        "id": "1f839ccca882094b",
        "type": "join",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1490,
        "y": 240,
        "wires": [
            [
                "cf750d84368e9ea6"
            ]
        ]
    },
    {
        "id": "901aea3e3d56ecd4",
        "type": "debug",
        "z": "8422413f2206a942",
        "g": "6312df9e9fa6a47f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 300,
        "wires": []
    },
    {
        "id": "cf750d84368e9ea6",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "6312df9e9fa6a47f",
        "name": "Package Data",
        "func": "let msgList = {};\nObject.keys(msg.payload).forEach(key => {msgList[key] = msg.payload[key][key]});\n\nmsg.payload = msgList;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 240,
        "wires": [
            [
                "287ad3a48c41f799",
                "901aea3e3d56ecd4"
            ]
        ]
    },
    {
        "id": "5a0c75b9b6fb92e7",
        "type": "modbus-flex-getter",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "Read From Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 810,
        "y": 140,
        "wires": [
            [
                "da2f0e4678b5a868"
            ],
            []
        ]
    },
    {
        "id": "401d23dd2b193aa1",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[123] inverterStatus Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 122,\n    quantity: 1\n};\n\nmsg.topic = 'inverterStatus'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "339bf88bbcb8b2ae",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[124] chargerStatus Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 123,\n    quantity: 1\n};\n\nmsg.topic = 'chargerStatus'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "b69ecae4c195f324",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[155] ACLoadPower Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 154,\n    quantity: 2\n};\n\nmsg.topic = 'ACLoadPower'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "c6edc9bf19a533a2",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[229] energyLifetime Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 228,\n    quantity: 2\n};\n\nmsg.topic = 'energyLifetime'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 260,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "b1ccdf841d297156",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[87] temperature Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 86,\n    quantity: 1\n};\n\nmsg.topic = 'temperature'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 300,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "da2f0e4678b5a868",
        "type": "switch",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "inverterStatus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chargerStatus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ACLoadPower",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "energyLifetime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "temperature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "voltage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "current",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 810,
        "y": 260,
        "wires": [
            [
                "ccc71507e7f7841b"
            ],
            [
                "4c068b3e5e73c6d8"
            ],
            [
                "d5d4758dd4315988"
            ],
            [
                "28fd59b15cc75d04"
            ],
            [
                "c39845af558534d1"
            ],
            [
                "406db0909b60721b"
            ],
            [
                "83a829f58c60425c"
            ]
        ]
    },
    {
        "id": "ccc71507e7f7841b",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "inverterStatus",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "602d324a5a26df9e"
            ]
        ]
    },
    {
        "id": "4c068b3e5e73c6d8",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "chargerStatus",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1080,
        "y": 180,
        "wires": [
            [
                "2d671db85bd7543a"
            ]
        ]
    },
    {
        "id": "d5d4758dd4315988",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "ACLoadPower",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1180,
        "y": 220,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "28fd59b15cc75d04",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "energyLifetime",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "c39845af558534d1",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "temperature",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".01",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1080,
        "y": 300,
        "wires": [
            [
                "a139769e8e86a898"
            ]
        ]
    },
    {
        "id": "a139769e8e86a898",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Scale Temperature",
        "func": "const temp = msg.payload.temperature - 273;\nmsg.payload.temperature = temp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 300,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "c42e2b72efafb217",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/temp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "b1ccdf841d297156"
            ]
        ]
    },
    {
        "id": "64bb070eae83c78a",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/energyLifetime",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "c6edc9bf19a533a2"
            ]
        ]
    },
    {
        "id": "50713526eed774f0",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/loadPower",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "b69ecae4c195f324"
            ]
        ]
    },
    {
        "id": "561ba5279345f3e2",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/chargerStatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "339bf88bbcb8b2ae"
            ]
        ]
    },
    {
        "id": "4c38c8a4a1e57e45",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/inverterStatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "401d23dd2b193aa1"
            ]
        ]
    },
    {
        "id": "5da1361b3651eafa",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/voltage",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "1023f3393f2faa95"
            ]
        ]
    },
    {
        "id": "b8587bfd34ee1712",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "75a2e5efe721c76e",
        "name": "",
        "url": "/inverter/current",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "b8af68e819552965"
            ]
        ]
    },
    {
        "id": "1023f3393f2faa95",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[81] voltage Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 80,\n    quantity: 2\n};\n\nmsg.topic = 'voltage'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "b8af68e819552965",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "831b1d5e435f25d0",
        "name": "[83] current Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 82,\n    quantity: 2\n};\n\nmsg.topic = 'current'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "5a0c75b9b6fb92e7"
            ]
        ]
    },
    {
        "id": "406db0909b60721b",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "voltage",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "83a829f58c60425c",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "current",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1180,
        "y": 380,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "cec22cc792d9c6e6",
        "type": "inject",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "9fc18d1882191ae2",
        "type": "sqlite",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "prepared",
        "sql": "INSERT INTO voltage_current\n  (timestamp, voltage, current)\n  VALUES\n  ($timestamp, $voltage, $current);",
        "name": "Insert Data Into Database",
        "x": 1350,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6135f2a70a8670e3",
        "type": "modbus-flex-getter",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "ec3173feb119ae21"
            ],
            []
        ]
    },
    {
        "id": "34c7556b6258aa9b",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "[81] voltage Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\n\nmsg.timestamp = msg.payload;\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 80,\n    quantity: 2\n};\n\nmsg.topic = 'voltage'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 580,
        "wires": [
            [
                "6135f2a70a8670e3"
            ]
        ]
    },
    {
        "id": "418b26dcb37c1b04",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "[83] current Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    unitid: 10,\n    fc: 3,\n    address: 82,\n    quantity: 2\n};\n\nmsg.topic = 'current'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 620,
        "wires": [
            [
                "6135f2a70a8670e3"
            ]
        ]
    },
    {
        "id": "ec3173feb119ae21",
        "type": "switch",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "voltage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "current",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 620,
        "wires": [
            [
                "9c42226b3814a5cf"
            ],
            [
                "46f66e9cf0273e20"
            ]
        ]
    },
    {
        "id": "9c42226b3814a5cf",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "voltage",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 800,
        "y": 580,
        "wires": [
            [
                "28786c7c6a44965c"
            ]
        ]
    },
    {
        "id": "46f66e9cf0273e20",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "current",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": ".001",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 800,
        "y": 620,
        "wires": [
            [
                "28786c7c6a44965c"
            ]
        ]
    },
    {
        "id": "28786c7c6a44965c",
        "type": "join",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "5a527f1722be0e17"
            ]
        ]
    },
    {
        "id": "5a527f1722be0e17",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "Package Data",
        "func": "let msgList = {};\nObject.keys(msg.payload).forEach(key => {msgList[key] = msg.payload[key][key]});\n\nlet params = {};\nparams[\"$timestamp\"] = new Date(msgList.timestamp);\nparams[\"$voltage\"] = msgList.voltage;\nparams[\"$current\"] = msgList.current;\n\nmsg.params = params;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 580,
        "wires": [
            [
                "9fc18d1882191ae2",
                "edc91d01024973ed"
            ]
        ]
    },
    {
        "id": "c198551afb939cd0",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "timestamp Query",
        "func": "msg.payload = {timestamp: msg.payload};\nmsg.topic = 'timestamp';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 540,
        "wires": [
            [
                "28786c7c6a44965c"
            ]
        ]
    },
    {
        "id": "69e7fdb80d6fa5d6",
        "type": "inject",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 720,
        "wires": [
            [
                "c524a1157385f647"
            ]
        ]
    },
    {
        "id": "c524a1157385f647",
        "type": "sqlite",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "fixed",
        "sql": "CREATE TABLE voltage_current\n  ( timestamp datetime primary key,\n  voltage float not null,\n  current float not null );",
        "name": "Create Table",
        "x": 1330,
        "y": 720,
        "wires": [
            [
                "4b2545aaf87319aa"
            ]
        ]
    },
    {
        "id": "5155d2700d0dd48a",
        "type": "sqlite",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "fixed",
        "sql": "DROP TABLE voltage_current;",
        "name": "Delete Table",
        "x": 1330,
        "y": 780,
        "wires": [
            [
                "4b2545aaf87319aa"
            ]
        ]
    },
    {
        "id": "1a5b72538145810c",
        "type": "inject",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 780,
        "wires": [
            [
                "5155d2700d0dd48a"
            ]
        ]
    },
    {
        "id": "4b2545aaf87319aa",
        "type": "debug",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 780,
        "wires": []
    },
    {
        "id": "c107927a739dad05",
        "type": "inject",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 840,
        "wires": [
            [
                "9b8d5e324f64a6bd"
            ]
        ]
    },
    {
        "id": "9b8d5e324f64a6bd",
        "type": "sqlite",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM voltage_current ORDER BY timestamp;",
        "name": "Show Table",
        "x": 1330,
        "y": 840,
        "wires": [
            [
                "4b2545aaf87319aa"
            ]
        ]
    },
    {
        "id": "edc91d01024973ed",
        "type": "sqlite",
        "z": "8422413f2206a942",
        "g": "c1c4138f164a9c41",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "fixed",
        "sql": "DELETE FROM voltage_current\n  WHERE TIMESTAMP <=\n  strftime('%s','now', '-1 hours') * 1000;",
        "name": "Delete Data Older Than 1 Hour",
        "x": 1330,
        "y": 660,
        "wires": [
            [
                "4b2545aaf87319aa"
            ]
        ]
    },
    {
        "id": "0d6284f49faa3796",
        "type": "cronplus",
        "z": "8422413f2206a942",
        "g": "d384788f2ef31aca",
        "name": "Every Minute",
        "outputField": "payload",
        "timeZone": "America/New_York",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 130,
        "y": 620,
        "wires": [
            [
                "34c7556b6258aa9b",
                "418b26dcb37c1b04",
                "c198551afb939cd0"
            ]
        ]
    },
    {
        "id": "191db6b28f1634f4",
        "type": "sqlite",
        "z": "8422413f2206a942",
        "g": "6d3945f056c40f09",
        "mydb": "d7c68280520f9bec",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM voltage_current\n  ORDER BY timestamp;",
        "name": "Retrieve Data",
        "x": 540,
        "y": 760,
        "wires": [
            [
                "9e5b7c847419125d"
            ]
        ]
    },
    {
        "id": "855f46714f98c87b",
        "type": "http in",
        "z": "8422413f2206a942",
        "g": "6d3945f056c40f09",
        "name": "",
        "url": "/inverter/voltage_current_graph",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "191db6b28f1634f4"
            ]
        ]
    },
    {
        "id": "9e5b7c847419125d",
        "type": "http response",
        "z": "8422413f2206a942",
        "g": "6d3945f056c40f09",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 740,
        "wires": []
    },
    {
        "id": "602d324a5a26df9e",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Find InverterStatus",
        "func": "let status = \"Inverter Mode: \";\nswitch(msg.payload.inverterStatus) {\n    case 1024:\n    status += \"Invert\";\n    break;\n    case 1025:\n    status += \"AC Pass Through\";\n    break;\n    case 1026:\n    status += \"APS Only\";\n    break;\n    case 1027:\n    status += \"Load Sense\";\n    break;\n    case 1028:\n    status += \"Inverter Disabled\";\n    break;\n    case 1029:\n    status += \"Load Sense Ready\";\n    break;\n    case 1030:\n    status += \"Engaging Inverter\";\n    break;\n    case 1031:\n    status += \"Invert Fault\";\n    break;\n    case 1032:\n    status += \"Inverter Standby\";\n    break;\n    case 1033:\n    status += \"Grid-Tied\";\n    break;\n    case 1034:\n    status += \"Grid Support\";\n    break;\n    case 1035:\n    status += \"Gen Support\";\n    break;\n    case 1036:\n    status += \"Sell-to-Grid\";\n    break;\n    case 1037:\n    status += \"Load Shaving\";\n    break;\n    case 1038:\n    status += \"Grid Frequency Stabilization\";\n    break;\n    case 1039:\n    status += \"AC Coupling\";\n    break;\n    case 1040:\n    status += \"Reverse Ibatt\";\n    break;    \n    default:\n    status += \"Modbus Read Error\";\n}\nmsg.payload.inverterStatus = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 140,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "2d671db85bd7543a",
        "type": "function",
        "z": "8422413f2206a942",
        "g": "0a1b70476780fa02",
        "name": "Find ChargerStatus",
        "func": "let status = \"Charger Mode: \";\nswitch (msg.payload.chargerStatus) {\n    case 768:\n        status += \"Not Charging\";\n        break;\n    case 769:\n        status += \"Bulk\";\n        break;\n    case 770:\n        status += \"Absorption\";\n        break;\n    case 771:\n        status += \"Overcharge\";\n        break;\n    case 772:\n        status += \"Equalize\";\n        break;\n    case 773:\n        status += \"Float\";\n        break;\n    case 774:\n        status += \"No Float\";\n        break;\n    case 775:\n        status += \"Constant VI\";\n        break;\n    case 776:\n        status += \"Charger Disabled\";\n        break;\n    case 777:\n        status += \"Qualifying AC\";\n        break;\n    case 778:\n        status += \"Qualifying APS\";\n        break;\n    case 779:\n        status += \"Engaging Charger\";\n        break;\n    case 780:\n        status += \"Charge Fault\";\n        break;\n    case 781:\n        status += \"Charger Suspend\";\n        break;\n    case 782:\n        status += \"AC Good\";\n        break;\n    case 783:\n        status += \"APS Good\";\n        break;\n    case 784:\n        status += \"AC Fault\";\n        break;\n    case 785:\n        status += \"Charge\";\n        break;\n    case 786:\n        status += \"Absorption Exit Pending\";\n        break;\n    case 787:\n        status += \"Ground Fault\";\n        break;\n    case 788:\n        status += \"AC Good Pending\";\n        break;\n    default:\n        status += \"Modbus Read Error\";\n}\nmsg.payload.chargerStatus = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 180,
        "wires": [
            [
                "1f839ccca882094b"
            ]
        ]
    },
    {
        "id": "2eabd51cbb119872",
        "type": "modbus-flex-getter",
        "z": "8422413f2206a942",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ff919ca25c0fe87f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 550,
        "y": 980,
        "wires": [
            [
                "7337c6e263c8a329",
                "b2c1b7951feb6518"
            ],
            []
        ]
    },
    {
        "id": "dfdde1a8ca13e29e",
        "type": "function",
        "z": "8422413f2206a942",
        "name": "[14] SOC Query",
        "func": "/*unitid (0..255 tcp | 0..247 serial) - overrides default Unit-ID\nfc (1..4)\nstart address (0:65535)\nquantity (1:65535) of coils/inputs/registers to be read from the start address*/\nmsg.payload = {\n    value: msg.payload,\n    fc: 4,\n    address: 40177,\n    quantity: 1\n};\n\nmsg.topic = 'SOC'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 980,
        "wires": [
            [
                "2eabd51cbb119872"
            ]
        ]
    },
    {
        "id": "f47974937adf1e7e",
        "type": "http in",
        "z": "8422413f2206a942",
        "name": "",
        "url": "/BMS",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "dfdde1a8ca13e29e"
            ]
        ]
    },
    {
        "id": "e62c807d21b736af",
        "type": "buffer-parser",
        "z": "8422413f2206a942",
        "name": "Convert to type:sint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "SOC",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 820,
        "y": 1000,
        "wires": [
            [
                "1d4e2af2a37af4d7"
            ]
        ]
    },
    {
        "id": "1d4e2af2a37af4d7",
        "type": "join",
        "z": "8422413f2206a942",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "f19a07260fb77214"
            ]
        ]
    },
    {
        "id": "7337c6e263c8a329",
        "type": "switch",
        "z": "8422413f2206a942",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SOC",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 1040,
        "wires": [
            [
                "e62c807d21b736af"
            ]
        ]
    },
    {
        "id": "f19a07260fb77214",
        "type": "function",
        "z": "8422413f2206a942",
        "name": "Package Data",
        "func": "let msgList = {};\nObject.keys(msg.payload).forEach(key => {msgList[key] = msg.payload[key][key]});\n\nmsg.payload = msgList;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1020,
        "wires": [
            [
                "9f7b7d29d8a297f1"
            ]
        ]
    },
    {
        "id": "9f7b7d29d8a297f1",
        "type": "http response",
        "z": "8422413f2206a942",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b2c1b7951feb6518",
        "type": "debug",
        "z": "8422413f2206a942",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1120,
        "wires": []
    },
    {
        "id": "5ab65b769524ae27",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/inverterModbus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "dc4d7c9b4a8275fd"
            ]
        ]
    },
    {
        "id": "4f697dbd649ffdd5",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 440,
        "wires": [
            [
                "c73ecaf15201f03d",
                "bf26e2a2c43afc82"
            ],
            []
        ]
    },
    {
        "id": "d16e6f37e722934b",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint16'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "52fbcdd07673680f",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint32'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 2,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 480,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "f38804da0fa9f6bd",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Address For Size",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "/*uint16*/\tpayload.address in [\t   9,\t   10,\t   41,\t   42,\t   43,\t   60,\t   63,\t   64,\t   65,\t   66,\t   67,\t   68,\t   69,\t   70,\t   71,\t   72,\t   73,\t   74,\t   75,\t   76,\t   77,\t   78,\t   87,\t   88,\t   97,\t   98,\t   19,\t   120,\t   123,\t   124,\t   125,\t   126,\t   131,\t   132,\t   153,\t   154,\t   167,\t   168,\t   169,\t   170,\t   189,\t   190,\t   191,\t   192,\t   193,\t   194,\t   195,\t   353,\t   354,\t   355,\t   356,\t   357,\t   358,\t   359,\t   360,\t   361,\t   362,\t   363,\t   364,\t   365,\t   366,\t   367,\t   368,\t   369,\t   370,\t   371,\t   372,\t   375,\t   376,\t   383,\t   384,\t   387,\t   388,\t   391,\t   392,\t   393,\t   394,\t   399,\t   400,\t   403,\t   404,\t   405,\t   406,\t   409,\t   410,\t   415,\t   416,\t   427,\t   428,\t   429,\t   430,\t   431,\t   432,\t   433,\t   434,\t   435,\t   436,\t   441,\t   442,\t   445,\t   446,\t   447,\t   448,\t   451,\t   452,\t   455,\t   456,\t   459,\t   460,\t   463,\t   464,\t   465,\t   466,\t   467,\t   468,\t   469,\t   470,\t   471,\t   472,\t   473,\t   474,\t   475,\t   475,\t   477,\t   478,\t   479,\t   480,\t   481,\t   482,\t   483,\t   484,\t   485,\t   486,\t   487,\t   488,\t   489,\t   490,\t   491,\t   492,\t   493,\t   494,\t   495,\t   496,\t   497,\t   498,\t   501,\t   502,\t   503,\t   504,\t   505,\t   506,\t   507,\t   508,\t   511,\t   512,\t   515,\t   516,\t   519,\t   520,\t   521,\t   522\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint16*/\tpayload.address in [689]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*uint32*/ payload.address in [\t   21,\t   31,\t   61,\t   79,\t   81,\t   89,\t   91,\t   93,\t   95,\t   99,\t   105,\t   107,\t   109,\t   111,\t   115,\t   121,\t   127,\t   129,\t   133,\t   139,\t   141,\t   143,\t   145,\t   163,\t   165,\t   171,\t   173,\t   179,\t   183,\t   187,\t   209,\t   211,\t   213,\t   215,\t   217,\t   219,\t   221,\t   223,\t   224,\t   227,\t   229,\t   231,\t   233,\t   235,\t   237,\t   239,\t   241,\t   243,\t   245,\t   247,\t   249,\t   251,\t   253,\t   255,\t   257,\t   259,\t   261,\t   263,\t   265,\t   267,\t   269,\t   271,\t   273,\t   275,\t   277,\t   279,\t   281,\t   283,\t   285,\t   287,\t   289,\t   291,\t   293,\t   295,\t   297,\t   299,\t   301,\t   303,\t   305,\t   307,\t   309,\t   311,\t   313,\t   315,\t   317,\t   319,\t   321,\t   323,\t   325,\t   327,\t   329,\t   331,\t   333,\t   335,\t   337,\t   339,\t   341,\t   343,\t   345,\t   347,\t   349,\t   351,\t   373,\t   377,\t   379,\t   381,\t   385,\t   389,\t   395,\t   397,\t   401,\t   407,\t   411,\t   413,\t   417,\t   419,\t   421,\t   423,\t   425,\t   437,\t   439,\t   443,\t   449,\t   453,\t   457,\t   461,\t   499,\t   509,\t   513,\t   517,\t   523,\t   525,\t   527,\t   577,\t   579,\t   581,\t   583,\t   585,\t   587,\t   589,\t   591,\t   593,\t   595,\t   597,\t   599,\t   601,\t   603,\t   605,\t   607,\t   609,\t   611,\t   613,\t   615,\t   617,\t   619,\t   621,\t   623,\t   641,\t   643,\t   645,\t   647,\t   649,\t   651,\t   653,\t   655,\t   657,\t   659,\t   661,\t   663,\t   665,\t   667,\t   669,\t   671,\t   673,\t   675,\t   677,\t   679,\t   681,\t   683,\t   685,\t   687\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint32*/\tpayload.address in [\t   83,\t   85,\t   101,\t   103,\t   113,\t   117,\t   147,\t   149,\t   151,\t   155,\t   161,\t   181,\t   185\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str16*/\tpayload.address in [1]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str20*/\tpayload.address in [11]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str32*/\tpayload.address in [44]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 290,
        "y": 520,
        "wires": [
            [
                "d16e6f37e722934b"
            ],
            [
                "b58719eeb7ba7683"
            ],
            [
                "52fbcdd07673680f"
            ],
            [
                "c6b20ae27debb442"
            ],
            [
                "59877b613fee7bc9"
            ],
            [
                "f730a54212145b2d"
            ],
            [
                "a6f4ef9e14a0f0d0"
            ],
            [
                "f0b7e34e83c53beb"
            ]
        ]
    },
    {
        "id": "b58719eeb7ba7683",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint16'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 440,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "c6b20ae27debb442",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint32'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 2\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 520,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "59877b613fee7bc9",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str16'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 8\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 560,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "f730a54212145b2d",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str20)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str20'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 10\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 600,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "a6f4ef9e14a0f0d0",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str32'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address - 1,\n    quantity: 16\n}\n\nmsg.topic = 'result';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 640,
        "wires": [
            [
                "4f697dbd649ffdd5"
            ]
        ]
    },
    {
        "id": "c73ecaf15201f03d",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Type",
        "property": "modbusRequest.value.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "uint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str20",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str32",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 970,
        "y": 520,
        "wires": [
            [
                "da1fb287c9183ecf"
            ],
            [
                "f4820a96e0c71ae3"
            ],
            [
                "86c43dda33993f85"
            ],
            [
                "28632deb1da0845c"
            ],
            [
                "d2ab6abc93db82ac"
            ],
            [
                "58032a11c07bb77a"
            ],
            [
                "74c7281d254839c9"
            ],
            []
        ]
    },
    {
        "id": "da1fb287c9183ecf",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 440,
        "wires": [
            [
                "a8d25c269a5d6ff8"
            ]
        ]
    },
    {
        "id": "f4820a96e0c71ae3",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "a8d25c269a5d6ff8"
            ]
        ]
    },
    {
        "id": "86c43dda33993f85",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 520,
        "wires": [
            [
                "a8d25c269a5d6ff8"
            ]
        ]
    },
    {
        "id": "28632deb1da0845c",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 560,
        "wires": [
            [
                "a8d25c269a5d6ff8"
            ]
        ]
    },
    {
        "id": "d2ab6abc93db82ac",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 600,
        "wires": [
            [
                "9f8c323eec6fb974"
            ]
        ]
    },
    {
        "id": "58032a11c07bb77a",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str20",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 640,
        "wires": [
            [
                "8466a94c7f0b01f8"
            ]
        ]
    },
    {
        "id": "74c7281d254839c9",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item11",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item12",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item13",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item14",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item15",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item16",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 680,
        "wires": [
            [
                "e4a871fe6a21e3be"
            ]
        ]
    },
    {
        "id": "5fb4a7e108a9f47f",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1750,
        "y": 520,
        "wires": []
    },
    {
        "id": "bf26e2a2c43afc82",
        "type": "debug",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 380,
        "wires": []
    },
    {
        "id": "f74a8a1de47d6146",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to Number",
        "func": "msg.payload.address = Number(msg.payload.address);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 420,
        "wires": [
            [
                "f38804da0fa9f6bd"
            ]
        ]
    },
    {
        "id": "9f8c323eec6fb974",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1430,
        "y": 600,
        "wires": [
            [
                "ed7b7a4fd99b5ee6"
            ]
        ]
    },
    {
        "id": "ed7b7a4fd99b5ee6",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 600,
        "wires": [
            [
                "a082af0a7d2c94ac"
            ]
        ]
    },
    {
        "id": "5cf7b8046aab02ad",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Unit",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 81:\n    case 99:\n    case 111:\n    case 115:\n    case 127:\n    case 141:\n    case 143:\n    case 145:\n    case 163:\n    case 179:\n    case 183:\n    case 373:\n    case 377:\n    case 379:\n    case 381:\n    case 385:\n    case 389:\n    case 395:\n    case 397:\n    case 401:\n    case 407:\n    case 411:\n    case 413:\n    case 417:\n    case 419:\n    case 421:\n    case 423:\n    case 425:\n    case 474:\n    case 475:\n    case 476:\n    case 477:\n    case 478:\n    case 499:\n    case 577:\n    case 591:\n    case 595:\n    case 601:\n    case 615:\n    case 619:\n        msg.payload.result += ' V';\n        break;\n    case 83:\n    case 89:\n    case 93:\n    case 101:\n    case 107:\n    case 113:\n    case 117:\n    case 129:\n    case 147:\n    case 149:\n    case 151:\n    case 165:\n    case 181:\n    case 185:\n    case 393:\n    case 394:\n    case 437:\n    case 439:\n    case 443:\n    case 469:\n    case 523:\n    case 525:\n    case 527:\n    case 579:\n    case 593:\n    case 597:\n    case 603:\n    case 617:\n    case 621:\n        msg.payload.result += ' A';\n        break;\n    case 85:\n    case 91:\n    case 95:\n    case 103:\n    case 109:\n    case 133:\n    case 155:\n    case 173:\n    case 404:\n    case 589:\n    case 613:\n        msg.payload.result += ' W';\n        break;\n    case 87:\n    case 449:\n    case 453:\n    case 457:\n    case 461:\n    case 509:\n    case 513:\n        msg.payload.result += ' C';\n        break;\n    case 97:\n    case 368:\n    case 472:\n    case 473:\n    case 484:\n    case 488:\n    case 489:\n    case 491:\n    case 493:\n    case 512:\n        msg.payload.result += ' %';\n        break;\n    case 98:\n    case 131:\n    case 153:\n    case 167:\n    case 431:\n    case 432:\n    case 433:\n    case 434:\n    case 481:\n    case 482:\n    case 483:\n    case 485:\n    case 486:\n    case 487:\n    case 581:\n    case 605:\n        msg.payload.result += ' Hz';\n        break;\n    case 105:\n    case 139:\n    case 161:\n    case 187:\n    case 599:\n    case 623:\n        msg.payload.result += ' VA';\n        break;\n    case 121:\n    case 171:\n    case 211:\n    case 215:\n    case 219:\n    case 223:\n    case 227:\n    case 231:\n    case 235:\n    case 239:\n    case 243:\n    case 247:\n    case 251:\n    case 255:\n    case 259:\n    case 263:\n    case 267:\n    case 271:\n    case 275:\n    case 279:\n    case 283:\n    case 287:\n    case 291:\n    case 295:\n    case 299:\n    case 303:\n    case 307:\n    case 311:\n    case 315:\n    case 319:\n    case 323:\n    case 327:\n    case 331:\n    case 335:\n    case 339:\n    case 343:\n    case 347:\n    case 351:\n    case 383:\n    case 387:\n    case 391:\n    case 399:\n    case 403:\n    case 405:\n    case 415:\n    case 451:\n    case 455:\n    case 459:\n    case 463:\n    case 470:\n    case 479:\n    case 492:\n    case 494:\n    case 502:\n    case 503:\n    case 511:\n    case 515:\n    case 647:\n    case 651:\n    case 655:\n    case 659:\n    case 663:\n    case 667:\n    case 671:\n    case 675:\n    case 679:\n    case 683:\n    case 687:\n        msg.payload.result += ' s';\n        break;\n    case 209:\n    case 213:\n    case 217:\n    case 221:\n    case 225:\n    case 229:\n    case 233:\n    case 237:\n    case 241:\n    case 245:\n    case 249:\n    case 253:\n    case 257:\n    case 261:\n    case 265:\n    case 269:\n    case 273:\n    case 277:\n    case 281:\n    case 285:\n    case 289:\n    case 293:\n    case 297:\n    case 301:\n    case 305:\n    case 309:\n    case 313:\n    case 317:\n    case 321:\n    case 325:\n    case 329:\n    case 333:\n    case 337:\n    case 341:\n    case 345:\n    case 349:\n    case 641:\n    case 645:\n    case 649:\n    case 653:\n    case 657:\n    case 661:\n    case 665:\n    case 669:\n    case 673:\n    case 677:\n    case 681:\n    case 685:\n        msg.payload.result += ' kWh';\n        break;\n    case 375:\n        msg.payload.result += ' Ah';\n        break;\n    case 376:\n        msg.payload.result += ' mV/C'\n        break;\n    case 427:\n    case 428:\n    case 429:\n    case 430:\n    case 504:\n    case 505:\n    case 506:\n    case 507:\n        msg.payload.result += ' min';\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 540,
        "wires": [
            [
                "5fb4a7e108a9f47f"
            ]
        ]
    },
    {
        "id": "a8d25c269a5d6ff8",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Scale Number",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 81:\n    case 83:\n    case 89:\n    case 93:\n    case 99:\n    case 101:\n    case 107:\n    case 111:\n    case 113:\n    case 115:\n    case 117:\n    case 127:\n    case 129:\n    case 141:\n    case 143:\n    case 145:\n    case 147:\n    case 149:\n    case 151:\n    case 163:\n    case 165:\n    case 179:\n    case 181:\n    case 183:\n    case 185:\n    case 209:\n    case 213:\n    case 217:\n    case 221:\n    case 225:\n    case 229:\n    case 233:\n    case 237:\n    case 241:\n    case 245:\n    case 249:\n    case 253:\n    case 257:\n    case 261:\n    case 265:\n    case 269:\n    case 273:\n    case 277:\n    case 281:\n    case 285:\n    case 289:\n    case 293:\n    case 297:\n    case 301:\n    case 305:\n    case 309:\n    case 313:\n    case 317:\n    case 321:\n    case 325:\n    case 329:\n    case 333:\n    case 337:\n    case 341:\n    case 345:\n    case 349:\n    case 373:\n    case 377:\n    case 379:\n    case 381:\n    case 385:\n    case 389:\n    case 395:\n    case 397:\n    case 401:\n    case 407:\n    case 411:\n    case 413:\n    case 417:\n    case 419:\n    case 421:\n    case 423:\n    case 425:\n    case 437:\n    case 439:\n    case 443:\n    case 449:\n    case 453:\n    case 457:\n    case 461:\n    case 499:\n    case 509:\n    case 513:\n    case 523:\n    case 525:\n    case 527:\n    case 557:\n    case 579:\n    case 591:\n    case 593:\n    case 595:\n    case 597:\n    case 601:\n    case 603:\n    case 615:\n    case 617:\n    case 619:\n    case 621:\n    case 641:\n    case 645:\n    case 649:\n    case 653:\n    case 657:\n    case 661:\n    case 665:\n    case 669:\n    case 673:\n    case 677:\n    case 681:\n    case 685:\n        msg.payload.result /= 10;\n    case 87:\n    case 98:\n    case 131:\n    case 153:\n    case 167:\n    case 383:\n    case 387:\n    case 391:\n    case 393:\n    case 394:\n    case 399:\n    case 403:\n    case 405:\n    case 431:\n    case 432:\n    case 433:\n    case 434:\n    case 451:\n    case 455:\n    case 459:\n    case 463:\n    case 470:\n    case 472:\n    case 473:\n    case 474:\n    case 475:\n    case 476:\n    case 477:\n    case 478:\n    case 479:\n    case 481:\n    case 482:\n    case 483:\n    case 485:\n    case 486:\n    case 487:\n    case 492:\n    case 494:\n    case 502:\n    case 503:\n    case 511:\n    case 515:\n    case 581:\n    case 605:\n    case 689:\n        msg.payload.result /= 100;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 440,
        "wires": [
            [
                "546a22c67a82a35f"
            ]
        ]
    },
    {
        "id": "546a22c67a82a35f",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Offset",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 87:\n    case 449:\n    case 453:\n    case 457:\n    case 461:\n    case 509:\n    case 513:\n        msg.payload.result -= 273;\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 500,
        "wires": [
            [
                "5cf7b8046aab02ad"
            ]
        ]
    },
    {
        "id": "0de632bb43c07717",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/BMSModbus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "3c00a464d9a6d774"
            ]
        ]
    },
    {
        "id": "3c00a464d9a6d774",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to Number",
        "func": "msg.payload.address = Number(msg.payload.address);\nmsg.payload.device = Number(msg.payload.device);\nmsg.payload.fpr = Number(msg.payload.fpr);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 920,
        "wires": [
            [
                "7fa3a3d23d31accc"
            ]
        ]
    },
    {
        "id": "7fa3a3d23d31accc",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Address For Size",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "/*uint16*/\tpayload.address in [\t   0,\t   14,\t   15,\t   16,\t   17,\t   18,\t   19,\t   20,\t   21,\t   24,\t   25,\t   30,\t   31\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint16*/\tpayload.address in [13, 22, 23]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*uint32*/ payload.address in [\t   1, 3, 9, 26, 28\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint32*/\tpayload.address in [\t   5, 7, 11\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str18*/\tpayload.address in [32]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str6*/\tpayload.address in [42]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 290,
        "y": 1000,
        "wires": [
            [
                "95a139c2eac0c8de"
            ],
            [
                "32bf67982b2daecc"
            ],
            [
                "d19e8a9087e577fd"
            ],
            [
                "5cbfa6b455157a30"
            ],
            [
                "f687852f54826470"
            ],
            [
                "ce79c06c873b6450"
            ],
            [
                "76f3ea670b1d0f3a"
            ]
        ]
    },
    {
        "id": "95a139c2eac0c8de",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint16'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address + (30001 * msg.payload.fpr),\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 840,
        "wires": [
            [
                "717f686b962cd79c",
                "f78a8c7c9f1f8fe8"
            ]
        ]
    },
    {
        "id": "d19e8a9087e577fd",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint32'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address + (30001 * msg.payload.fpr),\n    quantity: 2,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 920,
        "wires": [
            [
                "717f686b962cd79c"
            ]
        ]
    },
    {
        "id": "32bf67982b2daecc",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint16'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address + (30001 * msg.payload.fpr),\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 880,
        "wires": [
            [
                "717f686b962cd79c"
            ]
        ]
    },
    {
        "id": "5cbfa6b455157a30",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint32'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address + (30001 * msg.payload.fpr),\n    quantity: 2\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 960,
        "wires": [
            [
                "717f686b962cd79c"
            ]
        ]
    },
    {
        "id": "f687852f54826470",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str18)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str18'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address + (30001 * msg.payload.fpr),\n    quantity: 9\n}\n\nmsg.topic = 'result';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "717f686b962cd79c"
            ]
        ]
    },
    {
        "id": "ce79c06c873b6450",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str6)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str6'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address + (30001 * msg.payload.fpr),\n    quantity: 3\n}\n\nmsg.topic = 'result';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1040,
        "wires": [
            [
                "717f686b962cd79c"
            ]
        ]
    },
    {
        "id": "717f686b962cd79c",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read BMS",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "0bf62b5a82a31810",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 930,
        "y": 840,
        "wires": [
            [
                "aa38f19f7acce3ea",
                "f78a8c7c9f1f8fe8"
            ],
            []
        ]
    },
    {
        "id": "f78a8c7c9f1f8fe8",
        "type": "debug",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 780,
        "wires": []
    },
    {
        "id": "aa38f19f7acce3ea",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Type",
        "property": "modbusRequest.value.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "uint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str18",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 970,
        "y": 920,
        "wires": [
            [
                "40a4cdb542b323be"
            ],
            [
                "c2b9418c408d8aa7"
            ],
            [
                "7e44cde18ac5465a"
            ],
            [
                "a475a813c554930a"
            ],
            [
                "dbe67b2bfd97d976"
            ],
            [
                "351a765e4fd72255"
            ]
        ]
    },
    {
        "id": "40a4cdb542b323be",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 840,
        "wires": [
            [
                "2c6e18069bed112f"
            ]
        ]
    },
    {
        "id": "c2b9418c408d8aa7",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 880,
        "wires": [
            [
                "2c6e18069bed112f"
            ]
        ]
    },
    {
        "id": "7e44cde18ac5465a",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 920,
        "wires": [
            [
                "2c6e18069bed112f"
            ]
        ]
    },
    {
        "id": "a475a813c554930a",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 960,
        "wires": [
            [
                "2c6e18069bed112f"
            ]
        ]
    },
    {
        "id": "dbe67b2bfd97d976",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str18",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 1000,
        "wires": [
            [
                "a75cc8a915411173"
            ]
        ]
    },
    {
        "id": "351a765e4fd72255",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str6",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1190,
        "y": 1040,
        "wires": [
            [
                "c219a1cd6f1cb15f"
            ]
        ]
    },
    {
        "id": "309534ee2db33266",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1690,
        "y": 900,
        "wires": []
    },
    {
        "id": "a75cc8a915411173",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1390,
        "y": 960,
        "wires": [
            [
                "afa5b34f2851757b"
            ]
        ]
    },
    {
        "id": "afa5b34f2851757b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1510,
        "y": 960,
        "wires": [
            [
                "8982850f1d2b4c59"
            ]
        ]
    },
    {
        "id": "54af9ef7ce0c0115",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Unit",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 1:\n    case 3:\n    case 9:\n    case 24:\n    case 25:\n        msg.payload.result += ' V';\n        break;\n    case 5:\n    case 7:\n    case 11:\n        msg.payload.result += ' A';\n        break;\n    case 26:\n    case 28:\n        msg.payload.result += ' Wh';\n        break;\n    case 13:\n    case 22:\n    case 23:\n        msg.payload.result += ' C';\n        break;\n    case 14:\n    case 20:\n        msg.payload.result += ' %';\n        break;\n    case 21:\n        msg.payload.result += ' Ah';\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 900,
        "wires": [
            [
                "309534ee2db33266"
            ]
        ]
    },
    {
        "id": "2c6e18069bed112f",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Scale Number",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 24:\n    case 25:\n        msg.payload.result /= 10;\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 9:\n    case 11:\n        msg.payload.result /= 10;\n    case 13:\n    case 14:\n    case 21:\n    case 22:\n    case 23:\n        msg.payload.result /= 10;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 840,
        "wires": [
            [
                "54af9ef7ce0c0115"
            ]
        ]
    },
    {
        "id": "a082af0a7d2c94ac",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1710,
        "y": 640,
        "wires": [
            [
                "5fb4a7e108a9f47f"
            ]
        ]
    },
    {
        "id": "1ad60de35dd98cc9",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/WattnodeModbus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "d39b781eefd305b8"
            ]
        ]
    },
    {
        "id": "d39b781eefd305b8",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to Number",
        "func": "msg.payload.address = Number(msg.payload.address);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1200,
        "wires": [
            [
                "feebffb70b6dcbdb"
            ]
        ]
    },
    {
        "id": "feebffb70b6dcbdb",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Address For Size",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "/*uInt16*/ payload.address in [1628]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sInt16*/\tpayload.address in [\t   1209,\t   1210,\t   1211,\t   1212,\t   1343,\t   1344,\t   1345,\t   1346,\t   1347,\t   1348,\t   1349,\t   1350,\t   1213,\t   1214,\t   1215,\t   1216,\t   1217,\t   1218,\t   1219,\t   1220,\t   1351,\t   1352,\t   1353,\t   1380,\t   1221,\t   1339,\t   1340,\t   1341,\t   1342,\t   1354,\t   1355,\t   1356,\t   1357,\t   1358,\t   1359,\t   1360,\t   1603,\t   1604,\t   1605,\t   1606,\t   1607,\t   1608,\t   1609,\t   1610,\t   1611,\t   1612,\t   1613,\t   1614,\t   1615,\t   1616,\t   1617,\t   1618,\t   1619,\t   1620,\t   1621,\t   1622,\t   1623,\t   1624,\t   1625,\t   1626,\t   1627,\t   1636,\t   1637,\t   1638,\t   1685,\t   1686,\t   1651,\t   1652,\t   1653,\t   1654,\t   1655,\t   1656,\t   1659,\t   1707,\t   1708,\t   1710,\t   1711,\t   1712,\t   1713,\t   1714,\t   1715,\t   1716,\t   1717,\t   1718,\t   1719,\t   1720,\t   1721,\t   1722,\t   1723,\t   1760,\t   1761,\t   1762,\t   1709,\t   1724,\t   1725,\t   1726,\t   1727,\t   1728,\t   1729,\t   1730,\t   1737,\t   1738,\t   1739,\t   1740,\t   1741,\t   40002,\t   40003,\t   40070,\t   40071,\t   40072,\t   40073,\t   40074,\t   40075,\t   40076,\t   40077,\t   40078,\t   40079,\t   40080,\t   40081,\t   40082,\t   40083,\t   40084,\t   40085,\t   40086,\t   40087,\t   40088,\t   40089,\t   40090,\t   40091,\t   40092,\t   40093,\t   40094,\t   40095,\t   40096,\t   40097,\t   40098,\t   40099,\t   40100,\t   40401,\t   40102,\t   40103,\t   40104,\t   40105,\t   40106,\t   40107,\t   40124,\t   40141,\t   40174,\t   40177,\t   40178\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sInt32*/\tpayload.address in [\t   1201,\t   1205,\t   1301,\t   1303,\t   1305,\t   1203,\t   1207,\t   1307,\t   1309,\t   1311,\t   1313,\t   1315,\t   1317,\t   1319,\t   1321,\t   1323,\t   1325,\t   1327,\t   1329,\t   1370,\t   1364,\t   1366,\t   1368,\t   1378,\t   1372,\t   1374,\t   1376,\t   1331,\t   1333,\t   1335,\t   1337,\t   1601,\t   1657,\t   1,\t   1701,\t   1703,\t   1705,\t   40108,\t   40110,\t   40112,\t   40114,\t   40116,\t   40118,\t   40120,\t   40122,\t   40125,\t   40127,\t   40129,\t   40131,\t   40133,\t   40135,\t   40137,\t   40139,\t   40142,\t   40144,\t   40146,\t   40148,\t   40150,\t   40152,\t   40154,\t   40156,\t   40158,\t   40160,\t   40162,\t   40164,\t   40166,\t   40168,\t   40170,\t   40172,\t   40175\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sFloat32*/\tpayload.address in [\t   1001,\t   1005,\t   1101,\t   1103,\t   1105,\t   1003,\t   1007,\t   1107,\t   1109,\t   1111,\t   1113,\t   1115,\t   1117,\t   1119,\t   1121,\t   1009,\t   1011,\t   1013,\t   1015,\t   1035,\t   1037,\t   1039,\t   1041,\t   1043,\t   1123,\t   1125,\t   1127,\t   1129,\t   1189,\t   1183,\t   1185,\t   1187,\t   1197,\t   1191,\t   1193,\t   1195,\t   1131,\t   1133,\t   1135,\t   1137,\t   1147,\t   1149,\t   1151,\t   1153,\t   1155,\t   1157,\t   1159,\t   1161,\t   1017,\t   1019,\t   1021,\t   1023,\t   1025,\t   1027,\t   1029,\t   1031,\t   1163,\t   1165,\t   1167,\t   1199,\t   1033,\t   1139,\t   1141,\t   1143,\t   1145,\t   1169,\t   1171,\t   1173,\t   1175,\t   1177,\t   1179,\t   1181,\t   1629,\t   1631,\t   1633,\t   1639,\t   40179,\t   40181,\t   40183,\t   40185,\t   40187,\t   40189,\t   40191,\t   40193,\t   40195,\t   40197,\t   40199,\t   40201,\t   40203,\t   40205,\t   40207,\t   40209,\t   40211,\t   40213,\t   40215,\t   40217,\t   40219,\t   40221,\t   40223,\t   40225,\t   40227,\t   40229,\t   40231,\t   40233,\t   40235,\t   40237,\t   40239,\t   40241,\t   40243,\t   40245,\t   40247,\t   40249,\t   40251,\t   40253,\t   40255,\t   40257,\t   40259,\t   40261,\t   40263,\t   40265,\t   40267,\t   40269,\t   40271,\t   40273,\t   40275,\t   40277,\t   40279,\t   40281,\t   40283,\t   40285,\t   40287,\t   40289,\t   40291,\t   40293,\t   40295,\t   40297,\t   40299,\t   40301\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str16*/ payload.address in [40036, 40044]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str32*/ payload.address in [40004, 40020, 40052]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 290,
        "y": 1300,
        "wires": [
            [
                "990a9cd1b2448b4a"
            ],
            [
                "b74358d8a27eb262"
            ],
            [
                "e2def659259e4275"
            ],
            [
                "69b079b726c1f62f"
            ],
            [
                "9af625e10d99e9d6"
            ],
            [
                "536d96a229d4545e"
            ],
            [
                "67ad6c57401a41cc"
            ]
        ]
    },
    {
        "id": "d6b1193d9451b13d",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Wattnode",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ff919ca25c0fe87f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 1260,
        "wires": [
            [
                "3ff269715dab085d",
                "42193a90ec9d18bc"
            ],
            []
        ]
    },
    {
        "id": "990a9cd1b2448b4a",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint16'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1220,
        "wires": [
            [
                "d6b1193d9451b13d"
            ]
        ]
    },
    {
        "id": "e2def659259e4275",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint32'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 2,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1300,
        "wires": [
            [
                "d6b1193d9451b13d"
            ]
        ]
    },
    {
        "id": "b74358d8a27eb262",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint16'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1260,
        "wires": [
            [
                "d6b1193d9451b13d"
            ]
        ]
    },
    {
        "id": "69b079b726c1f62f",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sfloat32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sfloat32'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 2\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "d6b1193d9451b13d"
            ]
        ]
    },
    {
        "id": "9af625e10d99e9d6",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str16'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 8\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1380,
        "wires": [
            [
                "d6b1193d9451b13d"
            ]
        ]
    },
    {
        "id": "536d96a229d4545e",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str32'},\n    fc: 4,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 16\n}\n\nmsg.topic = 'result';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "d6b1193d9451b13d"
            ]
        ]
    },
    {
        "id": "3ff269715dab085d",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Type",
        "property": "modbusRequest.value.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "uint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sfloat32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str32",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 970,
        "y": 1360,
        "wires": [
            [
                "f3027009cbf39907"
            ],
            [
                "a061aa44b4add492"
            ],
            [
                "c3f2723a7cd01425"
            ],
            [
                "30958377e0fbf678"
            ],
            [
                "1a7b2a92dd00fe27"
            ],
            [
                "1929ae58180850f9"
            ]
        ]
    },
    {
        "id": "f3027009cbf39907",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 1220,
        "wires": [
            [
                "5b28cbc01481ce50"
            ]
        ]
    },
    {
        "id": "a061aa44b4add492",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 1260,
        "wires": [
            [
                "5b28cbc01481ce50"
            ]
        ]
    },
    {
        "id": "c3f2723a7cd01425",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 1300,
        "wires": [
            [
                "5b28cbc01481ce50"
            ]
        ]
    },
    {
        "id": "30958377e0fbf678",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sfloat32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "floatbe",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1230,
        "y": 1340,
        "wires": [
            [
                "5b28cbc01481ce50"
            ]
        ]
    },
    {
        "id": "1a7b2a92dd00fe27",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 1380,
        "wires": [
            [
                "0cfe95f9a4a7a4f9"
            ]
        ]
    },
    {
        "id": "1929ae58180850f9",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item11",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item12",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item13",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item14",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item15",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item16",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1220,
        "y": 1420,
        "wires": [
            [
                "830628d8c4ad4371"
            ]
        ]
    },
    {
        "id": "42193a90ec9d18bc",
        "type": "debug",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1200,
        "wires": []
    },
    {
        "id": "59bcc9ade6a8238d",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1690,
        "y": 1280,
        "wires": []
    },
    {
        "id": "0cfe95f9a4a7a4f9",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1450,
        "y": 1340,
        "wires": [
            [
                "2f3a0a74ce55506a"
            ]
        ]
    },
    {
        "id": "2f3a0a74ce55506a",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 1340,
        "wires": [
            [
                "894cc1563a69b5ea"
            ]
        ]
    },
    {
        "id": "e08869f7a05e8ae8",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Unit",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 1001:\n    case 1005:\n    case 1101:\n    case 1103:\n    case 1105:\n    case 1003:\n    case 1007:\n    case 1107:\n    case 1109:\n    case 1111:\n    case 1113:\n    case 1115:\n    case 1117:\n    case 1119:\n    case 1121:\n    case 1201:\n    case 1205:\n    case 1301:\n    case 1303:\n    case 1305:\n    case 1203:\n    case 1207:\n    case 1307:\n    case 1309:\n    case 1311:\n    case 1313:\n    case 1315:\n    case 1317:\n    case 1319:\n    case 1321:\n    case 40108:\n    case 40110:\n    case 40112:\n    case 40114:\n    case 40116:\n    case 40118:\n    case 40120:\n    case 40122:\n        msg.payload.result += ' kWh';\n        break;\n    case 1009:\n    case 1011:\n    case 1013:\n    case 1015:\n    case 1037:\n    case 1039:\n    case 1041:\n    case 1043:\n    case 1169:\n    case 1171:\n    case 1173:\n    case 1175:\n    case 1177:\n    case 1179:\n    case 1181:\n    case 1609:\n    case 40088:\n    case 40089:\n    case 40090:\n    case 40091:\n    case 40205:\n    case 40207:\n    case 40209:\n    case 40211:\n        msg.payload.result += ' W';\n        break;\n    case 1035:\n    case 1703:\n    case 1705:\n        msg.payload.result += ' seconds';\n        break;\n    case 1123:\n    case 1125:\n    case 1127:\n    case 1129:\n    case 1189:\n    case 1183:\n    case 1185:\n    case 1187:\n    case 1197:\n    case 1191:\n    case 1193:\n    case 1195:\n    case 1323:\n    case 1325:\n    case 1327:\n    case 1329:\n    case 1370:\n    case 1364:\n    case 1366:\n    case 1368:\n    case 1378:\n    case 1372:\n    case 1374:\n    case 1376:\n    case 40142:\n    case 40144:\n    case 40146:\n    case 40148:\n    case 40158:\n    case 40160:\n    case 40162:\n    case 40164:\n        msg.payload.result += ' kVARh';\n        break;\n    case 1131:\n    case 1133:\n    case 1135:\n    case 1137:\n    case 1331:\n    case 1333:\n    case 1335:\n    case 1337:\n    case 40133:\n    case 40135:\n    case 40137:\n    case 40139:\n        msg.payload.result += ' kVAh';\n        break;\n    case 1147:\n    case 1149:\n    case 1151:\n    case 1153:\n    case 40098:\n    case 40099:\n    case 40100:\n    case 40101:\n    case 40221:\n    case 40223:\n    case 40225:\n    case 40227:\n        msg.payload.result += ' VAR';\n        break;\n    case 1155:\n    case 1157:\n    case 1159:\n    case 1161:\n    case 40093:\n    case 40094:\n    case 40095:\n    case 40096:\n    case 40213:\n    case 40215:\n    case 40217:\n    case 40219:\n        msg.payload.result += ' VA';\n        break;\n    case 1017:\n    case 1019:\n    case 1021:\n    case 1023:\n    case 1025:\n    case 1027:\n    case 1029:\n    case 1031:\n    case 1213:\n    case 1214:\n    case 1215:\n    case 1216:\n    case 1217:\n    case 1218:\n    case 1219:\n    case 1220:\n    case 1629:\n    case 1631:\n    case 1633:\n    case 40077:\n    case 40078:\n    case 40079:\n    case 40080:\n    case 40081:\n    case 40082:\n    case 40083:\n    case 40084:\n    case 40187:\n    case 40189:\n    case 40191:\n    case 40193:\n    case 40195:\n    case 40197:\n    case 40199:\n    case 40201:\n        msg.payload.result += ' V';\n        break;\n    case 1163:\n    case 1165:\n    case 1167:\n    case 1199:\n    case 1603:\n    case 1604:\n    case 1605:\n    case 1606:\n    case 1724:\n    case 1725:\n    case 1726:\n    case 40072:\n    case 40073:\n    case 40074:\n    case 40075:\n    case 40179:\n    case 40181:\n    case 40183:\n    case 40185:\n        msg.payload.result += ' A';\n        break;\n    case 1033:\n    case 1221:\n    case 40086:\n    case 40203:\n        msg.payload.result += ' Hz';\n        break;\n    case 1610:\n        msg.payload.result += ' minutes';\n        break;\n    case 1615:\n    case 1616:\n    case 1617:\n    case 1619:\n        msg.payload.result += ' degrees';\n        break;\n    case 40237:\n    case 40239:\n    case 40241:\n    case 40243:\n    case 40245:\n    case 40247:\n    case 40249:\n    case 40251:\n        msg.payload.result += ' Watt-hours';\n        break;\n    case 40261:\n    case 40263:\n    case 40265:\n    case 40267:\n        msg.payload.result += ' VAh';\n        break;\n    case 40269:\n    case 40271:\n    case 40273:\n    case 40275:\n    case 40287:\n    case 40289:\n    case 40291:\n        msg.payload.result += ' VARh';\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1280,
        "wires": [
            [
                "59bcc9ade6a8238d"
            ]
        ]
    },
    {
        "id": "5b28cbc01481ce50",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Scale Number",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 1612:\n    case 1613:\n    case 1614:\n    case 40103:\n    case 40104:\n    case 40105:\n    case 40106:\n        msg.payload.result /= 10;\n    case 1615:\n    case 1616:\n    case 1617:\n        msg.payload.result /= 10;\n    case 1339:\n    case 1340:\n    case 1341:\n    case 1342:\n    case 40086:\n        msg.payload.result /= 10;\n    case 1201:\n    case 1205:\n    case 1301:\n    case 1303:\n    case 1305:\n    case 1203:\n    case 1207:\n    case 1307:\n    case 1309:\n    case 1311:\n    case 1313:\n    case 1315:\n    case 1317:\n    case 1319:\n    case 1321:\n    case 1323:\n    case 1325:\n    case 1327:\n    case 1329:\n    case 1370:\n    case 1364:\n    case 1366:\n    case 1368:\n    case 1378:\n    case 1372:\n    case 1374:\n    case 1376:\n    case 1331:\n    case 1333:\n    case 1335:\n    case 1337:\n    case 1213:\n    case 1214:\n    case 1215:\n    case 1216:\n    case 1217:\n    case 1218:\n    case 1219:\n    case 1220:\n    case 1221:\n    case 40108:\n    case 40110:\n    case 40112:\n    case 40114:\n    case 40116:\n    case 40118:\n    case 40120:\n    case 40122:\n    case 40133:\n    case 40135:\n    case 40137:\n    case 40139:\n    case 40142:\n    case 40144:\n    case 40146:\n    case 40148:\n    case 40158:\n    case 40160:\n    case 40162:\n    case 40164:\n        msg.payload.result /= 10;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1220,
        "wires": [
            [
                "e08869f7a05e8ae8"
            ]
        ]
    },
    {
        "id": "8982850f1d2b4c59",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1650,
        "y": 980,
        "wires": [
            [
                "309534ee2db33266"
            ]
        ]
    },
    {
        "id": "894cc1563a69b5ea",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1690,
        "y": 1360,
        "wires": [
            [
                "59bcc9ade6a8238d"
            ]
        ]
    },
    {
        "id": "7d1fba35106acf29",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Sniff for Inverter Slaves",
        "func": "// TCP Connection -- Slave IDs 0 - 255 are available.\n// Only searching the first 30 IDs\nfor (let i = 0; i <= 30; i++) {\n    const newMsg = {...msg};\n    newMsg.payload = {\n            value: {...msg.payload},\n            fc: 3,\n            unitid: i,\n            address: 43,\n            quantity: 16\n        };\n    newMsg.topic = 'sr-no';\n    node.send(newMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1600,
        "wires": [
            [
                "d35616c88cdd8d29"
            ]
        ]
    },
    {
        "id": "d35616c88cdd8d29",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Inverter2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 560,
        "y": 1560,
        "wires": [
            [
                "c6fa45e8d1a9ffe1"
            ],
            []
        ]
    },
    {
        "id": "c6fa45e8d1a9ffe1",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item11",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item12",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item13",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item14",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item15",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item16",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 640,
        "y": 1620,
        "wires": [
            [
                "22e47f33304ed0f4"
            ]
        ]
    },
    {
        "id": "22e47f33304ed0f4",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "703db6a16a14bf1b"
            ]
        ]
    },
    {
        "id": "703db6a16a14bf1b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 890,
        "y": 1580,
        "wires": [
            [
                "74de0d9adf3c4864"
            ]
        ]
    },
    {
        "id": "74de0d9adf3c4864",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1010,
        "y": 1580,
        "wires": [
            [
                "ccd829860da7cb2b"
            ]
        ]
    },
    {
        "id": "ccd829860da7cb2b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "modbusRequest.unitid",
        "propertyType": "msg",
        "key": "payload[\"sr-no\"]",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 1580,
        "wires": [
            [
                "2bfe2d89f0b9366b"
            ]
        ]
    },
    {
        "id": "2bfe2d89f0b9366b",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload = msg.modbusRequest.unitid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1580,
        "wires": [
            [
                "e6db938f04b0155b"
            ]
        ]
    },
    {
        "id": "fee1a7d937d521a0",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Sniff for BMS Slaves",
        "func": "// Serial Connection -- Slave IDs 1 - 247 are available.\n// Only searching slave 20 because that is the\n//   hard-coded port that Cadenza uses.\n    msg.payload = {\n            value: {...msg.payload},\n            fc: 4,\n            unitid: 20,\n            address: 32,\n            quantity: 9\n        };\n    msg.topic = 'sr-no';\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1760,
        "wires": [
            [
                "5d5514f94705b3b1"
            ]
        ]
    },
    {
        "id": "5d5514f94705b3b1",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read BMS3",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "0bf62b5a82a31810",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 530,
        "y": 1740,
        "wires": [
            [
                "93ae0cfa67c3292c"
            ],
            []
        ]
    },
    {
        "id": "93ae0cfa67c3292c",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str18",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 580,
        "y": 1800,
        "wires": [
            [
                "50422f8423b0c3ab"
            ]
        ]
    },
    {
        "id": "51001da053d62a20",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 1740,
        "wires": [
            [
                "419644a1061c0990"
            ]
        ]
    },
    {
        "id": "9b437033f90a1c58",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 830,
        "y": 1740,
        "wires": [
            [
                "51001da053d62a20"
            ]
        ]
    },
    {
        "id": "50422f8423b0c3ab",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 1740,
        "wires": [
            [
                "9b437033f90a1c58"
            ]
        ]
    },
    {
        "id": "419644a1061c0990",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "modbusRequest.unitid",
        "propertyType": "msg",
        "key": "payload[\"sr-no\"]",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1070,
        "y": 1740,
        "wires": [
            [
                "1703eff500552fd0"
            ]
        ]
    },
    {
        "id": "1703eff500552fd0",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload = msg.modbusRequest.unitid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1740,
        "wires": [
            [
                "9d24bc227a5fbe34"
            ]
        ]
    },
    {
        "id": "d1ddf13d46348405",
        "type": "debug",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2000,
        "wires": []
    },
    {
        "id": "99502aa439ca0d8e",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Sniff for Wattnode Slaves",
        "func": "// Serial Connection -- Slave IDs 1 - 247 are available.\nlet msgs = [];\n// Only searching the first 30 slaves\nfor (let i = 1; i <= 30; i++) {\n    const newMsg = {...msg};\n    newMsg.payload = {\n            value: {...msg.payload},\n            fc: 4,\n            unitid: i,\n            address: 40052,\n            quantity: 16\n        }\n    newMsg.topic = 'sr-no';\n    node.send(newMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1900,
        "wires": [
            [
                "fd75f588c76f9f1d"
            ]
        ]
    },
    {
        "id": "fd75f588c76f9f1d",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Wattnode2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ff919ca25c0fe87f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 590,
        "y": 1860,
        "wires": [
            [
                "b8b414fbf97cf9d8"
            ],
            []
        ]
    },
    {
        "id": "b8b414fbf97cf9d8",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item11",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item12",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item13",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item14",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item15",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item16",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 640,
        "y": 1920,
        "wires": [
            [
                "b3bc820cb6dd660f"
            ]
        ]
    },
    {
        "id": "b3bc820cb6dd660f",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "Split into Chars",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 820,
        "y": 1880,
        "wires": [
            [
                "2d9bcc45979cb9d0"
            ]
        ]
    },
    {
        "id": "2d9bcc45979cb9d0",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "Join to String",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 890,
        "y": 1920,
        "wires": [
            [
                "ad2872a267c871f2"
            ]
        ]
    },
    {
        "id": "ad2872a267c871f2",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "Join to Result",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1060,
        "y": 1860,
        "wires": [
            [
                "9081bd7fda01395a"
            ]
        ]
    },
    {
        "id": "9081bd7fda01395a",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "Map Result to Serial No.",
        "mode": "custom",
        "build": "object",
        "property": "modbusRequest.unitid",
        "propertyType": "msg",
        "key": "payload[\"sr-no\"]",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1150,
        "y": 1920,
        "wires": [
            [
                "2fa2377764e1e13a"
            ]
        ]
    },
    {
        "id": "2fa2377764e1e13a",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload = msg.modbusRequest.unitid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1880,
        "wires": [
            [
                "86a6bb8f311ff1c9"
            ]
        ]
    },
    {
        "id": "1ad5e7429d153f0f",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/inverterSlaves",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1600,
        "wires": [
            [
                "7d1fba35106acf29"
            ]
        ]
    },
    {
        "id": "de227e81a0284218",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1510,
        "y": 1580,
        "wires": []
    },
    {
        "id": "89c21f5509f4d19c",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/wattnodeSlaves",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1900,
        "wires": [
            [
                "99502aa439ca0d8e"
            ]
        ]
    },
    {
        "id": "e6db938f04b0155b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1390,
        "y": 1580,
        "wires": [
            [
                "de227e81a0284218"
            ]
        ]
    },
    {
        "id": "86a6bb8f311ff1c9",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1410,
        "y": 1880,
        "wires": [
            [
                "b78a7a20a3a06f06"
            ]
        ]
    },
    {
        "id": "b78a7a20a3a06f06",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1530,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f0b7e34e83c53beb",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.result = \"ERROR: BAD ADDRESS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 620,
        "wires": [
            [
                "8a31e7ecadc7562a"
            ]
        ]
    },
    {
        "id": "8a31e7ecadc7562a",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 390,
        "y": 620,
        "wires": []
    },
    {
        "id": "76f3ea670b1d0f3a",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.result = \"ERROR: BAD ADDRESS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1080,
        "wires": [
            [
                "4ba1f627c9a026f4"
            ]
        ]
    },
    {
        "id": "4ba1f627c9a026f4",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 430,
        "y": 1080,
        "wires": []
    },
    {
        "id": "67ad6c57401a41cc",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.result = \"ERROR: BAD ADDRESS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1400,
        "wires": [
            [
                "5ed9ca2c1b310d39"
            ]
        ]
    },
    {
        "id": "5ed9ca2c1b310d39",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 310,
        "y": 1460,
        "wires": []
    },
    {
        "id": "9b07a5fa6e8eb07f",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 1740,
        "wires": []
    },
    {
        "id": "448ae4398c9aa58b",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/bmsSlaves",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1760,
        "wires": [
            [
                "fee1a7d937d521a0"
            ]
        ]
    },
    {
        "id": "9d24bc227a5fbe34",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 1740,
        "wires": [
            [
                "9b07a5fa6e8eb07f"
            ]
        ]
    },
    {
        "id": "830628d8c4ad4371",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1450,
        "y": 1380,
        "wires": [
            [
                "466f1ac4ebf8c223"
            ]
        ]
    },
    {
        "id": "466f1ac4ebf8c223",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 1380,
        "wires": [
            [
                "894cc1563a69b5ea"
            ]
        ]
    },
    {
        "id": "c219a1cd6f1cb15f",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1390,
        "y": 1000,
        "wires": [
            [
                "1b5a43059cd8adc7"
            ]
        ]
    },
    {
        "id": "1b5a43059cd8adc7",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1510,
        "y": 1000,
        "wires": [
            [
                "8982850f1d2b4c59"
            ]
        ]
    },
    {
        "id": "8466a94c7f0b01f8",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1430,
        "y": 640,
        "wires": [
            [
                "9d543c2ae885d1fb"
            ]
        ]
    },
    {
        "id": "9d543c2ae885d1fb",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 640,
        "wires": [
            [
                "a082af0a7d2c94ac"
            ]
        ]
    },
    {
        "id": "e4a871fe6a21e3be",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1430,
        "y": 680,
        "wires": [
            [
                "46d3dedcfec42fa9"
            ]
        ]
    },
    {
        "id": "46d3dedcfec42fa9",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 680,
        "wires": [
            [
                "a082af0a7d2c94ac"
            ]
        ]
    },
    {
        "id": "65fc077e0c37cd6d",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/gatewayModbus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1980,
        "y": 560,
        "wires": [
            [
                "149aca8ae257b94d"
            ]
        ]
    },
    {
        "id": "035845364664f409",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2740,
        "y": 660,
        "wires": [
            [
                "d05049472c447e78",
                "907dfc584213a259"
            ],
            []
        ]
    },
    {
        "id": "8be8e84997bf8a1f",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint16'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address - 1,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 660,
        "wires": [
            [
                "035845364664f409"
            ]
        ]
    },
    {
        "id": "22c5a1a8401d9d8a",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint32'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address - 1,\n    quantity: 2,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 700,
        "wires": [
            [
                "035845364664f409"
            ]
        ]
    },
    {
        "id": "f6079f85bb3c707c",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Address For Size",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "/*uint16*/\tpayload.address in [\t   9,\t   10,\t   41,\t   42,\t   43,\t   61,\t   62,\t   63,\t   64,\t   65,\t   66,\t   67,\t   68,\t   1025,\t   1026\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*uint32*/ payload.address in [\t   59,\t   69,\t   71,\t   73,\t   75,\t   77,\t   79,\t   81,\t   83,\t   85,\t   87,\t   89,\t   91,\t   93,\t   97,\t   99,\t   105,\t   107,\t   113,\t   115,\t   117,\t   119,\t   121,\t   123,\t   125,\t   127,\t   131,\t   133,\t   135,\t   139,\t   141,\t   145,\t   147,\t   149,\t   151,\t   153,\t   155,\t   157,\t   159,\t   161,\t   163,\t   165,\t   167,\t   169,\t   171,\t   173,\t   175,\t   177,\t   179,\t   181,\t   183,\t   185,\t   187,\t   189,\t   191,\t   193,\t   195,\t   197,\t   199,\t   201,\t   203,\t   205,\t   207,\t   209,\t   211,\t   213,\t   215,\t   217,\t   219,\t   221,\t   223,\t   225,\t   227,\t   229,\t   231,\t   233,\t   235,\t   237,\t   239,\t   241,\t   243,\t   245,\t   247,\t   249,\t   251,\t   253,\t   255,\t   257,\t   259,\t   261,\t   263,\t   265,\t   267,\t   259,\t   271,\t   273,\t   275,\t   277,\t   279,\t   281,\t   283,\t   285,\t   287,\t   289,\t   291,\t   293,\t   295,\t   297,\t   299,\t   301,\t   303,\t   305,\t   307,\t   309,\t   311,\t   313,\t   315,\t   317,\t   319,\t   321,\t   323,\t   325,\t   327,\t   329,\t   331,\t   333,\t   335,\t   337,\t   339,\t   341,\t   343,\t   347,\t   349,\t   351,\t   353,\t   355,\t   357,\t   359,\t   361,\t   363,\t   365,\t   367,\t   369,\t   371,\t   373,\t   375,\t   377,\t   379,\t   381,\t   383,\t   385,\t   387,\t   389,\t   391,\t   393,\t   395,\t   397,\t   399,\t   401,\t   403,\t   405,\t   407,\t   409,\t   411,\t   513,\t   517,\t   519,\t   521,\t   523,\t   525,\t   527,\t   531,\t   533,\t   535,\t   537,\t   539,\t   541,\t   545,\t   547,\t   549,\t   551,\t   553,\t   555,\t   559,\t   561,\t   563,\t   565,\t   567,\t   569,\t   573,\t   575,\t   577,\t   579,\t   581,\t   641,\t   643,\t   645,\t   647,\t   649,\t   651,\t   653,\t   655,\t   657,\t   659,\t   661,\t   663,\t   665,\t   667,\t   669,\t   671,\t   673,\t   675,\t   677,\t   679,\t   681,\t   683,\t   685,\t   687,\t   689,\t   691,\t   693,\t   695,\t   697,\t   699,\t   701,\t   703,\t   705,\t   707,\t   709,\t   711,\t   713,\t   715,\t   717,\t   719,\t   721,\t   723,\t   725,\t   727,\t   729,\t   731,\t   733,\t   735,\t   737,\t   739,\t   741,\t   743,\t   745,\t   747,\t   749,\t   751,\t   753,\t   755,\t   757,\t   759,\t   761,\t   763,\t   765,\t   767,\t   769,\t   771,\t   773,\t   775,\t   777,\t   779,\t   781,\t   783,\t   785,\t   787,\t   789,\t   791,\t   793,\t   795,\t   797,\t   799,\t   801,\t   803,\t   805,\t   807,\t   809,\t   811,\t   813,\t   815,\t   817,\t   819,\t   821,\t   821,\t   825,\t   827,\t   829,\t   831,\t   833,\t   835,\t   837,\t   839,\t   841,\t   843,\t   845,\t   847,\t   849,\t   851,\t   853,\t   855,\t   857,\t   859,\t   861,\t   863,\t   865,\t   867,\t   869,\t   871,\t   873,\t   875,\t   877,\t   879,\t   897,\t   899,\t   905,\t   907,\t   909,\t   911,\t   913,\t   915,\t   917,\t   919,\t   921,\t   923,\t   925,\t   927,\t   929,\t   931,\t   933,\t   925,\t   937,\t   941,\t   945,\t   949,\t   951,\t   953,\t   955,\t   957,\t   959,\t   961,\t   963,\t   965,\t   969,\t   971,\t   973,\t   975,\t   979,\t   981,\t   983,\t   985,\t   989,\t   991,\t   993,\t   995,\t   999,\t   1001,\t   1003,\t   1005,\t   1009,\t   1011,\t   1013,\t   1015,\t   1019,\t   1021,\t   1023,\t   1027,\t   1029,\t   1031,\t   1033,\t   1035,\t   1037,\t   1039,\t   1041,\t   1043,\t   1045,\t   1047,\t   1049,\t   1051,\t   1053,\t   1055,\t   1057,\t   1059,\t   1061,\t   1063,\t   1065,\t   1067,\t   1069,\t   1071,\t   1073,\t   1075\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint32*/\tpayload.address in [\t   95,\t   101,\t   103,\t   109,\t   111,\t   129,\t   137,\t   143,\t   345,\t   515,\t   529,\t   543,\t   557,\t   571,\t   901,\t   903,\t   939,\t   943,\t   947,\t   967,\t   977,\t   987,\t   997,\t   1007,\t   1017\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str16*/\tpayload.address in [1, 11, 44]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str20*/\tpayload.address in [31]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2090,
        "y": 740,
        "wires": [
            [
                "8be8e84997bf8a1f"
            ],
            [
                "22c5a1a8401d9d8a"
            ],
            [
                "42a21179870a9d95"
            ],
            [
                "3662019fd540a0a9"
            ],
            [
                "be9a7afa464caa28"
            ],
            [
                "5670c7b7037c5f10"
            ]
        ]
    },
    {
        "id": "42a21179870a9d95",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint32'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address - 1,\n    quantity: 2\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 740,
        "wires": [
            [
                "035845364664f409"
            ]
        ]
    },
    {
        "id": "3662019fd540a0a9",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str16'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address - 1,\n    quantity: 8\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 780,
        "wires": [
            [
                "035845364664f409"
            ]
        ]
    },
    {
        "id": "be9a7afa464caa28",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str20)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str20'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address - 1,\n    quantity: 10\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 820,
        "wires": [
            [
                "035845364664f409"
            ]
        ]
    },
    {
        "id": "d05049472c447e78",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Type",
        "property": "modbusRequest.value.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "uint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str20",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2770,
        "y": 760,
        "wires": [
            [
                "35a802e3e2ab1544"
            ],
            [
                "df37924bdcaa4c67"
            ],
            [
                "9938e182e17160ba"
            ],
            [
                "d4d587c74f3d6a84"
            ],
            [
                "b89dc74055c3be72"
            ],
            []
        ]
    },
    {
        "id": "35a802e3e2ab1544",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 700,
        "wires": [
            [
                "930da379c4286a0e"
            ]
        ]
    },
    {
        "id": "df37924bdcaa4c67",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 740,
        "wires": [
            [
                "930da379c4286a0e"
            ]
        ]
    },
    {
        "id": "9938e182e17160ba",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 780,
        "wires": [
            [
                "930da379c4286a0e"
            ]
        ]
    },
    {
        "id": "d4d587c74f3d6a84",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 820,
        "wires": [
            [
                "7591f5913fea4290"
            ]
        ]
    },
    {
        "id": "b89dc74055c3be72",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str20",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 860,
        "wires": [
            [
                "b5f7305cb6d6abbd"
            ]
        ]
    },
    {
        "id": "2ba48b1d846bf584",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3550,
        "y": 780,
        "wires": []
    },
    {
        "id": "907dfc584213a259",
        "type": "debug",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2890,
        "y": 540,
        "wires": []
    },
    {
        "id": "8555d77c0471efc7",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to Number",
        "func": "msg.payload.address = Number(msg.payload.address);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 640,
        "wires": [
            [
                "f6079f85bb3c707c"
            ]
        ]
    },
    {
        "id": "7591f5913fea4290",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3230,
        "y": 820,
        "wires": [
            [
                "671abecd0e5842f4"
            ]
        ]
    },
    {
        "id": "671abecd0e5842f4",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3370,
        "y": 820,
        "wires": [
            [
                "c325c5116e2bef7b"
            ]
        ]
    },
    {
        "id": "2ec3c5d314f1e590",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Unit",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 971:\n    case 981:\n    case 991:\n    case 1001:\n    case 1011:\n        msg.payload.result += ' Ah';\n        break;\n    case 969:\n    case 979:\n    case 989:\n    case 999:\n    case 1009:\n    case 1055:\n    case 1057:\n    case 1059:\n    case 1061:\n    case 1063:\n        msg.payload.result += '%';\n        break;\n    case 901:\n        msg.payload.result += ' W/Sq-m';\n        break;\n    case 163:\n    case 167:\n    case 171:\n    case 175:\n    case 179:\n    case 183:\n    case 187:\n    case 191:\n    case 195:\n    case 199:\n    case 203:\n    case 207:\n    case 211:\n    case 215:\n    case 219:\n    case 223:\n    case 227:\n    case 231:\n    case 235:\n    case 239:\n    case 243:\n    case 247:\n    case 251:\n    case 255:\n    case 259:\n    case 263:\n    case 267:\n    case 271:\n    case 275:\n    case 279:\n    case 283:\n    case 287:\n    case 291:\n    case 295:\n    case 299:\n    case 303:\n    case 307:\n    case 311:\n    case 315:\n    case 319:\n    case 323:\n    case 327:\n    case 375:\n    case 377:\n    case 379:\n    case 381:\n    case 383:\n    case 385:\n    case 401:\n    case 403:\n    case 405:\n    case 407:\n    case 409:\n    case 411:\n    case 653:\n    case 655:\n    case 657:\n    case 659:\n    case 661:\n    case 663:\n    case 677:\n    case 679:\n    case 681:\n    case 683:\n    case 685:\n    case 687:\n    case 701:\n    case 703:\n    case 705:\n    case 707:\n    case 709:\n    case 711:\n    case 725:\n    case 727:\n    case 729:\n    case 731:\n    case 733:\n    case 735:\n    case 749:\n    case 751:\n    case 753:\n    case 755:\n    case 757:\n    case 759:\n    case 773:\n    case 775:\n    case 777:\n    case 779:\n    case 781:\n    case 783:\n    case 797:\n    case 799:\n    case 801:\n    case 803:\n    case 805:\n    case 807:\n    case 821:\n    case 823:\n    case 825:\n    case 827:\n    case 829:\n    case 831:\n    case 845:\n    case 847:\n    case 849:\n    case 851:\n    case 853:\n    case 855:\n    case 869:\n    case 871:\n    case 873:\n    case 875:\n    case 877:\n    case 879:\n    case 925:\n    case 927:\n    case 929:\n    case 931:\n    case 933:\n    case 935:\n    case 949:\n    case 973:\n    case 983:\n    case 993:\n    case 1003:\n    case 1013:\n        msg.payload.result += ' s';\n        break;\n    case 161:\n    case 165:\n    case 169:\n    case 173:\n    case 177:\n    case 181:\n    case 185:\n    case 189:\n    case 193:\n    case 197:\n    case 201:\n    case 205:\n    case 209:\n    case 211:\n    case 213:\n    case 217:\n    case 221:\n    case 225:\n    case 229:\n    case 233:\n    case 237:\n    case 241:\n    case 245:\n    case 249:\n    case 253:\n    case 257:\n    case 261:\n    case 265:\n    case 269:\n    case 273:\n    case 277:\n    case 281:\n    case 285:\n    case 289:\n    case 293:\n    case 297:\n    case 301:\n    case 305:\n    case 309:\n    case 313:\n    case 317:\n    case 321:\n    case 325:\n    case 363:\n    case 365:\n    case 367:\n    case 369:\n    case 371:\n    case 373:\n    case 389:\n    case 391:\n    case 393:\n    case 395:\n    case 397:\n    case 399:\n    case 641:\n    case 643:\n    case 645:\n    case 647:\n    case 649:\n    case 651:\n    case 665:\n    case 667:\n    case 669:\n    case 671:\n    case 673:\n    case 675:\n    case 689:\n    case 691:\n    case 693:\n    case 695:\n    case 697:\n    case 699:\n    case 713:\n    case 715:\n    case 717:\n    case 719:\n    case 721:\n    case 723:\n    case 737:\n    case 739:\n    case 741:\n    case 743:\n    case 745:\n    case 747:\n    case 761:\n    case 763:\n    case 765:\n    case 767:\n    case 769:\n    case 771:\n    case 785:\n    case 787:\n    case 789:\n    case 791:\n    case 793:\n    case 795:\n    case 809:\n    case 811:\n    case 813:\n    case 815:\n    case 817:\n    case 819:\n    case 833:\n    case 835:\n    case 837:\n    case 839:\n    case 841:\n    case 843:\n    case 857:\n    case 859:\n    case 861:\n    case 863:\n    case 865:\n    case 867:\n    case 913:\n    case 915:\n    case 917:\n    case 919:\n    case 921:\n    case 923:\n    case 1043:\n    case 1045:\n    case 1047:\n    case 1049:\n    case 1051:\n    case 1053:\n    case 1065:\n    case 1067:\n    case 1069:\n    case 1071:\n    case 1073:\n    case 1075:\n        msg.payload.result += ' kWh';\n        break;\n    case 159:\n    case 517:\n    case 531:\n    case 545:\n    case 559:\n    case 573:\n    case 903:\n        msg.payload.result += ' C';\n        break;\n    case 81:\n    case 87:\n    case 101:\n        msg.payload.result += ' VA';\n        break;\n    case 79:\n    case 107:\n    case 115:\n    case 121:\n    case 127:\n    case 135:\n    case 141:\n    case 351:\n    case 911:\n        msg.payload.result += ' Hz';\n        break;\n    case 77:\n    case 105:\n    case 113:\n    case 119:\n    case 125:\n    case 133:\n    case 139:\n    case 155:\n    case 157:\n    case 349:\n    case 355:\n    case 513:\n    case 527:\n    case 541:\n    case 555:\n    case 569:\n    case 937:\n    case 941:\n    case 945:\n    case 951:\n    case 953:\n    case 955:\n    case 959:\n    case 961:\n    case 963:\n    case 1027:\n    case 1031:\n    case 1035:\n        msg.payload.result += ' V';\n        break;\n    case 73:\n    case 85:\n    case 91:\n    case 109:\n    case 129:\n    case 143:\n    case 147:\n    case 329:\n    case 331:\n    case 335:\n    case 337:\n    case 339:\n    case 341:\n    case 343:\n    case 353:\n    case 357:\n    case 359:\n    case 515:\n    case 519:\n    case 523:\n    case 529:\n    case 533:\n    case 537:\n    case 543:\n    case 547:\n    case 551:\n    case 557:\n    case 561:\n    case 565:\n    case 571:\n    case 575:\n    case 579:\n    case 939:\n    case 943:\n    case 947:\n    case 957:\n    case 965:\n    case 1029:\n    case 1033:\n    case 1037:\n        msg.payload.result += ' A';\n        break;\n    case 69:\n    case 71:\n    case 75:\n    case 83:\n    case 89:\n    case 93:\n    case 95:\n    case 97:\n    case 99:\n    case 103:\n    case 111:\n    case 117:\n    case 131:\n    case 137:\n    case 145:\n    case 149:\n    case 151:\n    case 153:\n    case 345:\n    case 361:\n    case 387:\n    case 521:\n    case 525:\n    case 535:\n    case 539:\n    case 549:\n    case 553:\n    case 563:\n    case 567:\n    case 577:\n    case 581:\n    case 909:\n    case 967:\n    case 977:\n    case 987:\n    case 997:\n    case 1007:\n    case 1017:\n    case 1019:\n    case 1021:\n    case 1023:\n    case 1039:\n    case 1041:\n        msg.payload.result += ' W';\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3360,
        "y": 780,
        "wires": [
            [
                "2ba48b1d846bf584"
            ]
        ]
    },
    {
        "id": "930da379c4286a0e",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Scale Number",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 73:\n    case 77:\n    case 85:\n    case 91:\n    case 105:\n    case 109:\n    case 113:\n    case 119:\n    case 125:\n    case 129:\n    case 133:\n    case 139:\n    case 143:\n    case 147:\n    case 155:\n    case 157:\n    case 161:\n    case 165:\n    case 169:\n    case 173:\n    case 177:\n    case 181:\n    case 185:\n    case 189:\n    case 193:\n    case 197:\n    case 201:\n    case 205:\n    case 209:\n    case 213:\n    case 217:\n    case 221:\n    case 225:\n    case 229:\n    case 233:\n    case 237:\n    case 241:\n    case 245:\n    case 249:\n    case 253:\n    case 257:\n    case 261:\n    case 265:\n    case 269:\n    case 273:\n    case 277:\n    case 281:\n    case 285:\n    case 289:\n    case 293:\n    case 297:\n    case 301:\n    case 305:\n    case 309:\n    case 313:\n    case 317:\n    case 321:\n    case 325:\n    case 329:\n    case 331:\n    case 333:\n    case 335:\n    case 337:\n    case 339:\n    case 341:\n    case 343:\n    case 349:\n    case 353:\n    case 355:\n    case 357:\n    case 359:\n    case 363:\n    case 365:\n    case 367:\n    case 369:\n    case 371:\n    case 373:\n    case 389:\n    case 391:\n    case 393:\n    case 395:\n    case 397:\n    case 399:\n    case 513:\n    case 515:\n    case 519:\n    case 523:\n    case 527:\n    case 529:\n    case 533:\n    case 537:\n    case 541:\n    case 543:\n    case 547:\n    case 551:\n    case 555:\n    case 557:\n    case 561:\n    case 565:\n    case 569:\n    case 571:\n    case 575:\n    case 579:\n    case 641:\n    case 643:\n    case 645:\n    case 647:\n    case 649:\n    case 651:\n    case 665:\n    case 667:\n    case 669:\n    case 671:\n    case 673:\n    case 675:\n    case 689:\n    case 691:\n    case 693:\n    case 695:\n    case 697:\n    case 699:\n    case 713:\n    case 715:\n    case 717:\n    case 719:\n    case 721:\n    case 723:\n    case 737:\n    case 739:\n    case 741:\n    case 743:\n    case 745:\n    case 747:\n    case 761:\n    case 763:\n    case 765:\n    case 767:\n    case 769:\n    case 771:\n    case 785:\n    case 787:\n    case 789:\n    case 791:\n    case 793:\n    case 795:\n    case 809:\n    case 811:\n    case 813:\n    case 815:\n    case 817:\n    case 819:\n    case 833:\n    case 835:\n    case 837:\n    case 839:\n    case 841:\n    case 843:\n    case 857:\n    case 859:\n    case 861:\n    case 863:\n    case 865:\n    case 867:\n    case 913:\n    case 915:\n    case 917:\n    case 919:\n    case 921:\n    case 923:\n    case 937:\n    case 939:\n    case 941:\n    case 943:\n    case 945:\n    case 947:\n    case 951:\n    case 953:\n    case 955:\n    case 957:\n    case 959:\n    case 961:\n    case 963:\n    case 965:\n    case 1027:\n    case 1029:\n    case 1031:\n    case 1033:\n    case 1035:\n    case 1037:\n    case 1043:\n    case 1045:\n    case 1047:\n    case 1049:\n    case 1051:\n    case 1053:\n    case 1065:\n    case 1067:\n    case 1069:\n    case 1071:\n    case 1073:\n    case 1075:\n        msg.payload.result /= 10;\n    case 79:\n    case 107:\n    case 115:\n    case 121:\n    case 127:\n    case 135:\n    case 141:\n    case 159:\n    case 351:\n    case 517:\n    case 531:\n    case 545:\n    case 559:\n    case 573:\n    case 911:\n        msg.payload.result /= 10;\n    case 903:\n        msg.payload.result /= 10;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 700,
        "wires": [
            [
                "3edc8bbd62d00c00"
            ]
        ]
    },
    {
        "id": "3edc8bbd62d00c00",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Offset",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 159:\n    case 517:\n    case 531:\n    case 545:\n    case 559:\n    case 573:\n        msg.payload.result -= 273;\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 740,
        "wires": [
            [
                "2ec3c5d314f1e590"
            ]
        ]
    },
    {
        "id": "c325c5116e2bef7b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3510,
        "y": 860,
        "wires": [
            [
                "2ba48b1d846bf584"
            ]
        ]
    },
    {
        "id": "5670c7b7037c5f10",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.result = \"ERROR: BAD ADDRESS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 840,
        "wires": [
            [
                "d48fd7b7a0af194a"
            ]
        ]
    },
    {
        "id": "d48fd7b7a0af194a",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2190,
        "y": 840,
        "wires": []
    },
    {
        "id": "b5f7305cb6d6abbd",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3230,
        "y": 860,
        "wires": [
            [
                "33205934e9b609a0"
            ]
        ]
    },
    {
        "id": "33205934e9b609a0",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3370,
        "y": 860,
        "wires": [
            [
                "c325c5116e2bef7b"
            ]
        ]
    },
    {
        "id": "ad2d78011d9e3a56",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3230,
        "y": 900,
        "wires": [
            [
                "fc7049be0c4c95db"
            ]
        ]
    },
    {
        "id": "fc7049be0c4c95db",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3370,
        "y": 900,
        "wires": [
            [
                "c325c5116e2bef7b"
            ]
        ]
    },
    {
        "id": "dc4d7c9b4a8275fd",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Port Number",
        "property": "payload.port",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "502",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "503",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 360,
        "wires": [
            [
                "f08a136c079f1c83"
            ],
            [
                "f74a8a1de47d6146"
            ],
            []
        ]
    },
    {
        "id": "91771433e98b6fc9",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str32'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 16\n}\n\nmsg.topic = 'result';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 200,
        "wires": [
            [
                "ca43597c6c067bc0"
            ]
        ]
    },
    {
        "id": "1e2535a33191b191",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str16'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 8\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "ca43597c6c067bc0"
            ]
        ]
    },
    {
        "id": "84534a460726138d",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint32'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 2,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "ca43597c6c067bc0"
            ]
        ]
    },
    {
        "id": "dcf46e2fdc1d0107",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint16'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            [
                "ca43597c6c067bc0"
            ]
        ]
    },
    {
        "id": "b71da07237477eed",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint16'},\n    fc: 3,\n    unitid: msg.payload.device,\n    address: msg.payload.address,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            [
                "ca43597c6c067bc0"
            ]
        ]
    },
    {
        "id": "f08a136c079f1c83",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to Number",
        "func": "msg.payload.address = Number(msg.payload.address);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 240,
        "wires": [
            [
                "1155106022d15133"
            ]
        ]
    },
    {
        "id": "1155106022d15133",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Address For Size",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "/*uint16*/\tpayload.address in [\t   40002,\t   40003,\t   40068,\t   40069,\t   40070,\t   40071,\t   40072,\t   40073,\t   40074,\t   40075,\t   40077,\t   40078,\t   40079,\t   40080,\t   40081,\t   40082,\t   40086,\t   40097,\t   40099,\t   40108,\t   40109,\t   40122,\t   40123,\t   40124,\t   40125,\t   40127,\t   40134,\t   40141,\t   40143,\t   40147,\t   40149,\t   40150,\t   40151,\t   40152,\t   40153,\t   40155,\t   40156,\t   40157,\t   40162,\t   40167,\t   40168,\t   40169,\t   40170,\t   40171,\t   40182,\t   40183,\t   40184,\t   40185,\t   40186,\t   40187,\t   40188,\t   40189,\t   40190,\t   40191,\t   40193,\t   40195,\t   40196,\t   40200,\t   40201,\t   40202,\t   40203,\t   40204,\t   40208,\t   40209,\t   40210,\t   40211,\t   40212,\t   40214,\t   40216,\t   40219,\t   40220,\t   40221,\t   40222,\t   40223,\t   40224,\t   40225,\t   40234,\t   40235,\t   40238,\t   40239,\t   40240,\t   40241,\t   40242,\t   40243,\t   40244,\t   40245,\t   40249,\t   40251,\t   40252,\t   40253,\t   40254,\t   40261,\t   40262,\t   40263\t   ]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint16*/\tpayload.address in [\t   40076,\t   40083,\t   40084,\t   40085,\t   40086,\t   40087,\t   40088,\t   40089,\t   40090,\t   40091,\t   40092,\t   40093,\t   40096,\t   40098,\t   40100,\t   40101,\t   40102,\t   40103,\t   40104,\t   40105,\t   40106,\t   40107,\t   40126,\t   40128,\t   40129,\t   40130,\t   40131,\t   40132,\t   40133,\t   40135,\t   40136,\t   40137,\t   40138,\t   40139,\t   40140,\t   40142,\t   40144,\t   40145,\t   40146,\t   40148,\t   40154,\t   40158,\t   40159,\t   40160,\t   40161,\t   40163,\t   40164,\t   40165,\t   40166,\t   40172,\t   40173,\t   40174,\t   40175,\t   40176,\t   40177,\t   40178,\t   40179,\t   40180,\t   40181,\t   40197,\t   40198,\t   40199,\t   40205,\t   40206,\t   40207,\t   40215,\t   40226,\t   40227,\t   40228,\t   40229,\t   40230,\t   40231,\t   40232,\t   40233,\t   40246,\t   40247,\t   40248\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*uint32*/ payload.address in [\t   40000,\t   40094,\t   40110,\t   40112,\t   40114,\t   40116,\t   40118,\t   40120,\t   40236,\t   40255,\t   40257,\t   40259\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str16*/\tpayload.address in [40036, 40044]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str32*/\tpayload.address in [40004, 40020, 40052]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "b71da07237477eed"
            ],
            [
                "dcf46e2fdc1d0107"
            ],
            [
                "84534a460726138d"
            ],
            [
                "1e2535a33191b191"
            ],
            [
                "91771433e98b6fc9"
            ],
            [
                "17f1582f5d6a256c"
            ]
        ]
    },
    {
        "id": "ca43597c6c067bc0",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 920,
        "y": 40,
        "wires": [
            [
                "a54deac0a8a8f5ae",
                "bf26e2a2c43afc82"
            ],
            []
        ]
    },
    {
        "id": "a54deac0a8a8f5ae",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Type",
        "property": "modbusRequest.value.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "uint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str32",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 950,
        "y": 140,
        "wires": [
            [
                "ea8ba54c2c3e0f83"
            ],
            [
                "10eff20372abdff2"
            ],
            [
                "7482dc48dbf50212"
            ],
            [
                "d46439c70f8688e0"
            ],
            [
                "34ff5ff4cc687274"
            ],
            []
        ]
    },
    {
        "id": "ea8ba54c2c3e0f83",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 40,
        "wires": [
            [
                "d92ac84915dcd009"
            ]
        ]
    },
    {
        "id": "10eff20372abdff2",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 80,
        "wires": [
            [
                "d92ac84915dcd009"
            ]
        ]
    },
    {
        "id": "7482dc48dbf50212",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 120,
        "wires": [
            [
                "d92ac84915dcd009"
            ]
        ]
    },
    {
        "id": "d46439c70f8688e0",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 160,
        "wires": [
            [
                "0df24301d22ba116"
            ]
        ]
    },
    {
        "id": "34ff5ff4cc687274",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item11",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item12",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item13",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item14",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item15",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item16",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1200,
        "y": 200,
        "wires": [
            [
                "0b6c68ee1b4c0d8b"
            ]
        ]
    },
    {
        "id": "3c897744e34d48c5",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 160,
        "wires": [
            [
                "601ab887f3cc0308"
            ]
        ]
    },
    {
        "id": "0df24301d22ba116",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1430,
        "y": 160,
        "wires": [
            [
                "3c897744e34d48c5"
            ]
        ]
    },
    {
        "id": "0b6c68ee1b4c0d8b",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1430,
        "y": 200,
        "wires": [
            [
                "4303a763dd16dc0a"
            ]
        ]
    },
    {
        "id": "4303a763dd16dc0a",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 200,
        "wires": [
            [
                "601ab887f3cc0308"
            ]
        ]
    },
    {
        "id": "601ab887f3cc0308",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1710,
        "y": 200,
        "wires": [
            [
                "bb4a8b24c8fc07ab"
            ]
        ]
    },
    {
        "id": "bb4a8b24c8fc07ab",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1730,
        "y": 100,
        "wires": []
    },
    {
        "id": "d92ac84915dcd009",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Scale Number",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 40094:\n    case 40236:\n    case 40255:\n    case 40257:\n    case 40259:\n        msg.payload.result /= 10;\n    case 40072:\n    case 40073:\n    case 40074:\n    case 40075:\n    case 40086:\n    case 40134:\n    case 40153:\n    case 40154:\n    case 40187:\n    case 40192:\n    case 40198:\n    case 40215:\n    case 40220:\n    case 40221:\n    case 40229:\n    case 40245:\n    case 40246:\n    case 40247:\n    case 40248:\n        msg.payload.result /= 10;\n    case 40211:\n    case 40212:\n        msg.payload.result /= 10;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 40,
        "wires": [
            [
                "a2c8c883441cb42e"
            ]
        ]
    },
    {
        "id": "a2c8c883441cb42e",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Unit",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 40072:\n    case 40073:\n    case 40074:\n    case 40075:\n    case 40097:\n        msg.payload.result += ' A';\n        break;\n    case 40077:\n    case 40078:\n    case 40079:\n    case 40080:\n    case 40081:\n    case 40082:\n    case 40099:\n    case 40153:\n    case 40154:\n    case 40255:\n    case 40257:\n    case 40259:\n        msg.payload.result += ' V';\n        break;\n    case 40084:\n    case 40101:\n    case 40125:\n    case 40145:\n    case 40152:\n    case 40210:\n    case 40238:\n    case 40239:\n        msg.payload.result += ' W';\n        break;\n    case 40086:\n        msg.payload.result += ' Hz';\n        break;\n    case 40088:\n        msg.payload.result += ' VA';\n        break;\n    case 40090:\n    case 40132:\n        msg.payload.result += ' var';\n        break;\n    case 40092:\n        msg.payload.result += ' Pct';\n        break;\n    case 40094:\n    case 40236:\n        msg.payload.result += ' kWh';\n        break;\n    case 40103:\n    case 40104:\n    case 40105:\n    case 40106:\n        msg.payload.result += ' C';\n        break;\n    case 40134:\n        msg.payload.result += ' A RMS';\n        break;\n    case 40187:\n    case 40198:\n    case 40215:\n    case 40220:\n    case 40221:\n    case 40245:\n    case 40246:\n    case 40247:\n    case 40248:\n        msg.payload.result += '%';\n        break;\n    case 40211:\n    case 40212:\n        msg.payload.result += '%/s';\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 80,
        "wires": [
            [
                "bb4a8b24c8fc07ab"
            ]
        ]
    },
    {
        "id": "149aca8ae257b94d",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Port Number",
        "property": "payload.port",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "502",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "503",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2190,
        "y": 560,
        "wires": [
            [
                "c442732e16e349bb"
            ],
            [
                "8555d77c0471efc7"
            ],
            []
        ]
    },
    {
        "id": "17f1582f5d6a256c",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.result = \"ERROR: BAD ADDRESS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "7199e95282ec77b2"
            ]
        ]
    },
    {
        "id": "7199e95282ec77b2",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 260,
        "wires": []
    },
    {
        "id": "c442732e16e349bb",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to Number",
        "func": "msg.payload.address = Number(msg.payload.address);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 460,
        "wires": [
            [
                "3e9324c3b52fd53b"
            ]
        ]
    },
    {
        "id": "3e9324c3b52fd53b",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Address For Size",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "/*uint16*/\tpayload.address in [\t   40002,\t   40003,\t   40068,\t   40069,\t   40070,\t   40071,\t   40072,\t   40073,\t   40074,\t   40075,\t   40077,\t   40078,\t   40079,\t   40080,\t   40081,\t   40082,\t   40086,\t   40097,\t   40099,\t   40108,\t   40109,\t   40122,\t   40123,\t   40124,\t   40125,\t   40127,\t   40134,\t   40141,\t   40143,\t   40145,\t   40147,\t   40149,\t   40150,\t   40151,\t   40152,\t   40153,\t   40155,\t   40156,\t   40157,\t   40162,\t   40167,\t   40168,\t   40169,\t   40170,\t   40171,\t   40182,\t   40183,\t   40184,\t   40185,\t   40186,\t   40187,\t   40188,\t   40189,\t   40190,\t   40191,\t   40193,\t   40194,\t   40195,\t   40196,\t   40200,\t   40201,\t   40202,\t   40203,\t   40204,\t   40208,\t   40209,\t   40210,\t   40211,\t   40212,\t   40213,\t   40214,\t   40215,\t   40216,\t   40217,\t   40218,\t   40219,\t   40222,\t   40223,\t   40224,\t   40225,\t   40234,\t   40235,\t   40236,\t   40238,\t   40239,\t   40240,\t   40241,\t   40242,\t   40244,\t   40245,\t   40246,\t   40247,\t   40248,\t   40249,\t   40250,\t   40251,\t   40252,\t   40253,\t   40254,\t   40255,\t   40256,\t   40257,\t   40260,\t   40261,\t   40262,\t   40263,\t   40264,\t   40265,\t   40266,\t   40267,\t   40278,\t   40279,\t   40280,\t   40281,\t   40282,\t   40283,\t   40284,\t   40285,\t   40286,\t   40287,\t   40289,\t   40290,\t   40292,\t   40294,\t   40295,\t   40308,\t   40309,\t   40312,\t   40313,\t   40314,\t   40315,\t   40316,\t   40317,\t   40318,\t   40319,\t   40320,\t   40321,\t   40322,\t   40323\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*sint16*/\tpayload.address in [\t   40076,\t   40083,\t   40084,\t   40085,\t   40087,\t   40088,\t   40089,\t   40090,\t   40091,\t   40092,\t   40093,\t   40096,\t   40098,\t   40100,\t   40101,\t   40102,\t   40103,\t   40104,\t   40105,\t   40106,\t   40107,\t   40126,\t   40128,\t   40129,\t   40130,\t   40131,\t   40132,\t   40133,\t   40135,\t   40136,\t   40137,\t   40138,\t   40139,\t   40140,\t   40142,\t   40144,\t   40146,\t   40148,\t   40154,\t   40158,\t   40159,\t   40160,\t   40161,\t   40163,\t   40164,\t   40165,\t   40166,\t   40172,\t   40173,\t   40174,\t   40175,\t   40176,\t   40177,\t   40178,\t   40179,\t   40180,\t   40181,\t   40192,\t   40197,\t   40198,\t   40199,\t   40205,\t   40206,\t   40207,\t   40220,\t   40221,\t   40226,\t   40227,\t   40228,\t   40229,\t   40230,\t   40231,\t   40232,\t   40233,\t   40243,\t   40288,\t   40291,\t   40293,\t   40296,\t   40297,\t   40298,\t   40299,\t   40300,\t   40301,\t   40302,\t   40303,\t   40304,\t   40305,\t   40306,\t   40307\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*uint32*/ payload.address in [\t   40000,\t   40094,\t   40110,\t   40112,\t   40114,\t   40116,\t   40118,\t   40120,\t   40258,\t   40268,\t   40270,\t   40272,\t   40274,\t   40276,\t   40310\t]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str16*/\tpayload.address in [40036, 40044]",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "/*str32*/\tpayload.address in [40004, 40020, 40052]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2070,
        "y": 360,
        "wires": [
            [
                "1d22810b712bf33b"
            ],
            [
                "01f0c8f418a5e09d"
            ],
            [
                "21fb3529408e15ce"
            ],
            [
                "a6b9b514adc6f444"
            ],
            [
                "9bcebfe27f317040"
            ],
            [
                "3f0c1c86ae997194"
            ]
        ]
    },
    {
        "id": "9bcebfe27f317040",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str32'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address,\n    quantity: 16\n}\n\nmsg.topic = 'result';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 460,
        "wires": [
            [
                "aa5b3acdc0990804"
            ]
        ]
    },
    {
        "id": "a6b9b514adc6f444",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (str16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'str16'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address,\n    quantity: 8\n}\n\nmsg.topic = 'result'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 420,
        "wires": [
            [
                "aa5b3acdc0990804"
            ]
        ]
    },
    {
        "id": "21fb3529408e15ce",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint32)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint32'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address,\n    quantity: 2,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 380,
        "wires": [
            [
                "aa5b3acdc0990804"
            ]
        ]
    },
    {
        "id": "01f0c8f418a5e09d",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (sint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'sint16'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 340,
        "wires": [
            [
                "aa5b3acdc0990804"
            ]
        ]
    },
    {
        "id": "1d22810b712bf33b",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Generate Full Request (uint16)",
        "func": "msg.payload = {\n    value: {...msg.payload, type: 'uint16'},\n    fc: 3,\n    unitid: 1,\n    address: msg.payload.address,\n    quantity: 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 300,
        "wires": [
            [
                "aa5b3acdc0990804"
            ]
        ]
    },
    {
        "id": "aa5b3acdc0990804",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "fb44781298367a59",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2740,
        "y": 300,
        "wires": [
            [
                "907dfc584213a259",
                "5451f5e34a010490"
            ],
            []
        ]
    },
    {
        "id": "5451f5e34a010490",
        "type": "switch",
        "z": "4dc0f4bb14a51582",
        "name": "Check Type",
        "property": "modbusRequest.value.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "uint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sint16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uint32",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str16",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "str32",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2790,
        "y": 400,
        "wires": [
            [
                "e6b13291a6ec01aa"
            ],
            [
                "69525b6a81e0a424"
            ],
            [
                "ca1d28d74228c746"
            ],
            [
                "318a398445cc467c"
            ],
            [
                "cfc5909ee082facc"
            ],
            []
        ]
    },
    {
        "id": "e6b13291a6ec01aa",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 280,
        "wires": [
            [
                "9364620d4a5fdac0"
            ]
        ]
    },
    {
        "id": "69525b6a81e0a424",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:sint16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 320,
        "wires": [
            [
                "9364620d4a5fdac0"
            ]
        ]
    },
    {
        "id": "ca1d28d74228c746",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:uint32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32be",
                "name": "result",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 360,
        "wires": [
            [
                "9364620d4a5fdac0"
            ]
        ]
    },
    {
        "id": "318a398445cc467c",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 400,
        "wires": [
            [
                "a5b43b0c5f13328f"
            ]
        ]
    },
    {
        "id": "cfc5909ee082facc",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str32",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item9",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item10",
                "offset": 9,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item11",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item12",
                "offset": 11,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item13",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item14",
                "offset": 13,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item15",
                "offset": 14,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item16",
                "offset": 15,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 3020,
        "y": 440,
        "wires": [
            [
                "892c5e900213dcfa"
            ]
        ]
    },
    {
        "id": "f9f3729312e34a0b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3390,
        "y": 400,
        "wires": [
            [
                "d452a0805a718c0b"
            ]
        ]
    },
    {
        "id": "a5b43b0c5f13328f",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3250,
        "y": 400,
        "wires": [
            [
                "f9f3729312e34a0b"
            ]
        ]
    },
    {
        "id": "892c5e900213dcfa",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3250,
        "y": 440,
        "wires": [
            [
                "f4a74c37e2c2c422"
            ]
        ]
    },
    {
        "id": "f4a74c37e2c2c422",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "16",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3390,
        "y": 440,
        "wires": [
            [
                "d452a0805a718c0b"
            ]
        ]
    },
    {
        "id": "d452a0805a718c0b",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3530,
        "y": 440,
        "wires": [
            [
                "3030d0ed8b1b1d39"
            ]
        ]
    },
    {
        "id": "3030d0ed8b1b1d39",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3550,
        "y": 360,
        "wires": []
    },
    {
        "id": "25b4b74bd1bc4643",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Add Unit",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 40250:\n    case 40251:\n    case 40252:\n    case 40253:\n    case 40254:\n    case 40255:\n        msg.payload.result += ' %WHRtg';\n        break;\n    case 40247:\n        msg.payload.result += ' Wh';\n        break;\n    case 40246:\n        msg.payload.result += ' Ah';\n        break;\n    case 40187:\n    case 40198:\n    case 40212:\n    case 40220:\n    case 40221:\n    case 40236:\n    case 40237:\n    case 40238:\n    case 40239:\n    case 40240:\n    case 40241:\n    case 40242:\n    case 40256:\n    case 40257:\n    case 40321:\n        msg.payload.result += ' %';\n        break;\n    case 40103:\n    case 40104:\n    case 40105:\n    case 40106:\n        msg.payload.result += ' C';\n        break;\n    case 40094:\n    case 40310:\n        msg.payload.result += ' kWh';\n        break;\n    case 40092:\n        msg.payload.result += ' Pct';\n        break;\n    case 40090:\n        msg.payload.result += ' var';\n        break;\n    case 40088:\n        msg.payload.result += ' VA';\n        break;\n    case 40086:\n        msg.payload.result += ' Hz';\n        break;\n    case 40084:\n    case 40101:\n    case 40152:\n    case 40210:\n    case 40248:\n    case 40249:\n    case 40291:\n    case 40293:\n        msg.payload.result += ' W';\n        break;\n    case 40077:\n    case 40078:\n    case 40079:\n    case 40080:\n    case 40081:\n    case 40082:\n    case 40099:\n    case 40153:\n    case 40278:\n    case 40279:\n    case 40280:\n    case 40281:\n    case 40284:\n    case 40287:\n        msg.payload.result += ' V';\n        break;\n    case 40072:\n    case 40073:\n    case 40074:\n    case 40075:\n    case 40097:\n    case 40288:\n    case 40289:\n    case 40290:\n        msg.payload.result += ' A';\n        break;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3360,
        "y": 360,
        "wires": [
            [
                "3030d0ed8b1b1d39"
            ]
        ]
    },
    {
        "id": "9364620d4a5fdac0",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Scale Number",
        "func": "switch(msg.modbusRequest.value.address) {\n    case 40094:\n    case 40310:\n        msg.payload.result /= 10;\n    case 40072:\n    case 40073:\n    case 40074:\n    case 40075:\n    case 40080:\n    case 40081:\n    case 40082:\n    case 40086:\n    case 40187:\n    case 40198:\n    case 40220:\n    case 40221:\n    case 40229:\n        msg.payload.result /= 10;\n    case 40211:\n    case 40212:\n        msg.payload.result /= 10;\n    default:\n        break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 280,
        "wires": [
            [
                "25b4b74bd1bc4643"
            ]
        ]
    },
    {
        "id": "900bc54e4721778b",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "Sniff for Gateway Slaves",
        "func": "// TCP Connection -- Slave IDs 0 - 255 are available.\n// Only searching the first ID\nfor (let i = 0; i <= 1; i++) {\n    const newMsg = {...msg};\n    newMsg.payload = {\n            value: {...msg.payload},\n            fc: 3,\n            unitid: i,\n            address: 43,\n            quantity: 8\n        };\n    newMsg.topic = 'sr-no';\n    node.send(newMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 960,
        "wires": [
            [
                "d993bdfdd8ecb11c"
            ]
        ]
    },
    {
        "id": "d993bdfdd8ecb11c",
        "type": "modbus-flex-getter",
        "z": "4dc0f4bb14a51582",
        "name": "Read Gateway",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "916070376faeaa7d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2460,
        "y": 960,
        "wires": [
            [
                "178d9b191cfa99b5"
            ],
            []
        ]
    },
    {
        "id": "178d9b191cfa99b5",
        "type": "buffer-parser",
        "z": "4dc0f4bb14a51582",
        "name": "Convert to type:str16",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item2",
                "offset": 1,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item3",
                "offset": 2,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item4",
                "offset": 3,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item5",
                "offset": 4,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item6",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item7",
                "offset": 6,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            },
            {
                "type": "string",
                "name": "item8",
                "offset": 7,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 2520,
        "y": 1000,
        "wires": [
            [
                "5eead427a109f6e4"
            ]
        ]
    },
    {
        "id": "5eead427a109f6e4",
        "type": "split",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2650,
        "y": 960,
        "wires": [
            [
                "7da60d77d9e86b63"
            ]
        ]
    },
    {
        "id": "7da60d77d9e86b63",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2770,
        "y": 960,
        "wires": [
            [
                "2673dcdf22280aad"
            ]
        ]
    },
    {
        "id": "2673dcdf22280aad",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2890,
        "y": 960,
        "wires": [
            [
                "da08585126244afe"
            ]
        ]
    },
    {
        "id": "da08585126244afe",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "modbusRequest.unitid",
        "propertyType": "msg",
        "key": "payload[\"sr-no\"]",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3010,
        "y": 960,
        "wires": [
            [
                "2a494324e7d59962"
            ]
        ]
    },
    {
        "id": "2a494324e7d59962",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload = msg.modbusRequest.unitid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3140,
        "y": 960,
        "wires": [
            [
                "aa1579ca1ca227aa"
            ]
        ]
    },
    {
        "id": "32dabf8e8e76774a",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/gatewaySlaves",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2010,
        "y": 980,
        "wires": [
            [
                "900bc54e4721778b"
            ]
        ]
    },
    {
        "id": "a290485914979a40",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3390,
        "y": 960,
        "wires": []
    },
    {
        "id": "aa1579ca1ca227aa",
        "type": "join",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3270,
        "y": 960,
        "wires": [
            [
                "a290485914979a40"
            ]
        ]
    },
    {
        "id": "3f0c1c86ae997194",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.result = \"ERROR: BAD ADDRESS\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 520,
        "wires": [
            [
                "c90216d3b2d5e993"
            ]
        ]
    },
    {
        "id": "c90216d3b2d5e993",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2530,
        "y": 520,
        "wires": []
    },
    {
        "id": "a4ade779754c5e93",
        "type": "http in",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "url": "/online",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2100,
        "wires": [
            [
                "f45ae8f3cbca5591"
            ]
        ]
    },
    {
        "id": "60212f02f7993ca3",
        "type": "http response",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 310,
        "y": 2100,
        "wires": []
    },
    {
        "id": "f45ae8f3cbca5591",
        "type": "function",
        "z": "4dc0f4bb14a51582",
        "name": "",
        "func": "msg.payload.online = true;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2160,
        "wires": [
            [
                "60212f02f7993ca3"
            ]
        ]
    }
]